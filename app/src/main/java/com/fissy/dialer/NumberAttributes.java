// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/fissy/dialer/calllog/database/contract/number_attributes.proto

package com.fissy.dialer;

/**
 * <pre>
 * Information related to the phone number of the call.
 * Next ID: 15
 * </pre>
 * <p>
 * Protobuf type {@code com.fissy.dialer.NumberAttributes}
 */
public final class NumberAttributes extends
        com.google.protobuf.GeneratedMessageLite<
                NumberAttributes, NumberAttributes.Builder> implements
        // @@protoc_insertion_point(message_implements:com.fissy.dialer.NumberAttributes)
        NumberAttributesOrBuilder {
    public static final int NAME_FIELD_NUMBER = 1;
    public static final int PHOTO_URI_FIELD_NUMBER = 2;
    public static final int PHOTO_ID_FIELD_NUMBER = 3;
    public static final int LOOKUP_URI_FIELD_NUMBER = 4;
    public static final int NUMBER_TYPE_LABEL_FIELD_NUMBER = 5;
    public static final int IS_BUSINESS_FIELD_NUMBER = 6;
    public static final int CAN_REPORT_AS_INVALID_NUMBER_FIELD_NUMBER = 7;
    public static final int IS_CP2_INFO_INCOMPLETE_FIELD_NUMBER = 8;
    public static final int IS_BLOCKED_FIELD_NUMBER = 9;
    public static final int IS_SPAM_FIELD_NUMBER = 10;
    public static final int CONTACT_SOURCE_FIELD_NUMBER = 11;
    public static final int CAN_SUPPORT_CARRIER_VIDEO_CALL_FIELD_NUMBER = 12;
    public static final int GEOLOCATION_FIELD_NUMBER = 13;
    public static final int IS_EMERGENCY_NUMBER_FIELD_NUMBER = 14;
    // @@protoc_insertion_point(class_scope:com.fissy.dialer.NumberAttributes)
    private static final com.fissy.dialer.NumberAttributes DEFAULT_INSTANCE;
    private static volatile com.google.protobuf.Parser<NumberAttributes> PARSER;

    static {
        DEFAULT_INSTANCE = new NumberAttributes();
        DEFAULT_INSTANCE.makeImmutable();
    }

    private int bitField0_;
    private java.lang.String name_;
    private java.lang.String photoUri_;
    private long photoId_;
    private java.lang.String lookupUri_;
    private java.lang.String numberTypeLabel_;
    private boolean isBusiness_;
    private boolean canReportAsInvalidNumber_;
    private boolean isCp2InfoIncomplete_;
    private boolean isBlocked_;
    private boolean isSpam_;
    private int contactSource_;
    private boolean canSupportCarrierVideoCall_;
    private java.lang.String geolocation_;
    private boolean isEmergencyNumber_;

    private NumberAttributes() {
        name_ = "";
        photoUri_ = "";
        photoId_ = 0L;
        lookupUri_ = "";
        numberTypeLabel_ = "";
        isBusiness_ = false;
        canReportAsInvalidNumber_ = false;
        isCp2InfoIncomplete_ = false;
        isBlocked_ = false;
        isSpam_ = false;
        contactSource_ = 0;
        canSupportCarrierVideoCall_ = false;
        geolocation_ = "";
        isEmergencyNumber_ = false;
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.NumberAttributes parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.NumberAttributes parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.NumberAttributes parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.fissy.dialer.NumberAttributes prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static com.fissy.dialer.NumberAttributes getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<NumberAttributes> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }

    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
        return name_;
    }

    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setName(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        name_ = value;
    }

    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
    getNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }

    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setNameBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        name_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    public boolean hasPhotoUri() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    public java.lang.String getPhotoUri() {
        return photoUri_;
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    private void setPhotoUri(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        photoUri_ = value;
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    public com.google.protobuf.ByteString
    getPhotoUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    private void setPhotoUriBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        photoUri_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    private void clearPhotoUri() {
        bitField0_ = (bitField0_ & ~0x00000002);
        photoUri_ = getDefaultInstance().getPhotoUri();
    }

    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    public boolean hasPhotoId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    public long getPhotoId() {
        return photoId_;
    }

    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    private void setPhotoId(long value) {
        bitField0_ |= 0x00000004;
        photoId_ = value;
    }

    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    private void clearPhotoId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        photoId_ = 0L;
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    public boolean hasLookupUri() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    public java.lang.String getLookupUri() {
        return lookupUri_;
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    private void setLookupUri(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        lookupUri_ = value;
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    public com.google.protobuf.ByteString
    getLookupUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(lookupUri_);
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    private void setLookupUriBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        lookupUri_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    private void clearLookupUri() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lookupUri_ = getDefaultInstance().getLookupUri();
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    public boolean hasNumberTypeLabel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    public java.lang.String getNumberTypeLabel() {
        return numberTypeLabel_;
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    private void setNumberTypeLabel(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        numberTypeLabel_ = value;
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    public com.google.protobuf.ByteString
    getNumberTypeLabelBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(numberTypeLabel_);
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    private void setNumberTypeLabelBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        numberTypeLabel_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    private void clearNumberTypeLabel() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numberTypeLabel_ = getDefaultInstance().getNumberTypeLabel();
    }

    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public boolean hasIsBusiness() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
    }

    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public boolean getIsBusiness() {
        return isBusiness_;
    }

    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    private void setIsBusiness(boolean value) {
        bitField0_ |= 0x00000020;
        isBusiness_ = value;
    }

    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    private void clearIsBusiness() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isBusiness_ = false;
    }

    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    public boolean hasCanReportAsInvalidNumber() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
    }

    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    public boolean getCanReportAsInvalidNumber() {
        return canReportAsInvalidNumber_;
    }

    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    private void setCanReportAsInvalidNumber(boolean value) {
        bitField0_ |= 0x00000040;
        canReportAsInvalidNumber_ = value;
    }

    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    private void clearCanReportAsInvalidNumber() {
        bitField0_ = (bitField0_ & ~0x00000040);
        canReportAsInvalidNumber_ = false;
    }

    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    public boolean hasIsCp2InfoIncomplete() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
    }

    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    public boolean getIsCp2InfoIncomplete() {
        return isCp2InfoIncomplete_;
    }

    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    private void setIsCp2InfoIncomplete(boolean value) {
        bitField0_ |= 0x00000080;
        isCp2InfoIncomplete_ = value;
    }

    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    private void clearIsCp2InfoIncomplete() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isCp2InfoIncomplete_ = false;
    }

    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    public boolean hasIsBlocked() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
    }

    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    public boolean getIsBlocked() {
        return isBlocked_;
    }

    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    private void setIsBlocked(boolean value) {
        bitField0_ |= 0x00000100;
        isBlocked_ = value;
    }

    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    private void clearIsBlocked() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isBlocked_ = false;
    }

    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    public boolean hasIsSpam() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
    }

    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    public boolean getIsSpam() {
        return isSpam_;
    }

    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    private void setIsSpam(boolean value) {
        bitField0_ |= 0x00000200;
        isSpam_ = value;
    }

    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    private void clearIsSpam() {
        bitField0_ = (bitField0_ & ~0x00000200);
        isSpam_ = false;
    }

    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    public boolean hasContactSource() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
    }

    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    public com.fissy.dialer.logging.ContactSource.Type getContactSource() {
        com.fissy.dialer.logging.ContactSource.Type result = com.fissy.dialer.logging.ContactSource.Type.forNumber(contactSource_);
        return result == null ? com.fissy.dialer.logging.ContactSource.Type.UNKNOWN_SOURCE_TYPE : result;
    }

    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    private void setContactSource(com.fissy.dialer.logging.ContactSource.Type value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        contactSource_ = value.getNumber();
    }

    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    private void clearContactSource() {
        bitField0_ = (bitField0_ & ~0x00000400);
        contactSource_ = 0;
    }

    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    public boolean hasCanSupportCarrierVideoCall() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
    }

    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    public boolean getCanSupportCarrierVideoCall() {
        return canSupportCarrierVideoCall_;
    }

    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    private void setCanSupportCarrierVideoCall(boolean value) {
        bitField0_ |= 0x00000800;
        canSupportCarrierVideoCall_ = value;
    }

    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    private void clearCanSupportCarrierVideoCall() {
        bitField0_ = (bitField0_ & ~0x00000800);
        canSupportCarrierVideoCall_ = false;
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    public boolean hasGeolocation() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    public java.lang.String getGeolocation() {
        return geolocation_;
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    private void setGeolocation(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        geolocation_ = value;
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    public com.google.protobuf.ByteString
    getGeolocationBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(geolocation_);
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    private void setGeolocationBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        geolocation_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    private void clearGeolocation() {
        bitField0_ = (bitField0_ & ~0x00001000);
        geolocation_ = getDefaultInstance().getGeolocation();
    }

    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    public boolean hasIsEmergencyNumber() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
    }

    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    public boolean getIsEmergencyNumber() {
        return isEmergencyNumber_;
    }

    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    private void setIsEmergencyNumber(boolean value) {
        bitField0_ |= 0x00002000;
        isEmergencyNumber_ = value;
    }

    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    private void clearIsEmergencyNumber() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isEmergencyNumber_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeString(1, getName());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeString(2, getPhotoUri());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeInt64(3, photoId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeString(4, getLookupUri());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeString(5, getNumberTypeLabel());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeBool(6, isBusiness_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
            output.writeBool(7, canReportAsInvalidNumber_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
            output.writeBool(8, isCp2InfoIncomplete_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
            output.writeBool(9, isBlocked_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
            output.writeBool(10, isSpam_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
            output.writeEnum(11, contactSource_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
            output.writeBool(12, canSupportCarrierVideoCall_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
            output.writeString(13, getGeolocation());
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
            output.writeBool(14, isEmergencyNumber_);
        }
        unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(1, getName());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(2, getPhotoUri());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt64Size(3, photoId_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(4, getLookupUri());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(5, getNumberTypeLabel());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(6, isBusiness_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(7, canReportAsInvalidNumber_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(8, isCp2InfoIncomplete_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(9, isBlocked_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(10, isSpam_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeEnumSize(11, contactSource_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(12, canSupportCarrierVideoCall_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(13, getGeolocation());
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(14, isEmergencyNumber_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
    }

    protected Object dynamicMethod(
            com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new com.fissy.dialer.NumberAttributes();
            }
            case IS_INITIALIZED: {
                return DEFAULT_INSTANCE;
            }
            case MAKE_IMMUTABLE: {
                return null;
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case VISIT: {
                Visitor visitor = (Visitor) arg0;
                com.fissy.dialer.NumberAttributes other = (com.fissy.dialer.NumberAttributes) arg1;
                name_ = visitor.visitString(
                        hasName(), name_,
                        other.hasName(), other.name_);
                photoUri_ = visitor.visitString(
                        hasPhotoUri(), photoUri_,
                        other.hasPhotoUri(), other.photoUri_);
                photoId_ = visitor.visitLong(
                        hasPhotoId(), photoId_,
                        other.hasPhotoId(), other.photoId_);
                lookupUri_ = visitor.visitString(
                        hasLookupUri(), lookupUri_,
                        other.hasLookupUri(), other.lookupUri_);
                numberTypeLabel_ = visitor.visitString(
                        hasNumberTypeLabel(), numberTypeLabel_,
                        other.hasNumberTypeLabel(), other.numberTypeLabel_);
                isBusiness_ = visitor.visitBoolean(
                        hasIsBusiness(), isBusiness_,
                        other.hasIsBusiness(), other.isBusiness_);
                canReportAsInvalidNumber_ = visitor.visitBoolean(
                        hasCanReportAsInvalidNumber(), canReportAsInvalidNumber_,
                        other.hasCanReportAsInvalidNumber(), other.canReportAsInvalidNumber_);
                isCp2InfoIncomplete_ = visitor.visitBoolean(
                        hasIsCp2InfoIncomplete(), isCp2InfoIncomplete_,
                        other.hasIsCp2InfoIncomplete(), other.isCp2InfoIncomplete_);
                isBlocked_ = visitor.visitBoolean(
                        hasIsBlocked(), isBlocked_,
                        other.hasIsBlocked(), other.isBlocked_);
                isSpam_ = visitor.visitBoolean(
                        hasIsSpam(), isSpam_,
                        other.hasIsSpam(), other.isSpam_);
                contactSource_ = visitor.visitInt(hasContactSource(), contactSource_,
                        other.hasContactSource(), other.contactSource_);
                canSupportCarrierVideoCall_ = visitor.visitBoolean(
                        hasCanSupportCarrierVideoCall(), canSupportCarrierVideoCall_,
                        other.hasCanSupportCarrierVideoCall(), other.canSupportCarrierVideoCall_);
                geolocation_ = visitor.visitString(
                        hasGeolocation(), geolocation_,
                        other.hasGeolocation(), other.geolocation_);
                isEmergencyNumber_ = visitor.visitBoolean(
                        hasIsEmergencyNumber(), isEmergencyNumber_,
                        other.hasIsEmergencyNumber(), other.isEmergencyNumber_);
                if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                        .INSTANCE) {
                    bitField0_ |= other.bitField0_;
                }
                return this;
            }
            case MERGE_FROM_STREAM: {
                com.google.protobuf.CodedInputStream input =
                        (com.google.protobuf.CodedInputStream) arg0;
                com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                        (com.google.protobuf.ExtensionRegistryLite) arg1;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(tag, input)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                String s = input.readString();
                                bitField0_ |= 0x00000001;
                                name_ = s;
                                break;
                            }
                            case 18: {
                                String s = input.readString();
                                bitField0_ |= 0x00000002;
                                photoUri_ = s;
                                break;
                            }
                            case 24: {
                                bitField0_ |= 0x00000004;
                                photoId_ = input.readInt64();
                                break;
                            }
                            case 34: {
                                String s = input.readString();
                                bitField0_ |= 0x00000008;
                                lookupUri_ = s;
                                break;
                            }
                            case 42: {
                                String s = input.readString();
                                bitField0_ |= 0x00000010;
                                numberTypeLabel_ = s;
                                break;
                            }
                            case 48: {
                                bitField0_ |= 0x00000020;
                                isBusiness_ = input.readBool();
                                break;
                            }
                            case 56: {
                                bitField0_ |= 0x00000040;
                                canReportAsInvalidNumber_ = input.readBool();
                                break;
                            }
                            case 64: {
                                bitField0_ |= 0x00000080;
                                isCp2InfoIncomplete_ = input.readBool();
                                break;
                            }
                            case 72: {
                                bitField0_ |= 0x00000100;
                                isBlocked_ = input.readBool();
                                break;
                            }
                            case 80: {
                                bitField0_ |= 0x00000200;
                                isSpam_ = input.readBool();
                                break;
                            }
                            case 88: {
                                int rawValue = input.readEnum();
                                com.fissy.dialer.logging.ContactSource.Type value = com.fissy.dialer.logging.ContactSource.Type.forNumber(rawValue);
                                if (value == null) {
                                    super.mergeVarintField(11, rawValue);
                                } else {
                                    bitField0_ |= 0x00000400;
                                    contactSource_ = rawValue;
                                }
                                break;
                            }
                            case 96: {
                                bitField0_ |= 0x00000800;
                                canSupportCarrierVideoCall_ = input.readBool();
                                break;
                            }
                            case 106: {
                                String s = input.readString();
                                bitField0_ |= 0x00001000;
                                geolocation_ = s;
                                break;
                            }
                            case 112: {
                                bitField0_ |= 0x00002000;
                                isEmergencyNumber_ = input.readBool();
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw new RuntimeException(e.setUnfinishedMessage(this));
                } catch (java.io.IOException e) {
                    throw new RuntimeException(
                            new com.google.protobuf.InvalidProtocolBufferException(
                                    e.getMessage()).setUnfinishedMessage(this));
                }
            }
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                if (PARSER == null) {
                    synchronized (com.fissy.dialer.NumberAttributes.class) {
                        if (PARSER == null) {
                            PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                        }
                    }
                }
                return PARSER;
            }
        }
        throw new UnsupportedOperationException();
    }

    /**
     * <pre>
     * Information related to the phone number of the call.
     * Next ID: 15
     * </pre>
     * <p>
     * Protobuf type {@code com.fissy.dialer.NumberAttributes}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageLite.Builder<
                    com.fissy.dialer.NumberAttributes, Builder> implements
            // @@protoc_insertion_point(builder_implements:com.fissy.dialer.NumberAttributes)
            com.fissy.dialer.NumberAttributesOrBuilder {
        // Construct using com.fissy.dialer.NumberAttributes.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The name (which may be a person's name or business name, but not a number)
         * formatted exactly as it should appear to the user. If the user's locale or
         * name display preferences change, this field should be rewritten.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public boolean hasName() {
            return instance.hasName();
        }

        /**
         * <pre>
         * The name (which may be a person's name or business name, but not a number)
         * formatted exactly as it should appear to the user. If the user's locale or
         * name display preferences change, this field should be rewritten.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public java.lang.String getName() {
            return instance.getName();
        }

        /**
         * <pre>
         * The name (which may be a person's name or business name, but not a number)
         * formatted exactly as it should appear to the user. If the user's locale or
         * name display preferences change, this field should be rewritten.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setName(
                java.lang.String value) {
            copyOnWrite();
            instance.setName(value);
            return this;
        }

        /**
         * <pre>
         * The name (which may be a person's name or business name, but not a number)
         * formatted exactly as it should appear to the user. If the user's locale or
         * name display preferences change, this field should be rewritten.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public com.google.protobuf.ByteString
        getNameBytes() {
            return instance.getNameBytes();
        }

        /**
         * <pre>
         * The name (which may be a person's name or business name, but not a number)
         * formatted exactly as it should appear to the user. If the user's locale or
         * name display preferences change, this field should be rewritten.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setNameBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setNameBytes(value);
            return this;
        }

        /**
         * <pre>
         * The name (which may be a person's name or business name, but not a number)
         * formatted exactly as it should appear to the user. If the user's locale or
         * name display preferences change, this field should be rewritten.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder clearName() {
            copyOnWrite();
            instance.clearName();
            return this;
        }

        /**
         * <pre>
         * A photo URI for the contact to display in the call log list view.
         * </pre>
         *
         * <code>optional string photo_uri = 2;</code>
         */
        public boolean hasPhotoUri() {
            return instance.hasPhotoUri();
        }

        /**
         * <pre>
         * A photo URI for the contact to display in the call log list view.
         * </pre>
         *
         * <code>optional string photo_uri = 2;</code>
         */
        public java.lang.String getPhotoUri() {
            return instance.getPhotoUri();
        }

        /**
         * <pre>
         * A photo URI for the contact to display in the call log list view.
         * </pre>
         *
         * <code>optional string photo_uri = 2;</code>
         */
        public Builder setPhotoUri(
                java.lang.String value) {
            copyOnWrite();
            instance.setPhotoUri(value);
            return this;
        }

        /**
         * <pre>
         * A photo URI for the contact to display in the call log list view.
         * </pre>
         *
         * <code>optional string photo_uri = 2;</code>
         */
        public com.google.protobuf.ByteString
        getPhotoUriBytes() {
            return instance.getPhotoUriBytes();
        }

        /**
         * <pre>
         * A photo URI for the contact to display in the call log list view.
         * </pre>
         *
         * <code>optional string photo_uri = 2;</code>
         */
        public Builder setPhotoUriBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setPhotoUriBytes(value);
            return this;
        }

        /**
         * <pre>
         * A photo URI for the contact to display in the call log list view.
         * </pre>
         *
         * <code>optional string photo_uri = 2;</code>
         */
        public Builder clearPhotoUri() {
            copyOnWrite();
            instance.clearPhotoUri();
            return this;
        }

        /**
         * <pre>
         * A photo ID (from the contacts provider) for the contact to display in the
         * call log list view.
         * </pre>
         *
         * <code>optional int64 photo_id = 3;</code>
         */
        public boolean hasPhotoId() {
            return instance.hasPhotoId();
        }

        /**
         * <pre>
         * A photo ID (from the contacts provider) for the contact to display in the
         * call log list view.
         * </pre>
         *
         * <code>optional int64 photo_id = 3;</code>
         */
        public long getPhotoId() {
            return instance.getPhotoId();
        }

        /**
         * <pre>
         * A photo ID (from the contacts provider) for the contact to display in the
         * call log list view.
         * </pre>
         *
         * <code>optional int64 photo_id = 3;</code>
         */
        public Builder setPhotoId(long value) {
            copyOnWrite();
            instance.setPhotoId(value);
            return this;
        }

        /**
         * <pre>
         * A photo ID (from the contacts provider) for the contact to display in the
         * call log list view.
         * </pre>
         *
         * <code>optional int64 photo_id = 3;</code>
         */
        public Builder clearPhotoId() {
            copyOnWrite();
            instance.clearPhotoId();
            return this;
        }

        /**
         * <pre>
         * The contacts provider lookup URI for the contact associated with the call.
         * </pre>
         *
         * <code>optional string lookup_uri = 4;</code>
         */
        public boolean hasLookupUri() {
            return instance.hasLookupUri();
        }

        /**
         * <pre>
         * The contacts provider lookup URI for the contact associated with the call.
         * </pre>
         *
         * <code>optional string lookup_uri = 4;</code>
         */
        public java.lang.String getLookupUri() {
            return instance.getLookupUri();
        }

        /**
         * <pre>
         * The contacts provider lookup URI for the contact associated with the call.
         * </pre>
         *
         * <code>optional string lookup_uri = 4;</code>
         */
        public Builder setLookupUri(
                java.lang.String value) {
            copyOnWrite();
            instance.setLookupUri(value);
            return this;
        }

        /**
         * <pre>
         * The contacts provider lookup URI for the contact associated with the call.
         * </pre>
         *
         * <code>optional string lookup_uri = 4;</code>
         */
        public com.google.protobuf.ByteString
        getLookupUriBytes() {
            return instance.getLookupUriBytes();
        }

        /**
         * <pre>
         * The contacts provider lookup URI for the contact associated with the call.
         * </pre>
         *
         * <code>optional string lookup_uri = 4;</code>
         */
        public Builder setLookupUriBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setLookupUriBytes(value);
            return this;
        }

        /**
         * <pre>
         * The contacts provider lookup URI for the contact associated with the call.
         * </pre>
         *
         * <code>optional string lookup_uri = 4;</code>
         */
        public Builder clearLookupUri() {
            copyOnWrite();
            instance.clearLookupUri();
            return this;
        }

        /**
         * <pre>
         * The number type as a string to be displayed to the user, for example "Home"
         * or "Mobile". This column should be updated for the appropriate language
         * when the locale changes.
         * </pre>
         *
         * <code>optional string number_type_label = 5;</code>
         */
        public boolean hasNumberTypeLabel() {
            return instance.hasNumberTypeLabel();
        }

        /**
         * <pre>
         * The number type as a string to be displayed to the user, for example "Home"
         * or "Mobile". This column should be updated for the appropriate language
         * when the locale changes.
         * </pre>
         *
         * <code>optional string number_type_label = 5;</code>
         */
        public java.lang.String getNumberTypeLabel() {
            return instance.getNumberTypeLabel();
        }

        /**
         * <pre>
         * The number type as a string to be displayed to the user, for example "Home"
         * or "Mobile". This column should be updated for the appropriate language
         * when the locale changes.
         * </pre>
         *
         * <code>optional string number_type_label = 5;</code>
         */
        public Builder setNumberTypeLabel(
                java.lang.String value) {
            copyOnWrite();
            instance.setNumberTypeLabel(value);
            return this;
        }

        /**
         * <pre>
         * The number type as a string to be displayed to the user, for example "Home"
         * or "Mobile". This column should be updated for the appropriate language
         * when the locale changes.
         * </pre>
         *
         * <code>optional string number_type_label = 5;</code>
         */
        public com.google.protobuf.ByteString
        getNumberTypeLabelBytes() {
            return instance.getNumberTypeLabelBytes();
        }

        /**
         * <pre>
         * The number type as a string to be displayed to the user, for example "Home"
         * or "Mobile". This column should be updated for the appropriate language
         * when the locale changes.
         * </pre>
         *
         * <code>optional string number_type_label = 5;</code>
         */
        public Builder setNumberTypeLabelBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setNumberTypeLabelBytes(value);
            return this;
        }

        /**
         * <pre>
         * The number type as a string to be displayed to the user, for example "Home"
         * or "Mobile". This column should be updated for the appropriate language
         * when the locale changes.
         * </pre>
         *
         * <code>optional string number_type_label = 5;</code>
         */
        public Builder clearNumberTypeLabel() {
            copyOnWrite();
            instance.clearNumberTypeLabel();
            return this;
        }

        /**
         * <pre>
         * The number is a call to a business from nearby places lookup.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public boolean hasIsBusiness() {
            return instance.hasIsBusiness();
        }

        /**
         * <pre>
         * The number is a call to a business from nearby places lookup.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public boolean getIsBusiness() {
            return instance.getIsBusiness();
        }

        /**
         * <pre>
         * The number is a call to a business from nearby places lookup.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public Builder setIsBusiness(boolean value) {
            copyOnWrite();
            instance.setIsBusiness(value);
            return this;
        }

        /**
         * <pre>
         * The number is a call to a business from nearby places lookup.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public Builder clearIsBusiness() {
            copyOnWrite();
            instance.clearIsBusiness();
            return this;
        }

        /**
         * <pre>
         * Can the number be reported as invalid through People API
         * </pre>
         *
         * <code>optional bool can_report_as_invalid_number = 7;</code>
         */
        public boolean hasCanReportAsInvalidNumber() {
            return instance.hasCanReportAsInvalidNumber();
        }

        /**
         * <pre>
         * Can the number be reported as invalid through People API
         * </pre>
         *
         * <code>optional bool can_report_as_invalid_number = 7;</code>
         */
        public boolean getCanReportAsInvalidNumber() {
            return instance.getCanReportAsInvalidNumber();
        }

        /**
         * <pre>
         * Can the number be reported as invalid through People API
         * </pre>
         *
         * <code>optional bool can_report_as_invalid_number = 7;</code>
         */
        public Builder setCanReportAsInvalidNumber(boolean value) {
            copyOnWrite();
            instance.setCanReportAsInvalidNumber(value);
            return this;
        }

        /**
         * <pre>
         * Can the number be reported as invalid through People API
         * </pre>
         *
         * <code>optional bool can_report_as_invalid_number = 7;</code>
         */
        public Builder clearCanReportAsInvalidNumber() {
            copyOnWrite();
            instance.clearCanReportAsInvalidNumber();
            return this;
        }

        /**
         * <pre>
         * True if the CP2 information is incomplete and needs to be queried at
         * display time.
         * </pre>
         *
         * <code>optional bool is_cp2_info_incomplete = 8;</code>
         */
        public boolean hasIsCp2InfoIncomplete() {
            return instance.hasIsCp2InfoIncomplete();
        }

        /**
         * <pre>
         * True if the CP2 information is incomplete and needs to be queried at
         * display time.
         * </pre>
         *
         * <code>optional bool is_cp2_info_incomplete = 8;</code>
         */
        public boolean getIsCp2InfoIncomplete() {
            return instance.getIsCp2InfoIncomplete();
        }

        /**
         * <pre>
         * True if the CP2 information is incomplete and needs to be queried at
         * display time.
         * </pre>
         *
         * <code>optional bool is_cp2_info_incomplete = 8;</code>
         */
        public Builder setIsCp2InfoIncomplete(boolean value) {
            copyOnWrite();
            instance.setIsCp2InfoIncomplete(value);
            return this;
        }

        /**
         * <pre>
         * True if the CP2 information is incomplete and needs to be queried at
         * display time.
         * </pre>
         *
         * <code>optional bool is_cp2_info_incomplete = 8;</code>
         */
        public Builder clearIsCp2InfoIncomplete() {
            copyOnWrite();
            instance.clearIsCp2InfoIncomplete();
            return this;
        }

        /**
         * <pre>
         * Whether the number is blocked.
         * </pre>
         *
         * <code>optional bool is_blocked = 9;</code>
         */
        public boolean hasIsBlocked() {
            return instance.hasIsBlocked();
        }

        /**
         * <pre>
         * Whether the number is blocked.
         * </pre>
         *
         * <code>optional bool is_blocked = 9;</code>
         */
        public boolean getIsBlocked() {
            return instance.getIsBlocked();
        }

        /**
         * <pre>
         * Whether the number is blocked.
         * </pre>
         *
         * <code>optional bool is_blocked = 9;</code>
         */
        public Builder setIsBlocked(boolean value) {
            copyOnWrite();
            instance.setIsBlocked(value);
            return this;
        }

        /**
         * <pre>
         * Whether the number is blocked.
         * </pre>
         *
         * <code>optional bool is_blocked = 9;</code>
         */
        public Builder clearIsBlocked() {
            copyOnWrite();
            instance.clearIsBlocked();
            return this;
        }

        /**
         * <pre>
         * Whether the number is spam.
         * </pre>
         *
         * <code>optional bool is_spam = 10;</code>
         */
        public boolean hasIsSpam() {
            return instance.hasIsSpam();
        }

        /**
         * <pre>
         * Whether the number is spam.
         * </pre>
         *
         * <code>optional bool is_spam = 10;</code>
         */
        public boolean getIsSpam() {
            return instance.getIsSpam();
        }

        /**
         * <pre>
         * Whether the number is spam.
         * </pre>
         *
         * <code>optional bool is_spam = 10;</code>
         */
        public Builder setIsSpam(boolean value) {
            copyOnWrite();
            instance.setIsSpam(value);
            return this;
        }

        /**
         * <pre>
         * Whether the number is spam.
         * </pre>
         *
         * <code>optional bool is_spam = 10;</code>
         */
        public Builder clearIsSpam() {
            copyOnWrite();
            instance.clearIsSpam();
            return this;
        }

        /**
         * <pre>
         * Source of the contact associated with the number.
         * </pre>
         *
         * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
         */
        public boolean hasContactSource() {
            return instance.hasContactSource();
        }

        /**
         * <pre>
         * Source of the contact associated with the number.
         * </pre>
         *
         * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
         */
        public com.fissy.dialer.logging.ContactSource.Type getContactSource() {
            return instance.getContactSource();
        }

        /**
         * <pre>
         * Source of the contact associated with the number.
         * </pre>
         *
         * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
         */
        public Builder setContactSource(com.fissy.dialer.logging.ContactSource.Type value) {
            copyOnWrite();
            instance.setContactSource(value);
            return this;
        }

        /**
         * <pre>
         * Source of the contact associated with the number.
         * </pre>
         *
         * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 11;</code>
         */
        public Builder clearContactSource() {
            copyOnWrite();
            instance.clearContactSource();
            return this;
        }

        /**
         * <pre>
         * Whether the number can be reached via a carrier video call.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 12;</code>
         */
        public boolean hasCanSupportCarrierVideoCall() {
            return instance.hasCanSupportCarrierVideoCall();
        }

        /**
         * <pre>
         * Whether the number can be reached via a carrier video call.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 12;</code>
         */
        public boolean getCanSupportCarrierVideoCall() {
            return instance.getCanSupportCarrierVideoCall();
        }

        /**
         * <pre>
         * Whether the number can be reached via a carrier video call.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 12;</code>
         */
        public Builder setCanSupportCarrierVideoCall(boolean value) {
            copyOnWrite();
            instance.setCanSupportCarrierVideoCall(value);
            return this;
        }

        /**
         * <pre>
         * Whether the number can be reached via a carrier video call.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 12;</code>
         */
        public Builder clearCanSupportCarrierVideoCall() {
            copyOnWrite();
            instance.clearCanSupportCarrierVideoCall();
            return this;
        }

        /**
         * <pre>
         * Description of the number's geolocation (e.g., "Mountain View, CA").
         * This string is for display purpose only.
         * </pre>
         *
         * <code>optional string geolocation = 13;</code>
         */
        public boolean hasGeolocation() {
            return instance.hasGeolocation();
        }

        /**
         * <pre>
         * Description of the number's geolocation (e.g., "Mountain View, CA").
         * This string is for display purpose only.
         * </pre>
         *
         * <code>optional string geolocation = 13;</code>
         */
        public java.lang.String getGeolocation() {
            return instance.getGeolocation();
        }

        /**
         * <pre>
         * Description of the number's geolocation (e.g., "Mountain View, CA").
         * This string is for display purpose only.
         * </pre>
         *
         * <code>optional string geolocation = 13;</code>
         */
        public Builder setGeolocation(
                java.lang.String value) {
            copyOnWrite();
            instance.setGeolocation(value);
            return this;
        }

        /**
         * <pre>
         * Description of the number's geolocation (e.g., "Mountain View, CA").
         * This string is for display purpose only.
         * </pre>
         *
         * <code>optional string geolocation = 13;</code>
         */
        public com.google.protobuf.ByteString
        getGeolocationBytes() {
            return instance.getGeolocationBytes();
        }

        /**
         * <pre>
         * Description of the number's geolocation (e.g., "Mountain View, CA").
         * This string is for display purpose only.
         * </pre>
         *
         * <code>optional string geolocation = 13;</code>
         */
        public Builder setGeolocationBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setGeolocationBytes(value);
            return this;
        }

        /**
         * <pre>
         * Description of the number's geolocation (e.g., "Mountain View, CA").
         * This string is for display purpose only.
         * </pre>
         *
         * <code>optional string geolocation = 13;</code>
         */
        public Builder clearGeolocation() {
            copyOnWrite();
            instance.clearGeolocation();
            return this;
        }

        /**
         * <pre>
         * Whether the number is an emergency number.
         * </pre>
         *
         * <code>optional bool is_emergency_number = 14;</code>
         */
        public boolean hasIsEmergencyNumber() {
            return instance.hasIsEmergencyNumber();
        }

        /**
         * <pre>
         * Whether the number is an emergency number.
         * </pre>
         *
         * <code>optional bool is_emergency_number = 14;</code>
         */
        public boolean getIsEmergencyNumber() {
            return instance.getIsEmergencyNumber();
        }

        /**
         * <pre>
         * Whether the number is an emergency number.
         * </pre>
         *
         * <code>optional bool is_emergency_number = 14;</code>
         */
        public Builder setIsEmergencyNumber(boolean value) {
            copyOnWrite();
            instance.setIsEmergencyNumber(value);
            return this;
        }

        /**
         * <pre>
         * Whether the number is an emergency number.
         * </pre>
         *
         * <code>optional bool is_emergency_number = 14;</code>
         */
        public Builder clearIsEmergencyNumber() {
            copyOnWrite();
            instance.clearIsEmergencyNumber();
            return this;
        }

        // @@protoc_insertion_point(builder_scope:com.fissy.dialer.NumberAttributes)
    }
}

