// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/fissy/dialer/glidephotomanager/photo_info.proto

package com.fissy.dialer.glidephotomanager;

/**
 * <pre>
 * Contains information associated with a number, which is used to create the
 * photo.
 * Next ID: 13
 * </pre>
 * <p>
 * Protobuf type {@code com.fissy.dialer.glidephotomanager.PhotoInfo}
 */
public final class PhotoInfo extends
        com.google.protobuf.GeneratedMessageLite<
                PhotoInfo, PhotoInfo.Builder> implements
        // @@protoc_insertion_point(message_implements:com.fissy.dialer.glidephotomanager.PhotoInfo)
        PhotoInfoOrBuilder {
    public static final int NAME_FIELD_NUMBER = 1;
    public static final int FORMATTED_NUMBER_FIELD_NUMBER = 2;
    public static final int PHOTO_URI_FIELD_NUMBER = 3;
    public static final int PHOTO_ID_FIELD_NUMBER = 4;
    public static final int LOOKUP_URI_FIELD_NUMBER = 5;
    public static final int IS_BUSINESS_FIELD_NUMBER = 6;
    public static final int IS_VOICEMAIL_FIELD_NUMBER = 7;
    public static final int IS_BLOCKED_FIELD_NUMBER = 8;
    public static final int IS_SPAM_FIELD_NUMBER = 9;
    public static final int IS_VIDEO_FIELD_NUMBER = 10;
    public static final int IS_RTT_FIELD_NUMBER = 11;
    public static final int IS_CONFERENCE_FIELD_NUMBER = 12;
    // @@protoc_insertion_point(class_scope:com.fissy.dialer.glidephotomanager.PhotoInfo)
    private static final com.fissy.dialer.glidephotomanager.PhotoInfo DEFAULT_INSTANCE;
    private static volatile com.google.protobuf.Parser<PhotoInfo> PARSER;

    static {
        DEFAULT_INSTANCE = new PhotoInfo();
        DEFAULT_INSTANCE.makeImmutable();
    }

    private int bitField0_;
    private java.lang.String name_;
    private java.lang.String formattedNumber_;
    private java.lang.String photoUri_;
    private long photoId_;
    private java.lang.String lookupUri_;
    private boolean isBusiness_;
    private boolean isVoicemail_;
    private boolean isBlocked_;
    private boolean isSpam_;
    private boolean isVideo_;
    private boolean isRtt_;
    private boolean isConference_;

    private PhotoInfo() {
        name_ = "";
        formattedNumber_ = "";
        photoUri_ = "";
        photoId_ = 0L;
        lookupUri_ = "";
        isBusiness_ = false;
        isVoicemail_ = false;
        isBlocked_ = false;
        isSpam_ = false;
        isVideo_ = false;
        isRtt_ = false;
        isConference_ = false;
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.fissy.dialer.glidephotomanager.PhotoInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static com.fissy.dialer.glidephotomanager.PhotoInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<PhotoInfo> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }

    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
        return name_;
    }

    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setName(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        name_ = value;
    }

    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
    getNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }

    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setNameBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        name_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    public boolean hasFormattedNumber() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    public java.lang.String getFormattedNumber() {
        return formattedNumber_;
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    private void setFormattedNumber(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        formattedNumber_ = value;
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    public com.google.protobuf.ByteString
    getFormattedNumberBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(formattedNumber_);
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    private void setFormattedNumberBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        formattedNumber_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    private void clearFormattedNumber() {
        bitField0_ = (bitField0_ & ~0x00000002);
        formattedNumber_ = getDefaultInstance().getFormattedNumber();
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    public boolean hasPhotoUri() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    public java.lang.String getPhotoUri() {
        return photoUri_;
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    private void setPhotoUri(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        photoUri_ = value;
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    public com.google.protobuf.ByteString
    getPhotoUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    private void setPhotoUriBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        photoUri_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    private void clearPhotoUri() {
        bitField0_ = (bitField0_ & ~0x00000004);
        photoUri_ = getDefaultInstance().getPhotoUri();
    }

    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    public boolean hasPhotoId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    public long getPhotoId() {
        return photoId_;
    }

    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    private void setPhotoId(long value) {
        bitField0_ |= 0x00000008;
        photoId_ = value;
    }

    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    private void clearPhotoId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        photoId_ = 0L;
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    public boolean hasLookupUri() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    public java.lang.String getLookupUri() {
        return lookupUri_;
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    private void setLookupUri(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        lookupUri_ = value;
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    public com.google.protobuf.ByteString
    getLookupUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(lookupUri_);
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    private void setLookupUriBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        lookupUri_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    private void clearLookupUri() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lookupUri_ = getDefaultInstance().getLookupUri();
    }

    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public boolean hasIsBusiness() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
    }

    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public boolean getIsBusiness() {
        return isBusiness_;
    }

    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    private void setIsBusiness(boolean value) {
        bitField0_ |= 0x00000020;
        isBusiness_ = value;
    }

    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    private void clearIsBusiness() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isBusiness_ = false;
    }

    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    public boolean hasIsVoicemail() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
    }

    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    public boolean getIsVoicemail() {
        return isVoicemail_;
    }

    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    private void setIsVoicemail(boolean value) {
        bitField0_ |= 0x00000040;
        isVoicemail_ = value;
    }

    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    private void clearIsVoicemail() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isVoicemail_ = false;
    }

    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    public boolean hasIsBlocked() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
    }

    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    public boolean getIsBlocked() {
        return isBlocked_;
    }

    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    private void setIsBlocked(boolean value) {
        bitField0_ |= 0x00000080;
        isBlocked_ = value;
    }

    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    private void clearIsBlocked() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isBlocked_ = false;
    }

    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    public boolean hasIsSpam() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
    }

    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    public boolean getIsSpam() {
        return isSpam_;
    }

    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    private void setIsSpam(boolean value) {
        bitField0_ |= 0x00000100;
        isSpam_ = value;
    }

    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    private void clearIsSpam() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isSpam_ = false;
    }

    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    public boolean hasIsVideo() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
    }

    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    public boolean getIsVideo() {
        return isVideo_;
    }

    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    private void setIsVideo(boolean value) {
        bitField0_ |= 0x00000200;
        isVideo_ = value;
    }

    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    private void clearIsVideo() {
        bitField0_ = (bitField0_ & ~0x00000200);
        isVideo_ = false;
    }

    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    public boolean hasIsRtt() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
    }

    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    public boolean getIsRtt() {
        return isRtt_;
    }

    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    private void setIsRtt(boolean value) {
        bitField0_ |= 0x00000400;
        isRtt_ = value;
    }

    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    private void clearIsRtt() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isRtt_ = false;
    }

    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    public boolean hasIsConference() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
    }

    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    public boolean getIsConference() {
        return isConference_;
    }

    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    private void setIsConference(boolean value) {
        bitField0_ |= 0x00000800;
        isConference_ = value;
    }

    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    private void clearIsConference() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isConference_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeString(1, getName());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeString(2, getFormattedNumber());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeString(3, getPhotoUri());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeInt64(4, photoId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeString(5, getLookupUri());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeBool(6, isBusiness_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
            output.writeBool(7, isVoicemail_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
            output.writeBool(8, isBlocked_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
            output.writeBool(9, isSpam_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
            output.writeBool(10, isVideo_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
            output.writeBool(11, isRtt_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
            output.writeBool(12, isConference_);
        }
        unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(1, getName());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(2, getFormattedNumber());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(3, getPhotoUri());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt64Size(4, photoId_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(5, getLookupUri());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(6, isBusiness_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(7, isVoicemail_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(8, isBlocked_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(9, isSpam_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(10, isVideo_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(11, isRtt_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(12, isConference_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
    }

    protected final Object dynamicMethod(
            com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new com.fissy.dialer.glidephotomanager.PhotoInfo();
            }
            case IS_INITIALIZED: {
                return DEFAULT_INSTANCE;
            }
            case MAKE_IMMUTABLE: {
                return null;
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case VISIT: {
                Visitor visitor = (Visitor) arg0;
                com.fissy.dialer.glidephotomanager.PhotoInfo other = (com.fissy.dialer.glidephotomanager.PhotoInfo) arg1;
                name_ = visitor.visitString(
                        hasName(), name_,
                        other.hasName(), other.name_);
                formattedNumber_ = visitor.visitString(
                        hasFormattedNumber(), formattedNumber_,
                        other.hasFormattedNumber(), other.formattedNumber_);
                photoUri_ = visitor.visitString(
                        hasPhotoUri(), photoUri_,
                        other.hasPhotoUri(), other.photoUri_);
                photoId_ = visitor.visitLong(
                        hasPhotoId(), photoId_,
                        other.hasPhotoId(), other.photoId_);
                lookupUri_ = visitor.visitString(
                        hasLookupUri(), lookupUri_,
                        other.hasLookupUri(), other.lookupUri_);
                isBusiness_ = visitor.visitBoolean(
                        hasIsBusiness(), isBusiness_,
                        other.hasIsBusiness(), other.isBusiness_);
                isVoicemail_ = visitor.visitBoolean(
                        hasIsVoicemail(), isVoicemail_,
                        other.hasIsVoicemail(), other.isVoicemail_);
                isBlocked_ = visitor.visitBoolean(
                        hasIsBlocked(), isBlocked_,
                        other.hasIsBlocked(), other.isBlocked_);
                isSpam_ = visitor.visitBoolean(
                        hasIsSpam(), isSpam_,
                        other.hasIsSpam(), other.isSpam_);
                isVideo_ = visitor.visitBoolean(
                        hasIsVideo(), isVideo_,
                        other.hasIsVideo(), other.isVideo_);
                isRtt_ = visitor.visitBoolean(
                        hasIsRtt(), isRtt_,
                        other.hasIsRtt(), other.isRtt_);
                isConference_ = visitor.visitBoolean(
                        hasIsConference(), isConference_,
                        other.hasIsConference(), other.isConference_);
                if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                        .INSTANCE) {
                    bitField0_ |= other.bitField0_;
                }
                return this;
            }
            case MERGE_FROM_STREAM: {
                com.google.protobuf.CodedInputStream input =
                        (com.google.protobuf.CodedInputStream) arg0;
                com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                        (com.google.protobuf.ExtensionRegistryLite) arg1;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(tag, input)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                String s = input.readString();
                                bitField0_ |= 0x00000001;
                                name_ = s;
                                break;
                            }
                            case 18: {
                                String s = input.readString();
                                bitField0_ |= 0x00000002;
                                formattedNumber_ = s;
                                break;
                            }
                            case 26: {
                                String s = input.readString();
                                bitField0_ |= 0x00000004;
                                photoUri_ = s;
                                break;
                            }
                            case 32: {
                                bitField0_ |= 0x00000008;
                                photoId_ = input.readInt64();
                                break;
                            }
                            case 42: {
                                String s = input.readString();
                                bitField0_ |= 0x00000010;
                                lookupUri_ = s;
                                break;
                            }
                            case 48: {
                                bitField0_ |= 0x00000020;
                                isBusiness_ = input.readBool();
                                break;
                            }
                            case 56: {
                                bitField0_ |= 0x00000040;
                                isVoicemail_ = input.readBool();
                                break;
                            }
                            case 64: {
                                bitField0_ |= 0x00000080;
                                isBlocked_ = input.readBool();
                                break;
                            }
                            case 72: {
                                bitField0_ |= 0x00000100;
                                isSpam_ = input.readBool();
                                break;
                            }
                            case 80: {
                                bitField0_ |= 0x00000200;
                                isVideo_ = input.readBool();
                                break;
                            }
                            case 88: {
                                bitField0_ |= 0x00000400;
                                isRtt_ = input.readBool();
                                break;
                            }
                            case 96: {
                                bitField0_ |= 0x00000800;
                                isConference_ = input.readBool();
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw new RuntimeException(e.setUnfinishedMessage(this));
                } catch (java.io.IOException e) {
                    throw new RuntimeException(
                            new com.google.protobuf.InvalidProtocolBufferException(
                                    e.getMessage()).setUnfinishedMessage(this));
                }
            }
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                if (PARSER == null) {
                    synchronized (com.fissy.dialer.glidephotomanager.PhotoInfo.class) {
                        if (PARSER == null) {
                            PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                        }
                    }
                }
                return PARSER;
            }
        }
        throw new UnsupportedOperationException();
    }

    /**
     * <pre>
     * Contains information associated with a number, which is used to create the
     * photo.
     * Next ID: 13
     * </pre>
     * <p>
     * Protobuf type {@code com.fissy.dialer.glidephotomanager.PhotoInfo}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageLite.Builder<
                    com.fissy.dialer.glidephotomanager.PhotoInfo, Builder> implements
            // @@protoc_insertion_point(builder_implements:com.fissy.dialer.glidephotomanager.PhotoInfo)
            com.fissy.dialer.glidephotomanager.PhotoInfoOrBuilder {
        // Construct using com.fissy.dialer.glidephotomanager.PhotoInfo.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The display name of the number.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public boolean hasName() {
            return instance.hasName();
        }

        /**
         * <pre>
         * The display name of the number.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public java.lang.String getName() {
            return instance.getName();
        }

        /**
         * <pre>
         * The display name of the number.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setName(
                java.lang.String value) {
            copyOnWrite();
            instance.setName(value);
            return this;
        }

        /**
         * <pre>
         * The display name of the number.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public com.google.protobuf.ByteString
        getNameBytes() {
            return instance.getNameBytes();
        }

        /**
         * <pre>
         * The display name of the number.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setNameBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setNameBytes(value);
            return this;
        }

        /**
         * <pre>
         * The display name of the number.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder clearName() {
            copyOnWrite();
            instance.clearName();
            return this;
        }

        /**
         * <pre>
         * The number presented to the user.
         * </pre>
         *
         * <code>optional string formatted_number = 2;</code>
         */
        public boolean hasFormattedNumber() {
            return instance.hasFormattedNumber();
        }

        /**
         * <pre>
         * The number presented to the user.
         * </pre>
         *
         * <code>optional string formatted_number = 2;</code>
         */
        public java.lang.String getFormattedNumber() {
            return instance.getFormattedNumber();
        }

        /**
         * <pre>
         * The number presented to the user.
         * </pre>
         *
         * <code>optional string formatted_number = 2;</code>
         */
        public Builder setFormattedNumber(
                java.lang.String value) {
            copyOnWrite();
            instance.setFormattedNumber(value);
            return this;
        }

        /**
         * <pre>
         * The number presented to the user.
         * </pre>
         *
         * <code>optional string formatted_number = 2;</code>
         */
        public com.google.protobuf.ByteString
        getFormattedNumberBytes() {
            return instance.getFormattedNumberBytes();
        }

        /**
         * <pre>
         * The number presented to the user.
         * </pre>
         *
         * <code>optional string formatted_number = 2;</code>
         */
        public Builder setFormattedNumberBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setFormattedNumberBytes(value);
            return this;
        }

        /**
         * <pre>
         * The number presented to the user.
         * </pre>
         *
         * <code>optional string formatted_number = 2;</code>
         */
        public Builder clearFormattedNumber() {
            copyOnWrite();
            instance.clearFormattedNumber();
            return this;
        }

        /**
         * <pre>
         * The URI of the photo.
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public boolean hasPhotoUri() {
            return instance.hasPhotoUri();
        }

        /**
         * <pre>
         * The URI of the photo.
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public java.lang.String getPhotoUri() {
            return instance.getPhotoUri();
        }

        /**
         * <pre>
         * The URI of the photo.
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public Builder setPhotoUri(
                java.lang.String value) {
            copyOnWrite();
            instance.setPhotoUri(value);
            return this;
        }

        /**
         * <pre>
         * The URI of the photo.
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public com.google.protobuf.ByteString
        getPhotoUriBytes() {
            return instance.getPhotoUriBytes();
        }

        /**
         * <pre>
         * The URI of the photo.
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public Builder setPhotoUriBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setPhotoUriBytes(value);
            return this;
        }

        /**
         * <pre>
         * The URI of the photo.
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public Builder clearPhotoUri() {
            copyOnWrite();
            instance.clearPhotoUri();
            return this;
        }

        /**
         * <pre>
         * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
         * </pre>
         *
         * <code>optional int64 photo_id = 4;</code>
         */
        public boolean hasPhotoId() {
            return instance.hasPhotoId();
        }

        /**
         * <pre>
         * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
         * </pre>
         *
         * <code>optional int64 photo_id = 4;</code>
         */
        public long getPhotoId() {
            return instance.getPhotoId();
        }

        /**
         * <pre>
         * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
         * </pre>
         *
         * <code>optional int64 photo_id = 4;</code>
         */
        public Builder setPhotoId(long value) {
            copyOnWrite();
            instance.setPhotoId(value);
            return this;
        }

        /**
         * <pre>
         * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
         * </pre>
         *
         * <code>optional int64 photo_id = 4;</code>
         */
        public Builder clearPhotoId() {
            copyOnWrite();
            instance.clearPhotoId();
            return this;
        }

        /**
         * <pre>
         * The Contacts Provider lookup URI for the contact associated with the
         * number.
         * </pre>
         *
         * <code>optional string lookup_uri = 5;</code>
         */
        public boolean hasLookupUri() {
            return instance.hasLookupUri();
        }

        /**
         * <pre>
         * The Contacts Provider lookup URI for the contact associated with the
         * number.
         * </pre>
         *
         * <code>optional string lookup_uri = 5;</code>
         */
        public java.lang.String getLookupUri() {
            return instance.getLookupUri();
        }

        /**
         * <pre>
         * The Contacts Provider lookup URI for the contact associated with the
         * number.
         * </pre>
         *
         * <code>optional string lookup_uri = 5;</code>
         */
        public Builder setLookupUri(
                java.lang.String value) {
            copyOnWrite();
            instance.setLookupUri(value);
            return this;
        }

        /**
         * <pre>
         * The Contacts Provider lookup URI for the contact associated with the
         * number.
         * </pre>
         *
         * <code>optional string lookup_uri = 5;</code>
         */
        public com.google.protobuf.ByteString
        getLookupUriBytes() {
            return instance.getLookupUriBytes();
        }

        /**
         * <pre>
         * The Contacts Provider lookup URI for the contact associated with the
         * number.
         * </pre>
         *
         * <code>optional string lookup_uri = 5;</code>
         */
        public Builder setLookupUriBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setLookupUriBytes(value);
            return this;
        }

        /**
         * <pre>
         * The Contacts Provider lookup URI for the contact associated with the
         * number.
         * </pre>
         *
         * <code>optional string lookup_uri = 5;</code>
         */
        public Builder clearLookupUri() {
            copyOnWrite();
            instance.clearLookupUri();
            return this;
        }

        /**
         * <pre>
         * Whether a business icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public boolean hasIsBusiness() {
            return instance.hasIsBusiness();
        }

        /**
         * <pre>
         * Whether a business icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public boolean getIsBusiness() {
            return instance.getIsBusiness();
        }

        /**
         * <pre>
         * Whether a business icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public Builder setIsBusiness(boolean value) {
            copyOnWrite();
            instance.setIsBusiness(value);
            return this;
        }

        /**
         * <pre>
         * Whether a business icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_business = 6;</code>
         */
        public Builder clearIsBusiness() {
            copyOnWrite();
            instance.clearIsBusiness();
            return this;
        }

        /**
         * <pre>
         * Whether a voicemail icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_voicemail = 7;</code>
         */
        public boolean hasIsVoicemail() {
            return instance.hasIsVoicemail();
        }

        /**
         * <pre>
         * Whether a voicemail icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_voicemail = 7;</code>
         */
        public boolean getIsVoicemail() {
            return instance.getIsVoicemail();
        }

        /**
         * <pre>
         * Whether a voicemail icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_voicemail = 7;</code>
         */
        public Builder setIsVoicemail(boolean value) {
            copyOnWrite();
            instance.setIsVoicemail(value);
            return this;
        }

        /**
         * <pre>
         * Whether a voicemail icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_voicemail = 7;</code>
         */
        public Builder clearIsVoicemail() {
            copyOnWrite();
            instance.clearIsVoicemail();
            return this;
        }

        /**
         * <pre>
         * Whether a "blocked" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_blocked = 8;</code>
         */
        public boolean hasIsBlocked() {
            return instance.hasIsBlocked();
        }

        /**
         * <pre>
         * Whether a "blocked" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_blocked = 8;</code>
         */
        public boolean getIsBlocked() {
            return instance.getIsBlocked();
        }

        /**
         * <pre>
         * Whether a "blocked" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_blocked = 8;</code>
         */
        public Builder setIsBlocked(boolean value) {
            copyOnWrite();
            instance.setIsBlocked(value);
            return this;
        }

        /**
         * <pre>
         * Whether a "blocked" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_blocked = 8;</code>
         */
        public Builder clearIsBlocked() {
            copyOnWrite();
            instance.clearIsBlocked();
            return this;
        }

        /**
         * <pre>
         * Whether a "spam" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_spam = 9;</code>
         */
        public boolean hasIsSpam() {
            return instance.hasIsSpam();
        }

        /**
         * <pre>
         * Whether a "spam" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_spam = 9;</code>
         */
        public boolean getIsSpam() {
            return instance.getIsSpam();
        }

        /**
         * <pre>
         * Whether a "spam" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_spam = 9;</code>
         */
        public Builder setIsSpam(boolean value) {
            copyOnWrite();
            instance.setIsSpam(value);
            return this;
        }

        /**
         * <pre>
         * Whether a "spam" icon should be displayed.
         * </pre>
         *
         * <code>optional bool is_spam = 9;</code>
         */
        public Builder clearIsSpam() {
            copyOnWrite();
            instance.clearIsSpam();
            return this;
        }

        /**
         * <pre>
         * Whether the photo should be badged as video call.
         * </pre>
         *
         * <code>optional bool is_video = 10;</code>
         */
        public boolean hasIsVideo() {
            return instance.hasIsVideo();
        }

        /**
         * <pre>
         * Whether the photo should be badged as video call.
         * </pre>
         *
         * <code>optional bool is_video = 10;</code>
         */
        public boolean getIsVideo() {
            return instance.getIsVideo();
        }

        /**
         * <pre>
         * Whether the photo should be badged as video call.
         * </pre>
         *
         * <code>optional bool is_video = 10;</code>
         */
        public Builder setIsVideo(boolean value) {
            copyOnWrite();
            instance.setIsVideo(value);
            return this;
        }

        /**
         * <pre>
         * Whether the photo should be badged as video call.
         * </pre>
         *
         * <code>optional bool is_video = 10;</code>
         */
        public Builder clearIsVideo() {
            copyOnWrite();
            instance.clearIsVideo();
            return this;
        }

        /**
         * <pre>
         * Whether the photo should be badged as RTT call.
         * </pre>
         *
         * <code>optional bool is_rtt = 11;</code>
         */
        public boolean hasIsRtt() {
            return instance.hasIsRtt();
        }

        /**
         * <pre>
         * Whether the photo should be badged as RTT call.
         * </pre>
         *
         * <code>optional bool is_rtt = 11;</code>
         */
        public boolean getIsRtt() {
            return instance.getIsRtt();
        }

        /**
         * <pre>
         * Whether the photo should be badged as RTT call.
         * </pre>
         *
         * <code>optional bool is_rtt = 11;</code>
         */
        public Builder setIsRtt(boolean value) {
            copyOnWrite();
            instance.setIsRtt(value);
            return this;
        }

        /**
         * <pre>
         * Whether the photo should be badged as RTT call.
         * </pre>
         *
         * <code>optional bool is_rtt = 11;</code>
         */
        public Builder clearIsRtt() {
            copyOnWrite();
            instance.clearIsRtt();
            return this;
        }

        /**
         * <pre>
         * Whether to show conference call icon instead of contact icon.
         * </pre>
         *
         * <code>optional bool is_conference = 12;</code>
         */
        public boolean hasIsConference() {
            return instance.hasIsConference();
        }

        /**
         * <pre>
         * Whether to show conference call icon instead of contact icon.
         * </pre>
         *
         * <code>optional bool is_conference = 12;</code>
         */
        public boolean getIsConference() {
            return instance.getIsConference();
        }

        /**
         * <pre>
         * Whether to show conference call icon instead of contact icon.
         * </pre>
         *
         * <code>optional bool is_conference = 12;</code>
         */
        public Builder setIsConference(boolean value) {
            copyOnWrite();
            instance.setIsConference(value);
            return this;
        }

        /**
         * <pre>
         * Whether to show conference call icon instead of contact icon.
         * </pre>
         *
         * <code>optional bool is_conference = 12;</code>
         */
        public Builder clearIsConference() {
            copyOnWrite();
            instance.clearIsConference();
            return this;
        }

        // @@protoc_insertion_point(builder_scope:com.fissy.dialer.glidephotomanager.PhotoInfo)
    }
}

