// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/blockreportspam/block_report_spam_dialog_info.proto

package com.fissy.dialer.blockreportspam;

/**
 * <pre>
 * Contains information needed in dialogs that allow a user to block a number
 * and/or report it as spam/not spam.
 * Next ID: 6
 * </pre>
 *
 * Protobuf type {@code com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo}
 */
public  final class BlockReportSpamDialogInfo extends
    com.google.protobuf.GeneratedMessageLite<
        BlockReportSpamDialogInfo, BlockReportSpamDialogInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo)
    BlockReportSpamDialogInfoOrBuilder {
  private BlockReportSpamDialogInfo() {
    normalizedNumber_ = "";
    countryIso_ = "";
    callType_ = 0;
    reportingLocation_ = 0;
    contactSource_ = 0;
  }
  private int bitField0_;
  public static final int NORMALIZED_NUMBER_FIELD_NUMBER = 1;
  private java.lang.String normalizedNumber_;
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  public boolean hasNormalizedNumber() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  public java.lang.String getNormalizedNumber() {
    return normalizedNumber_;
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  public com.google.protobuf.ByteString
      getNormalizedNumberBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(normalizedNumber_);
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void setNormalizedNumber(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    normalizedNumber_ = value;
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void clearNormalizedNumber() {
    bitField0_ = (bitField0_ & ~0x00000001);
    normalizedNumber_ = getDefaultInstance().getNormalizedNumber();
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void setNormalizedNumberBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    normalizedNumber_ = value.toStringUtf8();
  }

  public static final int COUNTRY_ISO_FIELD_NUMBER = 2;
  private java.lang.String countryIso_;
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  public boolean hasCountryIso() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  public java.lang.String getCountryIso() {
    return countryIso_;
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  public com.google.protobuf.ByteString
      getCountryIsoBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(countryIso_);
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void setCountryIso(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    countryIso_ = value;
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void clearCountryIso() {
    bitField0_ = (bitField0_ & ~0x00000002);
    countryIso_ = getDefaultInstance().getCountryIso();
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void setCountryIsoBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    countryIso_ = value.toStringUtf8();
  }

  public static final int CALL_TYPE_FIELD_NUMBER = 3;
  private int callType_;
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  public boolean hasCallType() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  public int getCallType() {
    return callType_;
  }
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  private void setCallType(int value) {
    bitField0_ |= 0x00000004;
    callType_ = value;
  }
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  private void clearCallType() {
    bitField0_ = (bitField0_ & ~0x00000004);
    callType_ = 0;
  }

  public static final int REPORTING_LOCATION_FIELD_NUMBER = 4;
  private int reportingLocation_;
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  public boolean hasReportingLocation() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  public com.fissy.dialer.logging.ReportingLocation.Type getReportingLocation() {
    com.fissy.dialer.logging.ReportingLocation.Type result = com.fissy.dialer.logging.ReportingLocation.Type.forNumber(reportingLocation_);
    return result == null ? com.fissy.dialer.logging.ReportingLocation.Type.UNKNOWN_REPORTING_LOCATION : result;
  }
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  private void setReportingLocation(com.fissy.dialer.logging.ReportingLocation.Type value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000008;
    reportingLocation_ = value.getNumber();
  }
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  private void clearReportingLocation() {
    bitField0_ = (bitField0_ & ~0x00000008);
    reportingLocation_ = 0;
  }

  public static final int CONTACT_SOURCE_FIELD_NUMBER = 5;
  private int contactSource_;
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  public boolean hasContactSource() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  public com.fissy.dialer.logging.ContactSource.Type getContactSource() {
    com.fissy.dialer.logging.ContactSource.Type result = com.fissy.dialer.logging.ContactSource.Type.forNumber(contactSource_);
    return result == null ? com.fissy.dialer.logging.ContactSource.Type.UNKNOWN_SOURCE_TYPE : result;
  }
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  private void setContactSource(com.fissy.dialer.logging.ContactSource.Type value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000010;
    contactSource_ = value.getNumber();
  }
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  private void clearContactSource() {
    bitField0_ = (bitField0_ & ~0x00000010);
    contactSource_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getNormalizedNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getCountryIso());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, callType_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeEnum(4, reportingLocation_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeEnum(5, contactSource_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getNormalizedNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getCountryIso());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, callType_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, reportingLocation_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, contactSource_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Contains information needed in dialogs that allow a user to block a number
   * and/or report it as spam/not spam.
   * Next ID: 6
   * </pre>
   *
   * Protobuf type {@code com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo)
      com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfoOrBuilder {
    // Construct using com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public boolean hasNormalizedNumber() {
      return instance.hasNormalizedNumber();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public java.lang.String getNormalizedNumber() {
      return instance.getNormalizedNumber();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNormalizedNumberBytes() {
      return instance.getNormalizedNumberBytes();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder setNormalizedNumber(
        java.lang.String value) {
      copyOnWrite();
      instance.setNormalizedNumber(value);
      return this;
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder clearNormalizedNumber() {
      copyOnWrite();
      instance.clearNormalizedNumber();
      return this;
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder setNormalizedNumberBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNormalizedNumberBytes(value);
      return this;
    }

    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public boolean hasCountryIso() {
      return instance.hasCountryIso();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public java.lang.String getCountryIso() {
      return instance.getCountryIso();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCountryIsoBytes() {
      return instance.getCountryIsoBytes();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder setCountryIso(
        java.lang.String value) {
      copyOnWrite();
      instance.setCountryIso(value);
      return this;
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder clearCountryIso() {
      copyOnWrite();
      instance.clearCountryIso();
      return this;
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder setCountryIsoBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCountryIsoBytes(value);
      return this;
    }

    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    public boolean hasCallType() {
      return instance.hasCallType();
    }
    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    public int getCallType() {
      return instance.getCallType();
    }
    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    public Builder setCallType(int value) {
      copyOnWrite();
      instance.setCallType(value);
      return this;
    }
    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    public Builder clearCallType() {
      copyOnWrite();
      instance.clearCallType();
      return this;
    }

    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    public boolean hasReportingLocation() {
      return instance.hasReportingLocation();
    }
    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    public com.fissy.dialer.logging.ReportingLocation.Type getReportingLocation() {
      return instance.getReportingLocation();
    }
    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    public Builder setReportingLocation(com.fissy.dialer.logging.ReportingLocation.Type value) {
      copyOnWrite();
      instance.setReportingLocation(value);
      return this;
    }
    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    public Builder clearReportingLocation() {
      copyOnWrite();
      instance.clearReportingLocation();
      return this;
    }

    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    public boolean hasContactSource() {
      return instance.hasContactSource();
    }
    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    public com.fissy.dialer.logging.ContactSource.Type getContactSource() {
      return instance.getContactSource();
    }
    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    public Builder setContactSource(com.fissy.dialer.logging.ContactSource.Type value) {
      copyOnWrite();
      instance.setContactSource(value);
      return this;
    }
    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.fissy.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    public Builder clearContactSource() {
      copyOnWrite();
      instance.clearContactSource();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo other = (com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo) arg1;
        normalizedNumber_ = visitor.visitString(
            hasNormalizedNumber(), normalizedNumber_,
            other.hasNormalizedNumber(), other.normalizedNumber_);
        countryIso_ = visitor.visitString(
            hasCountryIso(), countryIso_,
            other.hasCountryIso(), other.countryIso_);
        callType_ = visitor.visitInt(
            hasCallType(), callType_,
            other.hasCallType(), other.callType_);
        reportingLocation_ = visitor.visitInt(hasReportingLocation(), reportingLocation_,
            other.hasReportingLocation(), other.reportingLocation_);
        contactSource_ = visitor.visitInt(hasContactSource(), contactSource_,
            other.hasContactSource(), other.contactSource_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                normalizedNumber_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                countryIso_ = s;
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                callType_ = input.readInt32();
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                com.fissy.dialer.logging.ReportingLocation.Type value = com.fissy.dialer.logging.ReportingLocation.Type.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  reportingLocation_ = rawValue;
                }
                break;
              }
              case 40: {
                int rawValue = input.readEnum();
                com.fissy.dialer.logging.ContactSource.Type value = com.fissy.dialer.logging.ContactSource.Type.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(5, rawValue);
                } else {
                  bitField0_ |= 0x00000010;
                  contactSource_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo)
  private static final com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new BlockReportSpamDialogInfo();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.fissy.dialer.blockreportspam.BlockReportSpamDialogInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<BlockReportSpamDialogInfo> PARSER;

  public static com.google.protobuf.Parser<BlockReportSpamDialogInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

