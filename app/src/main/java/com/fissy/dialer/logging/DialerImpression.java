// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/fissy/dialer/logging/dialer_impression.proto

package com.fissy.dialer.logging;

/**
 * Protobuf type {@code com.fissy.dialer.logging.DialerImpression}
 */
public final class DialerImpression extends
        com.google.protobuf.GeneratedMessageLite<
                DialerImpression, DialerImpression.Builder> implements
        // @@protoc_insertion_point(message_implements:com.fissy.dialer.logging.DialerImpression)
        DialerImpressionOrBuilder {
    // @@protoc_insertion_point(class_scope:com.fissy.dialer.logging.DialerImpression)
    private static final com.fissy.dialer.logging.DialerImpression DEFAULT_INSTANCE;
    private static volatile com.google.protobuf.Parser<DialerImpression> PARSER;

    static {
        DEFAULT_INSTANCE = new DialerImpression();
        DEFAULT_INSTANCE.makeImmutable();
    }

    private DialerImpression() {
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.logging.DialerImpression parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.logging.DialerImpression parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.logging.DialerImpression parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.fissy.dialer.logging.DialerImpression prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static com.fissy.dialer.logging.DialerImpression getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<DialerImpression> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
    }

    protected final Object dynamicMethod(
            com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new com.fissy.dialer.logging.DialerImpression();
            }
            case IS_INITIALIZED: {
                return DEFAULT_INSTANCE;
            }
            case MAKE_IMMUTABLE: {
                return null;
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case VISIT: {
                Visitor visitor = (Visitor) arg0;
                com.fissy.dialer.logging.DialerImpression other = (com.fissy.dialer.logging.DialerImpression) arg1;
                if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                        .INSTANCE) {
                }
                return this;
            }
            case MERGE_FROM_STREAM: {
                com.google.protobuf.CodedInputStream input =
                        (com.google.protobuf.CodedInputStream) arg0;
                com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                        (com.google.protobuf.ExtensionRegistryLite) arg1;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(tag, input)) {
                                    done = true;
                                }
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw new RuntimeException(e.setUnfinishedMessage(this));
                } catch (java.io.IOException e) {
                    throw new RuntimeException(
                            new com.google.protobuf.InvalidProtocolBufferException(
                                    e.getMessage()).setUnfinishedMessage(this));
                } finally {
                }
            }
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                if (PARSER == null) {
                    synchronized (com.fissy.dialer.logging.DialerImpression.class) {
                        if (PARSER == null) {
                            PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                        }
                    }
                }
                return PARSER;
            }
        }
        throw new UnsupportedOperationException();
    }

    /**
     * <pre>
     * Event enums to be used for Impression Logging in Dialer.
     * It's perfectly acceptable for this enum to be large
     * Values should be from 1000 to 100000.
     * Next Tag: 1409
     * </pre>
     * <p>
     * Protobuf enum {@code com.fissy.dialer.logging.DialerImpression.Type}
     */
    public enum Type
            implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>UNKNOWN_AOSP_EVENT_TYPE = 1000;</code>
         */
        UNKNOWN_AOSP_EVENT_TYPE(1000),
        /**
         * <pre>
         * User opened the app
         * </pre>
         *
         * <code>APP_LAUNCHED = 1001;</code>
         */
        APP_LAUNCHED(1001),
        /**
         * <pre>
         * User pressed the speaker phone button
         * </pre>
         *
         * <code>IN_CALL_SCREEN_TURN_ON_SPEAKERPHONE = 1002;</code>
         */
        IN_CALL_SCREEN_TURN_ON_SPEAKERPHONE(1002),
        /**
         * <pre>
         * User pressed the speaker phone button again
         * </pre>
         *
         * <code>IN_CALL_SCREEN_TURN_ON_WIRED_OR_EARPIECE = 1003;</code>
         */
        IN_CALL_SCREEN_TURN_ON_WIRED_OR_EARPIECE(1003),
        /**
         * <pre>
         * Number not identified as spam and the user tapped the block/report spam
         * button in the call log
         * </pre>
         *
         * <code>CALL_LOG_BLOCK_REPORT_SPAM = 1004;</code>
         */
        CALL_LOG_BLOCK_REPORT_SPAM(1004),
        /**
         * <pre>
         * Number identified as spam and the user tapped on the block number call
         * log item
         * </pre>
         *
         * <code>CALL_LOG_BLOCK_NUMBER = 1005;</code>
         */
        CALL_LOG_BLOCK_NUMBER(1005),
        /**
         * <pre>
         * User tapped on the unblock number in the call log
         * This does not deal with whether the user reported this spam or not while
         * initially blocking For that refer to
         * REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER. If the user had not reported it as
         * spam they then have the option of directly unblocking the number, a
         * success of which is logged in USER_ACTION_UNBLOCKED_NUMBER
         * </pre>
         *
         * <code>CALL_LOG_UNBLOCK_NUMBER = 1006;</code>
         */
        CALL_LOG_UNBLOCK_NUMBER(1006),
        /**
         * <pre>
         * Number was identified as spam, and the user tapped that it was not spam
         * </pre>
         *
         * <code>CALL_LOG_REPORT_AS_NOT_SPAM = 1007;</code>
         */
        CALL_LOG_REPORT_AS_NOT_SPAM(1007),
        /**
         * <pre>
         * Confirmation dialog in which the user confirmed that the number was not
         * spam
         * </pre>
         *
         * <code>DIALOG_ACTION_CONFIRM_NUMBER_NOT_SPAM = 1008;</code>
         */
        DIALOG_ACTION_CONFIRM_NUMBER_NOT_SPAM(1008),
        /**
         * <pre>
         * User unblocked a number and also acknowledged that the number is not spam
         * This happens when the user had initially blocked a number and also
         * claimed the number was spam and had now proceeded to undo that.
         * </pre>
         *
         * <code>REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER = 1009;</code>
         */
        REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER(1009),
        /**
         * <pre>
         * A number that was identified as spam and the user proceeded to block it.
         * However this impression was to make sure that while blocking the number
         * the user also acknowledged that they were going to be reporting this as
         * spam. There is no option for the user in this case to not report it as
         * spam and block it only. The only flow is: system identified number as
         * spam -&gt; user wants to block it -&gt; confirmation dialog shows up asking
         * user to acknowledge they want to block and report as spam -&gt; user
         * acknowledges and this is when this impression is sent
         * </pre>
         *
         * <code>DIALOG_ACTION_CONFIRM_NUMBER_SPAM_INDIRECTLY_VIA_BLOCK_NUMBER = 1010;</code>
         */
        DIALOG_ACTION_CONFIRM_NUMBER_SPAM_INDIRECTLY_VIA_BLOCK_NUMBER(1010),
        /**
         * <pre>
         * User reported the number as spam by tick marking on report spam when
         * blocking the number via call log. This is for case where the user wants
         * to block a number and also report it as spam
         * </pre>
         *
         * <code>REPORT_CALL_AS_SPAM_VIA_CALL_LOG_BLOCK_REPORT_SPAM_SENT_VIA_BLOCK_NUMBER_DIALOG = 1011;</code>
         */
        REPORT_CALL_AS_SPAM_VIA_CALL_LOG_BLOCK_REPORT_SPAM_SENT_VIA_BLOCK_NUMBER_DIALOG(1011),
        /**
         * <pre>
         * User made it to the last step and actually blocked the number
         * </pre>
         *
         * <code>USER_ACTION_BLOCKED_NUMBER = 1012;</code>
         */
        USER_ACTION_BLOCKED_NUMBER(1012),
        /**
         * <pre>
         * User made it to the last step but blocking failed because user is
         * secondary or dialer is not default
         * </pre>
         *
         * <code>USER_ACTION_BLOCK_NUMBER_FAILED = 1369;</code>
         */
        USER_ACTION_BLOCK_NUMBER_FAILED(1369),
        /**
         * <pre>
         * User made it to the last step and actually unblocked the number
         * </pre>
         *
         * <code>USER_ACTION_UNBLOCKED_NUMBER = 1013;</code>
         */
        USER_ACTION_UNBLOCKED_NUMBER(1013),
        /**
         * <pre>
         * User made it to the last step but unblocking failed because user is
         * secondary or dialer is not default
         * </pre>
         *
         * <code>USER_ACTION_UNBLOCK_NUMBER_FAILED = 1370;</code>
         */
        USER_ACTION_UNBLOCK_NUMBER_FAILED(1370),
        /**
         * <pre>
         * User blocked a number, does not guarantee if the number was reported as
         * spam or not To compute the number of blocked numbers that were reported
         * as not spam and yet blocked Subtract this value from
         * SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM. It would be
         * interesting to see how this value compares with
         * SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_BLOCK_NUMBER = 1014;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_BLOCK_NUMBER(1014),
        /**
         * <pre>
         * Displays the dialog for first time spam calls with actions "Not spam",
         * "Block", and "Dismiss".
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_SHOW_SPAM_DIALOG = 1015;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_SHOW_SPAM_DIALOG(1015),
        /**
         * <pre>
         * Displays the dialog for the first time unknown calls with actions "Add
         * contact", "Block/report spam", and "Dismiss".
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_SHOW_NON_SPAM_DIALOG = 1016;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_SHOW_NON_SPAM_DIALOG(1016),
        /**
         * <pre>
         * User added the number to contacts from the after call notification
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_ADD_TO_CONTACTS = 1019;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_ADD_TO_CONTACTS(1019),
        /**
         * <pre>
         * User marked the number as spam on the after call notification flow
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM = 1020;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM(1020),
        /**
         * <code>SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_NOT_SPAM_AND_BLOCKED = 1021;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_NOT_SPAM_AND_BLOCKED(1021),
        /**
         * <pre>
         * User reported the number as not spam
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM = 1022;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM(1022),
        /**
         * <pre>
         * User dismissed the spam notification
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_SPAM_DIALOG = 1024;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_SPAM_DIALOG(1024),
        /**
         * <pre>
         * User dismissed the non spam notification
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_NON_SPAM_DIALOG = 1025;</code>
         */
        SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_NON_SPAM_DIALOG(1025),
        /**
         * <pre>
         * From the service instead of an activity logs the number of times the
         * number was marked as Spam by the user (e.g from the feedback prompt)
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_SPAM = 1026;</code>
         */
        SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_SPAM(1026),
        /**
         * <pre>
         * From the service instead of an activity logs the number of times the
         * number was marked as Not Spam by the user (e.g from the feedback prompt)
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_NOT_SPAM = 1027;</code>
         */
        SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_NOT_SPAM(1027),
        /**
         * <pre>
         * User is in a active call i.e either incoming or outgoing
         * This is mainly so we can assign an impression event to a call event i.e
         * so that we may be able to stitch different types of events if they make
         * sense e.g user pressed a speaker button and we want to associate that to
         * a call event
         * </pre>
         *
         * <code>USER_PARTICIPATED_IN_A_CALL = 1028;</code>
         */
        USER_PARTICIPATED_IN_A_CALL(1028),
        /**
         * <pre>
         * Incoming call is a spam call
         * </pre>
         *
         * <code>INCOMING_SPAM_CALL = 1029;</code>
         */
        INCOMING_SPAM_CALL(1029),
        /**
         * <pre>
         * Incoming call is a non spam call
         * </pre>
         *
         * <code>INCOMING_NON_SPAM_CALL = 1030;</code>
         */
        INCOMING_NON_SPAM_CALL(1030),
        /**
         * <pre>
         * Spam notifications shown despite throttling
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE = 1041;</code>
         */
        SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE(1041),
        /**
         * <pre>
         * Spam notifications not shown due to throttling
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE = 1042;</code>
         */
        SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE(1042),
        /**
         * <pre>
         * Non spam notifications shown despite throttling
         * </pre>
         *
         * <code>NON_SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE = 1043;</code>
         */
        NON_SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE(1043),
        /**
         * <pre>
         * Non spam notifications not shown due to throttling
         * </pre>
         *
         * <code>NON_SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE = 1044;</code>
         */
        NON_SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE(1044),
        /**
         * <pre>
         * Voicemail status has updated in the voicemail tab and the change PIN
         * prompt is shown.
         * </pre>
         *
         * <code>VOICEMAIL_ALERT_SET_PIN_SHOWN = 1045;</code>
         */
        VOICEMAIL_ALERT_SET_PIN_SHOWN(1045),
        /**
         * <pre>
         * User has clicked the change PIN action in the voicemail tab
         * </pre>
         *
         * <code>VOICEMAIL_ALERT_SET_PIN_CLICKED = 1046;</code>
         */
        VOICEMAIL_ALERT_SET_PIN_CLICKED(1046),
        /**
         * <pre>
         * User was not able to or did not participate in the call e.g missed calls,
         * rejected calls
         * </pre>
         *
         * <code>USER_DID_NOT_PARTICIPATE_IN_CALL = 1047;</code>
         */
        USER_DID_NOT_PARTICIPATE_IN_CALL(1047),
        /**
         * <pre>
         * User deleted a call log entry
         * </pre>
         *
         * <code>USER_DELETED_CALL_LOG_ITEM = 1048;</code>
         */
        USER_DELETED_CALL_LOG_ITEM(1048),
        /**
         * <pre>
         * User tapped on "Send a message"
         * </pre>
         *
         * <code>CALL_LOG_SEND_MESSAGE = 1049;</code>
         */
        CALL_LOG_SEND_MESSAGE(1049),
        /**
         * <pre>
         * User tapped on "Add to contact"
         * </pre>
         *
         * <code>CALL_LOG_ADD_TO_CONTACT = 1050;</code>
         */
        CALL_LOG_ADD_TO_CONTACT(1050),
        /**
         * <pre>
         * User tapped on "Create new contact"
         * </pre>
         *
         * <code>CALL_LOG_CREATE_NEW_CONTACT = 1051;</code>
         */
        CALL_LOG_CREATE_NEW_CONTACT(1051),
        /**
         * <pre>
         * User deleted an entry from the voicemail tab
         * </pre>
         *
         * <code>VOICEMAIL_DELETE_ENTRY = 1052;</code>
         */
        VOICEMAIL_DELETE_ENTRY(1052),
        /**
         * <pre>
         * Voicemail call log entry was expanded. Could be either if the user tapped
         * the voicemail call log entry or pressed the play button when the
         * voicemail call log entry was not expanded
         * </pre>
         *
         * <code>VOICEMAIL_EXPAND_ENTRY = 1053;</code>
         */
        VOICEMAIL_EXPAND_ENTRY(1053),
        /**
         * <pre>
         * The play button for voicemail call log entry was tapped directly (i.e
         * when the voicemail call log entry was not expanded and the playbutton was
         * tapped)
         * </pre>
         *
         * <code>VOICEMAIL_PLAY_AUDIO_DIRECTLY = 1054;</code>
         */
        VOICEMAIL_PLAY_AUDIO_DIRECTLY(1054),
        /**
         * <pre>
         * The play button after expanding the voicemail call log entry was tapped
         * </pre>
         *
         * <code>VOICEMAIL_PLAY_AUDIO_AFTER_EXPANDING_ENTRY = 1055;</code>
         */
        VOICEMAIL_PLAY_AUDIO_AFTER_EXPANDING_ENTRY(1055),
        /**
         * <pre>
         * Incoming call was rejected from the notifications
         * </pre>
         *
         * <code>REJECT_INCOMING_CALL_FROM_NOTIFICATION = 1056;</code>
         */
        REJECT_INCOMING_CALL_FROM_NOTIFICATION(1056),
        /**
         * <pre>
         * Incoming call was rejected from the answer screen including rejecting via
         * sms and talkback
         * </pre>
         *
         * <code>REJECT_INCOMING_CALL_FROM_ANSWER_SCREEN = 1057;</code>
         */
        REJECT_INCOMING_CALL_FROM_ANSWER_SCREEN(1057),
        /**
         * <pre>
         * User tapped block and spam buttons in context menu, same as buttons in
         * call log drop down
         * menu (See 1004-1007).
         * </pre>
         *
         * <code>CALL_LOG_CONTEXT_MENU_BLOCK_REPORT_SPAM = 1058;</code>
         */
        CALL_LOG_CONTEXT_MENU_BLOCK_REPORT_SPAM(1058),
        /**
         * <code>CALL_LOG_CONTEXT_MENU_BLOCK_NUMBER = 1059;</code>
         */
        CALL_LOG_CONTEXT_MENU_BLOCK_NUMBER(1059),
        /**
         * <code>CALL_LOG_CONTEXT_MENU_UNBLOCK_NUMBER = 1060;</code>
         */
        CALL_LOG_CONTEXT_MENU_UNBLOCK_NUMBER(1060),
        /**
         * <code>CALL_LOG_CONTEXT_MENU_REPORT_AS_NOT_SPAM = 1061;</code>
         */
        CALL_LOG_CONTEXT_MENU_REPORT_AS_NOT_SPAM(1061),
        /**
         * <code>NEW_CONTACT_OVERFLOW = 1062;</code>
         */
        NEW_CONTACT_OVERFLOW(1062),
        /**
         * <code>NEW_CONTACT_FAB = 1063;</code>
         */
        NEW_CONTACT_FAB(1063),
        /**
         * <pre>
         * The ToS is shown the user
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_SHOWN = 1064;</code>
         */
        VOICEMAIL_VVM3_TOS_SHOWN(1064),
        /**
         * <pre>
         * The user has accepted the ToS
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_ACCEPTED = 1065;</code>
         */
        VOICEMAIL_VVM3_TOS_ACCEPTED(1065),
        /**
         * <pre>
         * The user has went through the decline ToS dialog and VVM is disabled
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_DECLINED = 1066;</code>
         */
        VOICEMAIL_VVM3_TOS_DECLINED(1066),
        /**
         * <pre>
         * The user has clicked the decline ToS button, and a conformation dialog
         * was shown
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_DECLINE_CLICKED = 1067;</code>
         */
        VOICEMAIL_VVM3_TOS_DECLINE_CLICKED(1067),
        /**
         * <pre>
         * The use has clicked the decline ToS button but the PIN has been
         * randomized. A dialog to instruct the user to set the PIN has been shown
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN = 1068;</code>
         */
        VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN(1068),
        /**
         * <pre>
         * The user does not have a permission and are presented with a
         * non-framework UI to request permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_DISPLAYED = 1069;</code>
         */
        STORAGE_PERMISSION_DISPLAYED(1069),
        /**
         * <code>CAMERA_PERMISSION_DISPLAYED = 1074;</code>
         */
        CAMERA_PERMISSION_DISPLAYED(1074),
        /**
         * <pre>
         * The user is being shown the Android framework UI to request a permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_REQUESTED = 1070;</code>
         */
        STORAGE_PERMISSION_REQUESTED(1070),
        /**
         * <code>CAMERA_PERMISSION_REQUESTED = 1075;</code>
         */
        CAMERA_PERMISSION_REQUESTED(1075),
        /**
         * <pre>
         * The user has permenantly denied a permission, so the user is being
         * sent to dialer settings to grant permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_SETTINGS = 1071;</code>
         */
        STORAGE_PERMISSION_SETTINGS(1071),
        /**
         * <code>CAMERA_PERMISSION_SETTINGS = 1076;</code>
         */
        CAMERA_PERMISSION_SETTINGS(1076),
        /**
         * <pre>
         * The user granted a permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_GRANTED = 1072;</code>
         */
        STORAGE_PERMISSION_GRANTED(1072),
        /**
         * <code>CAMERA_PERMISSION_GRANTED = 1077;</code>
         */
        CAMERA_PERMISSION_GRANTED(1077),
        /**
         * <pre>
         * The user denied a permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_DENIED = 1073;</code>
         */
        STORAGE_PERMISSION_DENIED(1073),
        /**
         * <code>CAMERA_PERMISSION_DENIED = 1078;</code>
         */
        CAMERA_PERMISSION_DENIED(1078),
        /**
         * <pre>
         * Voicemail config corruption is detected when in dialtacts activity.
         * </pre>
         *
         * <code>VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_ACTIVITY = 1079;</code>
         */
        VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_ACTIVITY(1079),
        /**
         * <pre>
         * Voicemail config corruption is detected when a new voicemail notification
         * has arrived.
         * </pre>
         *
         * <code>VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_NOTIFICATION = 1080;</code>
         */
        VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_NOTIFICATION(1080),
        /**
         * <pre>
         * Android Auto Backup and Restore (Dolly)
         * </pre>
         *
         * <code>BACKUP_ON_BACKUP = 1081 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_BACKUP(1081),
        /**
         * <code>BACKUP_ON_FULL_BACKUP = 1082 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_FULL_BACKUP(1082),
        /**
         * <code>BACKUP_ON_BACKUP_DISABLED = 1083 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_BACKUP_DISABLED(1083),
        /**
         * <code>BACKUP_VOICEMAIL_BACKED_UP = 1084 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_VOICEMAIL_BACKED_UP(1084),
        /**
         * <code>BACKUP_FULL_BACKED_UP = 1085 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_FULL_BACKED_UP(1085),
        /**
         * <code>BACKUP_ON_BACKUP_JSON_EXCEPTION = 1086 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_BACKUP_JSON_EXCEPTION(1086),
        /**
         * <code>BACKUP_ON_QUOTA_EXCEEDED = 1087 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_QUOTA_EXCEEDED(1087),
        /**
         * <code>BACKUP_ON_RESTORE = 1088 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_RESTORE(1088),
        /**
         * <code>BACKUP_RESTORED_FILE = 1089 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_RESTORED_FILE(1089),
        /**
         * <code>BACKUP_RESTORED_VOICEMAIL = 1090 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_RESTORED_VOICEMAIL(1090),
        /**
         * <code>BACKUP_ON_RESTORE_FINISHED = 1091 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_RESTORE_FINISHED(1091),
        /**
         * <code>BACKUP_ON_RESTORE_DISABLED = 1092 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_RESTORE_DISABLED(1092),
        /**
         * <code>BACKUP_ON_RESTORE_JSON_EXCEPTION = 1093 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_RESTORE_JSON_EXCEPTION(1093),
        /**
         * <code>BACKUP_ON_RESTORE_IO_EXCEPTION = 1094 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_RESTORE_IO_EXCEPTION(1094),
        /**
         * <code>BACKUP_MAX_VM_BACKUP_REACHED = 1095 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_MAX_VM_BACKUP_REACHED(1095),
        /**
         * <code>EVENT_ANSWER_HINT_ACTIVATED = 1096;</code>
         */
        EVENT_ANSWER_HINT_ACTIVATED(1096),
        /**
         * <code>EVENT_ANSWER_HINT_DEACTIVATED = 1097;</code>
         */
        EVENT_ANSWER_HINT_DEACTIVATED(1097),
        /**
         * <code>VVM_TAB_VIEWED = 1098;</code>
         */
        VVM_TAB_VIEWED(1098),
        /**
         * <code>VVM_SHARE_VISIBLE = 1099;</code>
         */
        VVM_SHARE_VISIBLE(1099),
        /**
         * <code>VVM_SHARE_PRESSED = 1100;</code>
         */
        VVM_SHARE_PRESSED(1100),
        /**
         * <code>OUTGOING_VIDEO_CALL = 1101;</code>
         */
        OUTGOING_VIDEO_CALL(1101),
        /**
         * <code>INCOMING_VIDEO_CALL = 1102;</code>
         */
        INCOMING_VIDEO_CALL(1102),
        /**
         * <code>USER_PARTICIPATED_IN_A_VIDEO_CALL = 1103;</code>
         */
        USER_PARTICIPATED_IN_A_VIDEO_CALL(1103),
        /**
         * <code>BACKUP_ON_RESTORE_VM_DUPLICATE_NOT_RESTORING = 1104 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        BACKUP_ON_RESTORE_VM_DUPLICATE_NOT_RESTORING(1104),
        /**
         * <pre>
         * User tapped the 'Share and call' button to start the call composer
         * </pre>
         *
         * <code>CALL_LOG_SHARE_AND_CALL = 1105;</code>
         */
        CALL_LOG_SHARE_AND_CALL(1105),
        /**
         * <code>CALL_COMPOSER_ACTIVITY_PLACE_RCS_CALL = 1106;</code>
         */
        CALL_COMPOSER_ACTIVITY_PLACE_RCS_CALL(1106),
        /**
         * <code>CALL_COMPOSER_ACTIVITY_SEND_AND_CALL_PRESSED_WHEN_SESSION_NOT_READY = 1107;</code>
         */
        CALL_COMPOSER_ACTIVITY_SEND_AND_CALL_PRESSED_WHEN_SESSION_NOT_READY(1107),
        /**
         * <code>POST_CALL_PROMPT_USER_TO_SEND_MESSAGE_CLICKED = 1108;</code>
         */
        POST_CALL_PROMPT_USER_TO_SEND_MESSAGE_CLICKED(1108),
        /**
         * <code>POST_CALL_PROMPT_USER_TO_SEND_MESSAGE = 1109;</code>
         */
        POST_CALL_PROMPT_USER_TO_SEND_MESSAGE(1109),
        /**
         * <code>POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE = 1110;</code>
         */
        POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE(1110),
        /**
         * <code>POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE_CLICKED = 1111;</code>
         */
        POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE_CLICKED(1111),
        /**
         * <code>IN_CALL_SCREEN_TURN_ON_MUTE = 1112;</code>
         */
        IN_CALL_SCREEN_TURN_ON_MUTE(1112),
        /**
         * <code>IN_CALL_SCREEN_TURN_OFF_MUTE = 1113;</code>
         */
        IN_CALL_SCREEN_TURN_OFF_MUTE(1113),
        /**
         * <code>IN_CALL_SCREEN_SWAP_CAMERA = 1114;</code>
         */
        IN_CALL_SCREEN_SWAP_CAMERA(1114),
        /**
         * <code>IN_CALL_SCREEN_TURN_ON_VIDEO = 1115;</code>
         */
        IN_CALL_SCREEN_TURN_ON_VIDEO(1115),
        /**
         * <code>IN_CALL_SCREEN_TURN_OFF_VIDEO = 1116;</code>
         */
        IN_CALL_SCREEN_TURN_OFF_VIDEO(1116),
        /**
         * <code>VIDEO_CALL_WITH_INCOMING_VOICE_CALL = 1117;</code>
         */
        VIDEO_CALL_WITH_INCOMING_VOICE_CALL(1117),
        /**
         * <code>VIDEO_CALL_WITH_INCOMING_VIDEO_CALL = 1118;</code>
         */
        VIDEO_CALL_WITH_INCOMING_VIDEO_CALL(1118),
        /**
         * <code>VOICE_CALL_WITH_INCOMING_VOICE_CALL = 1119;</code>
         */
        VOICE_CALL_WITH_INCOMING_VOICE_CALL(1119),
        /**
         * <code>VOICE_CALL_WITH_INCOMING_VIDEO_CALL = 1120;</code>
         */
        VOICE_CALL_WITH_INCOMING_VIDEO_CALL(1120),
        /**
         * <code>CALL_DETAILS_COPY_NUMBER = 1121;</code>
         */
        CALL_DETAILS_COPY_NUMBER(1121),
        /**
         * <code>CALL_DETAILS_EDIT_BEFORE_CALL = 1122;</code>
         */
        CALL_DETAILS_EDIT_BEFORE_CALL(1122),
        /**
         * <code>CALL_DETAILS_CALL_BACK = 1123 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        CALL_DETAILS_CALL_BACK(1123),
        /**
         * <code>VVM_USER_DISMISSED_VM_ALMOST_FULL_PROMO = 1124;</code>
         */
        VVM_USER_DISMISSED_VM_ALMOST_FULL_PROMO(1124),
        /**
         * <code>VVM_USER_DISMISSED_VM_FULL_PROMO = 1125;</code>
         */
        VVM_USER_DISMISSED_VM_FULL_PROMO(1125),
        /**
         * <code>VVM_USER_ENABLED_ARCHIVE_FROM_VM_ALMOST_FULL_PROMO = 1126;</code>
         */
        VVM_USER_ENABLED_ARCHIVE_FROM_VM_ALMOST_FULL_PROMO(1126),
        /**
         * <code>VVM_USER_ENABLED_ARCHIVE_FROM_VM_FULL_PROMO = 1127;</code>
         */
        VVM_USER_ENABLED_ARCHIVE_FROM_VM_FULL_PROMO(1127),
        /**
         * <code>VVM_USER_SHOWN_VM_ALMOST_FULL_PROMO = 1128;</code>
         */
        VVM_USER_SHOWN_VM_ALMOST_FULL_PROMO(1128),
        /**
         * <code>VVM_USER_SHOWN_VM_FULL_PROMO = 1129;</code>
         */
        VVM_USER_SHOWN_VM_FULL_PROMO(1129),
        /**
         * <code>VVM_USER_SHOWN_VM_ALMOST_FULL_ERROR_MESSAGE = 1130;</code>
         */
        VVM_USER_SHOWN_VM_ALMOST_FULL_ERROR_MESSAGE(1130),
        /**
         * <code>VVM_USER_SHOWN_VM_FULL_ERROR_MESSAGE = 1131;</code>
         */
        VVM_USER_SHOWN_VM_FULL_ERROR_MESSAGE(1131),
        /**
         * <code>VVM_USER_TURNED_ARCHIVE_ON_FROM_SETTINGS = 1132;</code>
         */
        VVM_USER_TURNED_ARCHIVE_ON_FROM_SETTINGS(1132),
        /**
         * <code>VVM_USER_TURNED_ARCHIVE_OFF_FROM_SETTINGS = 1133;</code>
         */
        VVM_USER_TURNED_ARCHIVE_OFF_FROM_SETTINGS(1133),
        /**
         * <code>VVM_ARCHIVE_AUTO_DELETED_VM_FROM_SERVER = 1134;</code>
         */
        VVM_ARCHIVE_AUTO_DELETED_VM_FROM_SERVER(1134),
        /**
         * <code>VVM_ARCHIVE_AUTO_DELETE_TURNED_OFF = 1135;</code>
         */
        VVM_ARCHIVE_AUTO_DELETE_TURNED_OFF(1135),
        /**
         * <code>VVM_TAB_VISIBLE = 1136;</code>
         */
        VVM_TAB_VISIBLE(1136),
        /**
         * <code>VVM_UNBUNDLED_EVENT_RECEIVED = 1137;</code>
         */
        VVM_UNBUNDLED_EVENT_RECEIVED(1137),
        /**
         * <code>VVM_ACTIVATION_STARTED = 1138;</code>
         */
        VVM_ACTIVATION_STARTED(1138),
        /**
         * <code>VVM_ACTIVATION_COMPLETED = 1139;</code>
         */
        VVM_ACTIVATION_COMPLETED(1139),
        /**
         * <code>VVM_AUTO_RETRY_ACTIVATION = 1140;</code>
         */
        VVM_AUTO_RETRY_ACTIVATION(1140),
        /**
         * <code>VVM_PROVISIONING_STARTED = 1141;</code>
         */
        VVM_PROVISIONING_STARTED(1141),
        /**
         * <code>VVM_PROVISIONING_COMPLETED = 1142;</code>
         */
        VVM_PROVISIONING_COMPLETED(1142),
        /**
         * <code>VVM_SYNC_STARTED = 1143;</code>
         */
        VVM_SYNC_STARTED(1143),
        /**
         * <code>VVM_SYNC_COMPLETED = 1144;</code>
         */
        VVM_SYNC_COMPLETED(1144),
        /**
         * <code>VVM_AUTO_RETRY_SYNC = 1145;</code>
         */
        VVM_AUTO_RETRY_SYNC(1145),
        /**
         * <code>VVM_USER_RETRY = 1146;</code>
         */
        VVM_USER_RETRY(1146),
        /**
         * <code>VVM_USER_SYNC = 1147;</code>
         */
        VVM_USER_SYNC(1147),
        /**
         * <code>VVM_SETTINGS_VIEWED = 1148;</code>
         */
        VVM_SETTINGS_VIEWED(1148),
        /**
         * <code>VVM_CHANGE_PIN_CLICKED = 1149;</code>
         */
        VVM_CHANGE_PIN_CLICKED(1149),
        /**
         * <code>VVM_CHANGE_PIN_COMPLETED = 1150;</code>
         */
        VVM_CHANGE_PIN_COMPLETED(1150),
        /**
         * <code>VVM_CHANGE_RINGTONE_CLICKED = 1151 [deprecated = true];</code>
         */
        @java.lang.Deprecated
        VVM_CHANGE_RINGTONE_CLICKED(1151),
        /**
         * <code>VVM_CHANGE_VIBRATION_CLICKED = 1152;</code>
         */
        VVM_CHANGE_VIBRATION_CLICKED(1152),
        /**
         * <code>VVM_USER_ENABLED_IN_SETTINGS = 1153;</code>
         */
        VVM_USER_ENABLED_IN_SETTINGS(1153),
        /**
         * <code>VVM_USER_DISABLED_IN_SETTINGS = 1154;</code>
         */
        VVM_USER_DISABLED_IN_SETTINGS(1154),
        /**
         * <code>VVM_ADVANCED_SETINGS_CLICKED = 1155;</code>
         */
        VVM_ADVANCED_SETINGS_CLICKED(1155),
        /**
         * <code>VVM_NOTIFICATION_CLICKED = 1156;</code>
         */
        VVM_NOTIFICATION_CLICKED(1156),
        /**
         * <code>VVM_NOTIFICATION_CREATED = 1157;</code>
         */
        VVM_NOTIFICATION_CREATED(1157),
        /**
         * <code>VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION = 1158;</code>
         */
        VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION(1158),
        /**
         * <code>VVM_TRANSCRIPTION_DOWNLOADED = 1159;</code>
         */
        VVM_TRANSCRIPTION_DOWNLOADED(1159),
        /**
         * <code>VVM_CHANGE_AIRPLANE_MODE_CLICKED = 1160;</code>
         */
        VVM_CHANGE_AIRPLANE_MODE_CLICKED(1160),
        /**
         * <code>VVM_CALL_VOICEMAIL_CLICKED = 1161;</code>
         */
        VVM_CALL_VOICEMAIL_CLICKED(1161),
        /**
         * <code>VVM_QUOTA_CHECK_UNAVAILABLE = 1162;</code>
         */
        VVM_QUOTA_CHECK_UNAVAILABLE(1162),
        /**
         * <pre>
         * Emergency location impressions
         * </pre>
         *
         * <code>EMERGENCY_NEW_EMERGENCY_CALL = 1163;</code>
         */
        EMERGENCY_NEW_EMERGENCY_CALL(1163),
        /**
         * <code>EMERGENCY_CALLBACK = 1164;</code>
         */
        EMERGENCY_CALLBACK(1164),
        /**
         * <code>EMERGENCY_NO_LOCATION_PERMISSION = 1165;</code>
         */
        EMERGENCY_NO_LOCATION_PERMISSION(1165),
        /**
         * <code>EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION = 1166;</code>
         */
        EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION(1166),
        /**
         * <code>EMERGENCY_CANT_GET_LOCATION = 1167;</code>
         */
        EMERGENCY_CANT_GET_LOCATION(1167),
        /**
         * <code>EMERGENCY_STALE_LOCATION = 1168;</code>
         */
        EMERGENCY_STALE_LOCATION(1168),
        /**
         * <code>EMERGENCY_INACCURATE_LOCATION = 1169;</code>
         */
        EMERGENCY_INACCURATE_LOCATION(1169),
        /**
         * <code>EMERGENCY_GOT_LOCATION = 1170;</code>
         */
        EMERGENCY_GOT_LOCATION(1170),
        /**
         * <code>EMERGENCY_GOT_ADDRESS = 1171;</code>
         */
        EMERGENCY_GOT_ADDRESS(1171),
        /**
         * <code>EMERGENCY_GOT_MAP = 1172;</code>
         */
        EMERGENCY_GOT_MAP(1172),
        /**
         * <code>EMERGENCY_LAUNCHED_MAP = 1173;</code>
         */
        EMERGENCY_LAUNCHED_MAP(1173),
        /**
         * <code>VIDEO_CALL_UPGRADE_REQUESTED = 1174;</code>
         */
        VIDEO_CALL_UPGRADE_REQUESTED(1174),
        /**
         * <code>VIDEO_CALL_REQUEST_ACCEPTED = 1175;</code>
         */
        VIDEO_CALL_REQUEST_ACCEPTED(1175),
        /**
         * <code>VIDEO_CALL_REQUEST_ACCEPTED_AS_AUDIO = 1176;</code>
         */
        VIDEO_CALL_REQUEST_ACCEPTED_AS_AUDIO(1176),
        /**
         * <code>VIDEO_CALL_REQUEST_DECLINED = 1177;</code>
         */
        VIDEO_CALL_REQUEST_DECLINED(1177),
        /**
         * <code>VIDEO_CALL_REQUEST_RECEIVED = 1178;</code>
         */
        VIDEO_CALL_REQUEST_RECEIVED(1178),
        /**
         * <code>RCS_VIDEO_SHARE_UPGRADE_REQUESTED = 1179;</code>
         */
        RCS_VIDEO_SHARE_UPGRADE_REQUESTED(1179),
        /**
         * <code>RCS_VIDEO_SHARE_REQUEST_ACCEPTED = 1180;</code>
         */
        RCS_VIDEO_SHARE_REQUEST_ACCEPTED(1180),
        /**
         * <code>RCS_VIDEO_SHARE_REQUEST_DECLINED = 1181;</code>
         */
        RCS_VIDEO_SHARE_REQUEST_DECLINED(1181),
        /**
         * <code>RCS_VIDEO_SHARE_REQUEST_RECEIVED = 1182;</code>
         */
        RCS_VIDEO_SHARE_REQUEST_RECEIVED(1182),
        /**
         * <code>IMS_VIDEO_UPGRADE_REQUESTED = 1183;</code>
         */
        IMS_VIDEO_UPGRADE_REQUESTED(1183),
        /**
         * <code>IMS_VIDEO_REQUEST_ACCEPTED = 1184;</code>
         */
        IMS_VIDEO_REQUEST_ACCEPTED(1184),
        /**
         * <code>IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO = 1185;</code>
         */
        IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO(1185),
        /**
         * <code>IMS_VIDEO_REQUEST_DECLINED = 1186;</code>
         */
        IMS_VIDEO_REQUEST_DECLINED(1186),
        /**
         * <code>IMS_VIDEO_REQUEST_RECEIVED = 1187;</code>
         */
        IMS_VIDEO_REQUEST_RECEIVED(1187),
        /**
         * <code>VVM_STATUS_CHECK_READY = 1188;</code>
         */
        VVM_STATUS_CHECK_READY(1188),
        /**
         * <code>VVM_STATUS_CHECK_REACTIVATION = 1189;</code>
         */
        VVM_STATUS_CHECK_REACTIVATION(1189),
        /**
         * <code>VVM_ARCHIVE_AUTO_DELETE_FAILED_DUE_TO_FAILED_QUOTA_CHECK = 1190;</code>
         */
        VVM_ARCHIVE_AUTO_DELETE_FAILED_DUE_TO_FAILED_QUOTA_CHECK(1190),
        /**
         * <pre>
         * User pressed the speaker phone button on the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_TURN_ON_SPEAKERPHONE = 1191;</code>
         */
        BUBBLE_TURN_ON_SPEAKERPHONE(1191),
        /**
         * <pre>
         * User pressed the speaker phone button again on the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_TURN_ON_WIRED_OR_EARPIECE = 1192;</code>
         */
        BUBBLE_TURN_ON_WIRED_OR_EARPIECE(1192),
        /**
         * <pre>
         * User muted the call from the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_MUTE_CALL = 1193;</code>
         */
        BUBBLE_MUTE_CALL(1193),
        /**
         * <pre>
         * User unmuted the call from the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_UNMUTE_CALL = 1194;</code>
         */
        BUBBLE_UNMUTE_CALL(1194),
        /**
         * <pre>
         * User ended the call from the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_END_CALL = 1195;</code>
         */
        BUBBLE_END_CALL(1195),
        /**
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FROM_SEARCH = 1196;</code>
         */
        LIGHTBRINGER_VIDEO_REQUESTED_FROM_SEARCH(1196),
        /**
         * <pre>
         * Including call history
         * </pre>
         *
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FROM_CALL_LOG = 1197;</code>
         */
        LIGHTBRINGER_VIDEO_REQUESTED_FROM_CALL_LOG(1197),
        /**
         * <code>IMS_VIDEO_REQUESTED_FROM_SEARCH = 1198;</code>
         */
        IMS_VIDEO_REQUESTED_FROM_SEARCH(1198),
        /**
         * <pre>
         * Including call history
         * </pre>
         *
         * <code>IMS_VIDEO_REQUESTED_FROM_CALL_LOG = 1199;</code>
         */
        IMS_VIDEO_REQUESTED_FROM_CALL_LOG(1199),
        /**
         * <pre>
         * Multi select impressions
         * </pre>
         *
         * <code>MULTISELECT_LONG_PRESS_ENTER_MULTI_SELECT_MODE = 1200;</code>
         */
        MULTISELECT_LONG_PRESS_ENTER_MULTI_SELECT_MODE(1200),
        /**
         * <code>MULTISELECT_LONG_PRESS_TAP_ENTRY = 1201;</code>
         */
        MULTISELECT_LONG_PRESS_TAP_ENTRY(1201),
        /**
         * <code>MULTISELECT_SINGLE_PRESS_SELECT_ENTRY = 1202;</code>
         */
        MULTISELECT_SINGLE_PRESS_SELECT_ENTRY(1202),
        /**
         * <code>MULTISELECT_SINGLE_PRESS_UNSELECT_ENTRY = 1203;</code>
         */
        MULTISELECT_SINGLE_PRESS_UNSELECT_ENTRY(1203),
        /**
         * <code>MULTISELECT_SINGLE_PRESS_TAP_VIA_CONTACT_BADGE = 1204;</code>
         */
        MULTISELECT_SINGLE_PRESS_TAP_VIA_CONTACT_BADGE(1204),
        /**
         * <code>MULTISELECT_SELECT_ALL = 1205;</code>
         */
        MULTISELECT_SELECT_ALL(1205),
        /**
         * <code>MULTISELECT_UNSELECT_ALL = 1206;</code>
         */
        MULTISELECT_UNSELECT_ALL(1206),
        /**
         * <code>MULTISELECT_TAP_DELETE_ICON = 1207;</code>
         */
        MULTISELECT_TAP_DELETE_ICON(1207),
        /**
         * <code>MULTISELECT_DISPLAY_DELETE_CONFIRMATION_DIALOG = 1208;</code>
         */
        MULTISELECT_DISPLAY_DELETE_CONFIRMATION_DIALOG(1208),
        /**
         * <code>MULTISELECT_DELETE_ENTRY_VIA_CONFIRMATION_DIALOG = 1209;</code>
         */
        MULTISELECT_DELETE_ENTRY_VIA_CONFIRMATION_DIALOG(1209),
        /**
         * <code>MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_BUTTON = 1210;</code>
         */
        MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_BUTTON(1210),
        /**
         * <code>MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_TOUCH = 1211;</code>
         */
        MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_TOUCH(1211),
        /**
         * <code>MULTISELECT_ROTATE_AND_SHOW_ACTION_MODE = 1212;</code>
         */
        MULTISELECT_ROTATE_AND_SHOW_ACTION_MODE(1212),
        /**
         * <pre>
         * Impressions for verizon VVM with backup and transcription ToS
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_V2_CREATED = 1213;</code>
         */
        VOICEMAIL_VVM3_TOS_V2_CREATED(1213),
        /**
         * <code>VOICEMAIL_VVM3_TOS_V2_ACCEPTED = 1214;</code>
         */
        VOICEMAIL_VVM3_TOS_V2_ACCEPTED(1214),
        /**
         * <code>VOICEMAIL_VVM3_TOS_V2_DECLINE_CLICKED = 1215;</code>
         */
        VOICEMAIL_VVM3_TOS_V2_DECLINE_CLICKED(1215),
        /**
         * <pre>
         * Impressions for dialer voicemail with backup and transcription ToS
         * </pre>
         *
         * <code>VOICEMAIL_DIALER_TOS_CREATED = 1216;</code>
         */
        VOICEMAIL_DIALER_TOS_CREATED(1216),
        /**
         * <code>VOICEMAIL_DIALER_TOS_ACCEPTED = 1217;</code>
         */
        VOICEMAIL_DIALER_TOS_ACCEPTED(1217),
        /**
         * <code>VOICEMAIL_DIALER_TOS_DECLINE_CLICKED = 1218;</code>
         */
        VOICEMAIL_DIALER_TOS_DECLINE_CLICKED(1218),
        /**
         * <pre>
         * Add or create contact
         * Creating new contact fab was logged as NEW_CONTACT_FAB
         * </pre>
         *
         * <code>CREATE_NEW_CONTACT_FROM_CALL_LOG = 1219;</code>
         */
        CREATE_NEW_CONTACT_FROM_CALL_LOG(1219),
        /**
         * <code>CREATE_NEW_CONTACT_FROM_DIALPAD = 1220;</code>
         */
        CREATE_NEW_CONTACT_FROM_DIALPAD(1220),
        /**
         * <code>CREATE_NEW_CONTACT_FROM_VOICEMAIL = 1221;</code>
         */
        CREATE_NEW_CONTACT_FROM_VOICEMAIL(1221),
        /**
         * <code>CREATE_NEW_CONTACT_FROM_CALL_HISTORY = 1222;</code>
         */
        CREATE_NEW_CONTACT_FROM_CALL_HISTORY(1222),
        /**
         * <code>ADD_TO_A_CONTACT_FROM_CALL_LOG = 1223;</code>
         */
        ADD_TO_A_CONTACT_FROM_CALL_LOG(1223),
        /**
         * <code>ADD_TO_A_CONTACT_FROM_DIALPAD = 1224;</code>
         */
        ADD_TO_A_CONTACT_FROM_DIALPAD(1224),
        /**
         * <code>ADD_TO_A_CONTACT_FROM_VOICEMAIL = 1225;</code>
         */
        ADD_TO_A_CONTACT_FROM_VOICEMAIL(1225),
        /**
         * <code>ADD_TO_A_CONTACT_FROM_CALL_HISTORY = 1226;</code>
         */
        ADD_TO_A_CONTACT_FROM_CALL_HISTORY(1226),
        /**
         * <pre>
         * Impressions for dialer reporting caller id as inaccurate
         * </pre>
         *
         * <code>CALLER_ID_REPORTED = 1227;</code>
         */
        CALLER_ID_REPORTED(1227),
        /**
         * <code>CALLER_ID_REPORT_FAILED = 1228;</code>
         */
        CALLER_ID_REPORT_FAILED(1228),
        /**
         * <pre>
         * Impressions for interactions with the voicemail transcription server
         * </pre>
         *
         * <code>VVM_TRANSCRIPTION_REQUEST_SENT = 1229;</code>
         */
        VVM_TRANSCRIPTION_REQUEST_SENT(1229),
        /**
         * <code>VVM_TRANSCRIPTION_REQUEST_RETRY = 1230;</code>
         */
        VVM_TRANSCRIPTION_REQUEST_RETRY(1230),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_SUCCESS = 1231;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_SUCCESS(1231),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_EMPTY = 1232;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_EMPTY(1232),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_INVALID = 1233;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_INVALID(1233),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_RECOVERABLE_ERROR = 1234;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_RECOVERABLE_ERROR(1234),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_FATAL_ERROR = 1235;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_FATAL_ERROR(1235),
        /**
         * <pre>
         * In in call UI
         * </pre>
         *
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN = 1236;</code>
         */
        UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN(1236),
        /**
         * <pre>
         * Bubble primary button first click to expand bubble (by user)
         * </pre>
         *
         * <code>BUBBLE_PRIMARY_BUTTON_EXPAND = 1237;</code>
         */
        BUBBLE_PRIMARY_BUTTON_EXPAND(1237),
        /**
         * <pre>
         * Bubble prinary button second click to return to call
         * </pre>
         *
         * <code>BUBBLE_PRIMARY_BUTTON_RETURN_TO_CALL = 1238;</code>
         */
        BUBBLE_PRIMARY_BUTTON_RETURN_TO_CALL(1238),
        /**
         * <pre>
         * Dialer Key/Value Backup and Restore
         * </pre>
         *
         * <code>BACKUP_KEY_VALUE_ON_BACKUP = 1239;</code>
         */
        BACKUP_KEY_VALUE_ON_BACKUP(1239),
        /**
         * <code>BACKUP_KEY_VALUE_ON_RESTORE = 1240;</code>
         */
        BACKUP_KEY_VALUE_ON_RESTORE(1240),
        /**
         * <code>BACKUP_KEY_VALUE_ON_RESTORE_FINISHED = 1241;</code>
         */
        BACKUP_KEY_VALUE_ON_RESTORE_FINISHED(1241),
        /**
         * <code>BACKUP_KEY_VALUE_GET_BACKUP_SPECIFICATION = 1242;</code>
         */
        BACKUP_KEY_VALUE_GET_BACKUP_SPECIFICATION(1242),
        /**
         * <code>BACKUP_KEY_VALUE_BACKUP_AGENT_CONSTRUCTOR = 1243;</code>
         */
        BACKUP_KEY_VALUE_BACKUP_AGENT_CONSTRUCTOR(1243),
        /**
         * <pre>
         * In the in call UI
         * </pre>
         *
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_LIGHTBRINGER = 1244;</code>
         */
        UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_LIGHTBRINGER(1244),
        /**
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_IMS = 1245;</code>
         */
        UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_IMS(1245),
        /**
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_RCS = 1246;</code>
         */
        UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_RCS(1246),
        /**
         * <code>LIGHTBRINGER_UPGRADE_REQUESTED = 1247;</code>
         */
        LIGHTBRINGER_UPGRADE_REQUESTED(1247),
        /**
         * <pre>
         * Found Lightbringer reachable contact when launching Dialer
         * </pre>
         *
         * <code>HAS_LIGHTBRINGER_REACHABLE_CONTACTS = 1248;</code>
         */
        HAS_LIGHTBRINGER_REACHABLE_CONTACTS(1248),
        /**
         * <pre>
         * This impression is logged once per process when the number of
         * notifications is very high and the system may suppress future
         * notifications.
         * </pre>
         *
         * <code>HIGH_GLOBAL_NOTIFICATION_COUNT_REACHED = 1249;</code>
         */
        HIGH_GLOBAL_NOTIFICATION_COUNT_REACHED(1249),
        /**
         * <pre>
         * More impressions for interactions with the voicemail transcription server
         * </pre>
         *
         * <code>VVM_TRANSCRIPTION_REQUEST_SENT_ASYNC = 1250;</code>
         */
        VVM_TRANSCRIPTION_REQUEST_SENT_ASYNC(1250),
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_RECEIVED = 1251;</code>
         */
        VVM_TRANSCRIPTION_VOICEMAIL_RECEIVED(1251),
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_FORMAT_NOT_SUPPORTED = 1252;</code>
         */
        VVM_TRANSCRIPTION_VOICEMAIL_FORMAT_NOT_SUPPORTED(1252),
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_INVALID_DATA = 1253;</code>
         */
        VVM_TRANSCRIPTION_VOICEMAIL_INVALID_DATA(1253),
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_UPLOAD_FAILED = 1254;</code>
         */
        VVM_TRANSCRIPTION_VOICEMAIL_UPLOAD_FAILED(1254),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_LANGUAGE_NOT_SUPPORTED = 1255;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_LANGUAGE_NOT_SUPPORTED(1255),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_NO_SPEECH_DETECTED = 1256;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_NO_SPEECH_DETECTED(1256),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_EXPIRED = 1257;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_EXPIRED(1257),
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_TOO_MANY_ERRORS = 1258;</code>
         */
        VVM_TRANSCRIPTION_RESPONSE_TOO_MANY_ERRORS(1258),
        /**
         * <code>VVM_TRANSCRIPTION_POLLING_TIMEOUT = 1259;</code>
         */
        VVM_TRANSCRIPTION_POLLING_TIMEOUT(1259),
        /**
         * <pre>
         * Bubble collapse initiated by user, i.e. no hiding after collapse
         * </pre>
         *
         * <code>BUBBLE_COLLAPSE_BY_USER = 1260;</code>
         */
        BUBBLE_COLLAPSE_BY_USER(1260),
        /**
         * <pre>
         * In in-call UI
         * </pre>
         *
         * <code>IN_CALL_SHOW_DIALPAD_BUTTON_PRESSED = 1261;</code>
         */
        IN_CALL_SHOW_DIALPAD_BUTTON_PRESSED(1261),
        /**
         * <code>IN_CALL_ADD_CALL_BUTTON_PRESSED = 1262;</code>
         */
        IN_CALL_ADD_CALL_BUTTON_PRESSED(1262),
        /**
         * <code>IN_CALL_MERGE_BUTTON_PRESSED = 1263;</code>
         */
        IN_CALL_MERGE_BUTTON_PRESSED(1263),
        /**
         * <code>IN_CALL_SWAP_SECONDARY_BUTTON_PRESSED = 1264;</code>
         */
        IN_CALL_SWAP_SECONDARY_BUTTON_PRESSED(1264),
        /**
         * <pre>
         * In in-call dialpad
         * </pre>
         *
         * <code>IN_CALL_DIALPAD_NUMBER_BUTTON_PRESSED = 1265;</code>
         */
        IN_CALL_DIALPAD_NUMBER_BUTTON_PRESSED(1265),
        /**
         * <code>IN_CALL_DIALPAD_HANG_UP_BUTTON_PRESSED = 1266;</code>
         */
        IN_CALL_DIALPAD_HANG_UP_BUTTON_PRESSED(1266),
        /**
         * <code>IN_CALL_DIALPAD_CLOSE_BUTTON_PRESSED = 1267;</code>
         */
        IN_CALL_DIALPAD_CLOSE_BUTTON_PRESSED(1267),
        /**
         * <pre>
         * More voicemail transcription impressions
         * </pre>
         *
         * <code>VVM_NOTIFICATION_CREATED_WITH_IN_PROGRESS = 1268;</code>
         */
        VVM_NOTIFICATION_CREATED_WITH_IN_PROGRESS(1268),
        /**
         * <code>VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION_FAILURE = 1269;</code>
         */
        VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION_FAILURE(1269),
        /**
         * <code>VVM_NOTIFICATION_CREATED_WITH_NO_TRANSCRIPTION = 1270;</code>
         */
        VVM_NOTIFICATION_CREATED_WITH_NO_TRANSCRIPTION(1270),
        /**
         * <code>VVM_TRANSCRIPTION_JOB_STOPPED = 1271;</code>
         */
        VVM_TRANSCRIPTION_JOB_STOPPED(1271),
        /**
         * <code>VVM_TRANSCRIPTION_TASK_CANCELLED = 1272;</code>
         */
        VVM_TRANSCRIPTION_TASK_CANCELLED(1272),
        /**
         * <pre>
         * Swipe/click to switch tabs
         * </pre>
         *
         * <code>SWITCH_TAB_TO_FAVORITE_BY_SWIPE = 1273;</code>
         */
        SWITCH_TAB_TO_FAVORITE_BY_SWIPE(1273),
        /**
         * <code>SWITCH_TAB_TO_CALL_LOG_BY_SWIPE = 1274;</code>
         */
        SWITCH_TAB_TO_CALL_LOG_BY_SWIPE(1274),
        /**
         * <code>SWITCH_TAB_TO_CONTACTS_BY_SWIPE = 1275;</code>
         */
        SWITCH_TAB_TO_CONTACTS_BY_SWIPE(1275),
        /**
         * <code>SWITCH_TAB_TO_VOICEMAIL_BY_SWIPE = 1276;</code>
         */
        SWITCH_TAB_TO_VOICEMAIL_BY_SWIPE(1276),
        /**
         * <code>SWITCH_TAB_TO_FAVORITE_BY_CLICK = 1277;</code>
         */
        SWITCH_TAB_TO_FAVORITE_BY_CLICK(1277),
        /**
         * <code>SWITCH_TAB_TO_CALL_LOG_BY_CLICK = 1278;</code>
         */
        SWITCH_TAB_TO_CALL_LOG_BY_CLICK(1278),
        /**
         * <code>SWITCH_TAB_TO_CONTACTS_BY_CLICK = 1279;</code>
         */
        SWITCH_TAB_TO_CONTACTS_BY_CLICK(1279),
        /**
         * <code>SWITCH_TAB_TO_VOICEMAIL_BY_CLICK = 1280;</code>
         */
        SWITCH_TAB_TO_VOICEMAIL_BY_CLICK(1280),
        /**
         * <code>LIGHTBRINGER_NON_CONTACT_UPGRADE_REQUESTED = 1281;</code>
         */
        LIGHTBRINGER_NON_CONTACT_UPGRADE_REQUESTED(1281),
        /**
         * <pre>
         * Including call history
         * </pre>
         *
         * <code>LIGHTBRINGER_NON_CONTACT_VIDEO_REQUESTED_FROM_CALL_LOG = 1282;</code>
         */
        LIGHTBRINGER_NON_CONTACT_VIDEO_REQUESTED_FROM_CALL_LOG(1282),
        /**
         * <pre>
         * More voicemail transcription impressions
         * </pre>
         *
         * <code>VVM_TRANSCRIPTION_POLL_REQUEST = 1283;</code>
         */
        VVM_TRANSCRIPTION_POLL_REQUEST(1283),
        /**
         * <pre>
         * Callback impressions (with more granularity) from the call details UI
         * </pre>
         *
         * <code>CALL_DETAILS_IMS_VIDEO_CALL_BACK = 1284;</code>
         */
        CALL_DETAILS_IMS_VIDEO_CALL_BACK(1284),
        /**
         * <code>CALL_DETAILS_LIGHTBRINGER_CALL_BACK = 1285;</code>
         */
        CALL_DETAILS_LIGHTBRINGER_CALL_BACK(1285),
        /**
         * <code>CALL_DETAILS_VOICE_CALL_BACK = 1286;</code>
         */
        CALL_DETAILS_VOICE_CALL_BACK(1286),
        /**
         * <pre>
         * Indicates a failure to parse a provided number string in libphonenumber.
         * </pre>
         *
         * <code>ASSISTED_DIALING_CONSTRAINT_PARSING_FAILURE = 1287;</code>
         */
        ASSISTED_DIALING_CONSTRAINT_PARSING_FAILURE(1287),
        /**
         * <pre>
         * Indicates that the number attempting to be assisted dialed already
         * specified a country code.
         * </pre>
         *
         * <code>ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_COUNTRY_CODE = 1288;</code>
         */
        ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_COUNTRY_CODE(1288),
        /**
         * <pre>
         * Indicates that the number attempting to be assisted dialed had an
         * extension.
         * </pre>
         *
         * <code>ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_EXTENSION = 1289;</code>
         */
        ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_EXTENSION(1289),
        /**
         * <pre>
         * Indicates that the user disabled the feature.
         * </pre>
         *
         * <code>ASSISTED_DIALING_FEATURE_DISABLED_BY_USER = 1292;</code>
         */
        ASSISTED_DIALING_FEATURE_DISABLED_BY_USER(1292),
        /**
         * <pre>
         * User reports a same prefix call as spam from call history
         * </pre>
         *
         * <code>REPORT_SAME_PREFIX_CALL_AS_SPAM_VIA_CALL_HISTORY = 1290;</code>
         */
        REPORT_SAME_PREFIX_CALL_AS_SPAM_VIA_CALL_HISTORY(1290),
        /**
         * <pre>
         * User reports a same prefix call as not spam from call history
         * </pre>
         *
         * <code>REPORT_SAME_PREFIX_CALL_AS_NOT_SPAM_VIA_CALL_HISTORY = 1291;</code>
         */
        REPORT_SAME_PREFIX_CALL_AS_NOT_SPAM_VIA_CALL_HISTORY(1291),
        /**
         * <code>PRECALL_INITIATED = 1293;</code>
         */
        PRECALL_INITIATED(1293),
        /**
         * <code>PRECALL_INITIATED_EXTERNAL = 1294;</code>
         */
        PRECALL_INITIATED_EXTERNAL(1294),
        /**
         * <code>PRECALL_CANCELED = 1295;</code>
         */
        PRECALL_CANCELED(1295),
        /**
         * <code>DUAL_SIM_CHANGE_SIM_PRESSED = 1296;</code>
         */
        DUAL_SIM_CHANGE_SIM_PRESSED(1296),
        /**
         * <code>DUAL_SIM_SELECTION_SHOWN = 1297;</code>
         */
        DUAL_SIM_SELECTION_SHOWN(1297),
        /**
         * <code>DUAL_SIM_SELECTION_VOICEMAIL = 1298;</code>
         */
        DUAL_SIM_SELECTION_VOICEMAIL(1298),
        /**
         * <code>DUAL_SIM_SELECTION_IN_CONTACTS = 1299;</code>
         */
        DUAL_SIM_SELECTION_IN_CONTACTS(1299),
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTION_AVAILABLE = 1300;</code>
         */
        DUAL_SIM_SELECTION_SUGGESTION_AVAILABLE(1300),
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTED_CARRIER = 1301;</code>
         */
        DUAL_SIM_SELECTION_SUGGESTED_CARRIER(1301),
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTED_FREQUENCY = 1302;</code>
         */
        DUAL_SIM_SELECTION_SUGGESTED_FREQUENCY(1302),
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTED_SIM_SELECTED = 1303;</code>
         */
        DUAL_SIM_SELECTION_SUGGESTED_SIM_SELECTED(1303),
        /**
         * <code>DUAL_SIM_SELECTION_NON_SUGGESTED_SIM_SELECTED = 1304;</code>
         */
        DUAL_SIM_SELECTION_NON_SUGGESTED_SIM_SELECTED(1304),
        /**
         * <code>DUAL_SIM_SELECTION_PREFERRED_SET = 1305;</code>
         */
        DUAL_SIM_SELECTION_PREFERRED_SET(1305),
        /**
         * <code>DUAL_SIM_SELECTION_PREFERRED_USED = 1306;</code>
         */
        DUAL_SIM_SELECTION_PREFERRED_USED(1306),
        /**
         * <code>DUAL_SIM_SELECTION_PREFERRED_NOT_SELECTABLE = 1389;</code>
         */
        DUAL_SIM_SELECTION_PREFERRED_NOT_SELECTABLE(1389),
        /**
         * <code>DUAL_SIM_SELECTION_GLOBAL_USED = 1307;</code>
         */
        DUAL_SIM_SELECTION_GLOBAL_USED(1307),
        /**
         * <code>DUAL_SIM_SELECTION_GLOBAL_NOT_SELECTABLE = 1390;</code>
         */
        DUAL_SIM_SELECTION_GLOBAL_NOT_SELECTABLE(1390),
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTION_AUTO_SELECTED = 1322;</code>
         */
        DUAL_SIM_SELECTION_SUGGESTION_AUTO_SELECTED(1322),
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTION_AUTO_NOT_SELECTABLE = 1391;</code>
         */
        DUAL_SIM_SELECTION_SUGGESTION_AUTO_NOT_SELECTABLE(1391),
        /**
         * <code>DUO_CALL_LOG_SET_UP_INSTALL = 1308;</code>
         */
        DUO_CALL_LOG_SET_UP_INSTALL(1308),
        /**
         * <code>DUO_CALL_LOG_SET_UP_ACTIVATE = 1309;</code>
         */
        DUO_CALL_LOG_SET_UP_ACTIVATE(1309),
        /**
         * <code>DUO_CALL_LOG_INVITE = 1310;</code>
         */
        DUO_CALL_LOG_INVITE(1310),
        /**
         * <pre>
         * Bubble primary button first click to expand bubble
         * </pre>
         *
         * <code>BUBBLE_V2_CLICK_TO_EXPAND = 1311;</code>
         */
        BUBBLE_V2_CLICK_TO_EXPAND(1311),
        /**
         * <pre>
         * Bubble primary button second click to collapse bubble
         * </pre>
         *
         * <code>BUBBLE_V2_CLICK_TO_COLLAPSE = 1312;</code>
         */
        BUBBLE_V2_CLICK_TO_COLLAPSE(1312),
        /**
         * <pre>
         * User return to call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_RETURN_TO_CALL = 1313;</code>
         */
        BUBBLE_V2_RETURN_TO_CALL(1313),
        /**
         * <pre>
         * User muted call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_MUTE_CALL = 1314;</code>
         */
        BUBBLE_V2_MUTE_CALL(1314),
        /**
         * <pre>
         * User unmuted call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_UNMUTE_CALL = 1315;</code>
         */
        BUBBLE_V2_UNMUTE_CALL(1315),
        /**
         * <pre>
         * User choose audio route speakerphone from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_SPEAKERPHONE = 1316;</code>
         */
        BUBBLE_V2_SPEAKERPHONE(1316),
        /**
         * <pre>
         * User choose audio route wired or earpiece from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_WIRED_OR_EARPIECE = 1317;</code>
         */
        BUBBLE_V2_WIRED_OR_EARPIECE(1317),
        /**
         * <pre>
         * User choose audio route bluetooth from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_BLUETOOTH = 1318;</code>
         */
        BUBBLE_V2_BLUETOOTH(1318),
        /**
         * <pre>
         * User ended call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_END_CALL = 1319;</code>
         */
        BUBBLE_V2_END_CALL(1319),
        /**
         * <pre>
         * Drag bubble to bottom and dismiss
         * </pre>
         *
         * <code>BUBBLE_V2_BOTTOM_ACTION_DISMISS = 1320;</code>
         */
        BUBBLE_V2_BOTTOM_ACTION_DISMISS(1320),
        /**
         * <pre>
         * Drag bubble to bottom and end call
         * </pre>
         *
         * <code>BUBBLE_V2_BOTTOM_ACTION_END_CALL = 1321;</code>
         */
        BUBBLE_V2_BOTTOM_ACTION_END_CALL(1321),
        /**
         * <pre>
         * Bubble appears
         * </pre>
         *
         * <code>BUBBLE_V2_SHOW = 1323;</code>
         */
        BUBBLE_V2_SHOW(1323),
        /**
         * <code>DUO_CALL_LOG_SET_UP_INSTALL_SHOWN = 1324;</code>
         */
        DUO_CALL_LOG_SET_UP_INSTALL_SHOWN(1324),
        /**
         * <code>DUO_CALL_LOG_SET_UP_ACTIVATE_SHOWN = 1325;</code>
         */
        DUO_CALL_LOG_SET_UP_ACTIVATE_SHOWN(1325),
        /**
         * <code>DUO_CALL_LOG_INVITE_SHOWN = 1326;</code>
         */
        DUO_CALL_LOG_INVITE_SHOWN(1326),
        /**
         * <pre>
         * NUI bottom navigation bar user actions
         * </pre>
         *
         * <code>MAIN_SWITCH_TAB_TO_FAVORITE = 1327;</code>
         */
        MAIN_SWITCH_TAB_TO_FAVORITE(1327),
        /**
         * <code>MAIN_SWITCH_TAB_TO_CALL_LOG = 1328;</code>
         */
        MAIN_SWITCH_TAB_TO_CALL_LOG(1328),
        /**
         * <code>MAIN_SWITCH_TAB_TO_CONTACTS = 1329;</code>
         */
        MAIN_SWITCH_TAB_TO_CONTACTS(1329),
        /**
         * <code>MAIN_SWITCH_TAB_TO_VOICEMAIL = 1330;</code>
         */
        MAIN_SWITCH_TAB_TO_VOICEMAIL(1330),
        /**
         * <pre>
         * NUI search
         * </pre>
         *
         * <code>MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_CLOSE_SEARCH_AND_DIALPAD = 1331;</code>
         */
        MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_CLOSE_SEARCH_AND_DIALPAD(1331),
        /**
         * <code>MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_HIDE_DIALPAD = 1332;</code>
         */
        MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_HIDE_DIALPAD(1332),
        /**
         * <code>MAIN_TOUCH_SEARCH_LIST_TO_CLOSE_SEARCH = 1333;</code>
         */
        MAIN_TOUCH_SEARCH_LIST_TO_CLOSE_SEARCH(1333),
        /**
         * <code>MAIN_TOUCH_SEARCH_LIST_TO_HIDE_KEYBOARD = 1334;</code>
         */
        MAIN_TOUCH_SEARCH_LIST_TO_HIDE_KEYBOARD(1334),
        /**
         * <code>MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH = 1335;</code>
         */
        MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH(1335),
        /**
         * <code>MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH_AND_DIALPAD = 1336;</code>
         */
        MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH_AND_DIALPAD(1336),
        /**
         * <code>MAIN_PRESS_BACK_BUTTON_TO_HIDE_DIALPAD = 1337;</code>
         */
        MAIN_PRESS_BACK_BUTTON_TO_HIDE_DIALPAD(1337),
        /**
         * <code>MAIN_CLICK_SEARCH_BAR = 1338;</code>
         */
        MAIN_CLICK_SEARCH_BAR(1338),
        /**
         * <code>MAIN_CLICK_SEARCH_BAR_VOICE_BUTTON = 1339;</code>
         */
        MAIN_CLICK_SEARCH_BAR_VOICE_BUTTON(1339),
        /**
         * <pre>
         * NUI FAB
         * </pre>
         *
         * <code>MAIN_CLICK_FAB_TO_OPEN_DIALPAD = 1340;</code>
         */
        MAIN_CLICK_FAB_TO_OPEN_DIALPAD(1340),
        /**
         * <pre>
         * The call log was not dirty.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_NOT_DIRTY = 1341;</code>
         */
        ANNOTATED_CALL_LOG_NOT_DIRTY(1341),
        /**
         * <pre>
         * The call log was dirty but no changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_NO_CHANGES_NEEDED = 1342;</code>
         */
        ANNOTATED_CALL_LOG_NO_CHANGES_NEEDED(1342),
        /**
         * <pre>
         * The call log was force refreshed but no changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_FORCE_REFRESH_NO_CHANGES_NEEDED = 1343;</code>
         */
        ANNOTATED_CALL_LOG_FORCE_REFRESH_NO_CHANGES_NEEDED(1343),
        /**
         * <pre>
         * The call log was dirty and changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_CHANGES_NEEDED = 1344;</code>
         */
        ANNOTATED_CALL_LOG_CHANGES_NEEDED(1344),
        /**
         * <pre>
         * The call log was force refreshed and changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_FORCE_REFRESH_CHANGES_NEEDED = 1345;</code>
         */
        ANNOTATED_CALL_LOG_FORCE_REFRESH_CHANGES_NEEDED(1345),
        /**
         * <code>MAIN_VVM_TAB_VISIBLE = 1346;</code>
         */
        MAIN_VVM_TAB_VISIBLE(1346),
        /**
         * <pre>
         * Main bottom navigation bar non user actions
         * </pre>
         *
         * <code>MAIN_OPEN_WITH_TAB_FAVORITE = 1347;</code>
         */
        MAIN_OPEN_WITH_TAB_FAVORITE(1347),
        /**
         * <code>MAIN_OPEN_WITH_TAB_CALL_LOG = 1348;</code>
         */
        MAIN_OPEN_WITH_TAB_CALL_LOG(1348),
        /**
         * <code>MAIN_OPEN_WITH_TAB_CONTACTS = 1349;</code>
         */
        MAIN_OPEN_WITH_TAB_CONTACTS(1349),
        /**
         * <code>MAIN_OPEN_WITH_TAB_VOICEMAIL = 1350;</code>
         */
        MAIN_OPEN_WITH_TAB_VOICEMAIL(1350),
        /**
         * <code>MAIN_OPEN_WITH_DIALPAD = 1351;</code>
         */
        MAIN_OPEN_WITH_DIALPAD(1351),
        /**
         * <pre>
         * Incoming call screened for spam auto blocking
         * </pre>
         *
         * <code>INCOMING_CALL_SCREENED = 1352;</code>
         */
        INCOMING_CALL_SCREENED(1352),
        /**
         * <pre>
         * Incoming call auto blocked as spam
         * </pre>
         *
         * <code>INCOMING_CALL_AUTO_BLOCKED_AS_SPAM = 1353;</code>
         */
        INCOMING_CALL_AUTO_BLOCKED_AS_SPAM(1353),
        /**
         * <pre>
         * Incoming voicemail screened for spam auto blocking
         * </pre>
         *
         * <code>INCOMING_VOICEMAIL_SCREENED = 1354;</code>
         */
        INCOMING_VOICEMAIL_SCREENED(1354),
        /**
         * <pre>
         * Incoming voicemail auto blocked as spam
         * </pre>
         *
         * <code>INCOMING_VOICEMAIL_AUTO_BLOCKED_AS_SPAM = 1355;</code>
         */
        INCOMING_VOICEMAIL_AUTO_BLOCKED_AS_SPAM(1355),
        /**
         * <pre>
         * User reported auto blocked spam call as spam
         * </pre>
         *
         * <code>AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_SPAM = 1356;</code>
         */
        AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_SPAM(1356),
        /**
         * <pre>
         * User reported auto blocked spam call as not spam
         * </pre>
         *
         * <code>AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_NOT_SPAM = 1357;</code>
         */
        AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_NOT_SPAM(1357),
        /**
         * <pre>
         * User enabled spam blocking through setting page.
         * </pre>
         *
         * <code>SPAM_BLOCKING_ENABLED_THROUGH_SETTING = 1358;</code>
         */
        SPAM_BLOCKING_ENABLED_THROUGH_SETTING(1358),
        /**
         * <pre>
         * User disabled spam blocking through setting page.
         * </pre>
         *
         * <code>SPAM_BLOCKING_DISABLED_THROUGH_SETTING = 1359;</code>
         */
        SPAM_BLOCKING_DISABLED_THROUGH_SETTING(1359),
        /**
         * <pre>
         * Failure happened while modifying spam blocking setting.
         * </pre>
         *
         * <code>SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_SETTING = 1360;</code>
         */
        SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_SETTING(1360),
        /**
         * <code>VVM_NOTIFICATIONS_SETTING_CLICKED = 1361;</code>
         */
        VVM_NOTIFICATIONS_SETTING_CLICKED(1361),
        /**
         * <code>VVM_USER_TURNED_TRANSCRIBE_ON_FROM_SETTINGS = 1362;</code>
         */
        VVM_USER_TURNED_TRANSCRIBE_ON_FROM_SETTINGS(1362),
        /**
         * <code>VVM_USER_TURNED_TRANSCRIBE_OFF_FROM_SETTINGS = 1363;</code>
         */
        VVM_USER_TURNED_TRANSCRIBE_OFF_FROM_SETTINGS(1363),
        /**
         * <code>VVM_USER_TURNED_DONATION_ON_FROM_SETTINGS = 1364;</code>
         */
        VVM_USER_TURNED_DONATION_ON_FROM_SETTINGS(1364),
        /**
         * <code>VVM_USER_TURNED_DONATION_OFF_FROM_SETTINGS = 1365;</code>
         */
        VVM_USER_TURNED_DONATION_OFF_FROM_SETTINGS(1365),
        /**
         * <pre>
         * Spam blocking call log promo shown for user.
         * </pre>
         *
         * <code>SPAM_BLOCKING_CALL_LOG_PROMO_SHOWN = 1366;</code>
         */
        SPAM_BLOCKING_CALL_LOG_PROMO_SHOWN(1366),
        /**
         * <pre>
         * User enabled spam blocking through call log promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_ENABLED_THROUGH_CALL_LOG_PROMO = 1367;</code>
         */
        SPAM_BLOCKING_ENABLED_THROUGH_CALL_LOG_PROMO(1367),
        /**
         * <pre>
         * Failure happened while enabling spam blocking through call log promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_CALL_LOG_PROMO = 1368;</code>
         */
        SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_CALL_LOG_PROMO(1368),
        /**
         * <code>TOKEN_FETCHER_NEED_USER_APPROVAL = 1371;</code>
         */
        TOKEN_FETCHER_NEED_USER_APPROVAL(1371),
        /**
         * <code>TOKEN_FETCHER_IO_EXCEPTION = 1372;</code>
         */
        TOKEN_FETCHER_IO_EXCEPTION(1372),
        /**
         * <code>TOKEN_FETCHER_AUTH_EXCEPTION = 1373;</code>
         */
        TOKEN_FETCHER_AUTH_EXCEPTION(1373),
        /**
         * <code>TOKEN_FETCHER_CLEAR_EXCEPTION = 1374;</code>
         */
        TOKEN_FETCHER_CLEAR_EXCEPTION(1374),
        /**
         * <code>PEOPLE_API_LOOKUP_FAILED = 1375;</code>
         */
        PEOPLE_API_LOOKUP_FAILED(1375),
        /**
         * <pre>
         * New Speed Dial impressions
         * </pre>
         *
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT = 1376;</code>
         */
        LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT(1376),
        /**
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FOR_SUGGESTED_CONTACT = 1377;</code>
         */
        LIGHTBRINGER_VIDEO_REQUESTED_FOR_SUGGESTED_CONTACT(1377),
        /**
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT_DISAMBIG = 1378;</code>
         */
        LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT_DISAMBIG(1378),
        /**
         * <pre>
         * Spam blocking after call notification promo shown for user.
         * </pre>
         *
         * <code>SPAM_BLOCKING_AFTER_CALL_NOTIFICATION_PROMO_SHOWN = 1379;</code>
         */
        SPAM_BLOCKING_AFTER_CALL_NOTIFICATION_PROMO_SHOWN(1379),
        /**
         * <pre>
         * User enabled spam blocking through after call notification promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_ENABLED_THROUGH_AFTER_CALL_NOTIFICATION_PROMO = 1380;</code>
         */
        SPAM_BLOCKING_ENABLED_THROUGH_AFTER_CALL_NOTIFICATION_PROMO(1380),
        /**
         * <pre>
         * Failure happened while enabling spam blocking through after call
         * notification promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_AFTER_CALL_NOTIFICATION_PROMO = 1381;</code>
         */
        SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_AFTER_CALL_NOTIFICATION_PROMO(1381),
        /**
         * <pre>
         * RTT call impressions
         * </pre>
         *
         * <code>OUTGOING_RTT_CALL = 1382;</code>
         */
        OUTGOING_RTT_CALL(1382),
        /**
         * <code>INCOMING_RTT_CALL = 1383;</code>
         */
        INCOMING_RTT_CALL(1383),
        /**
         * <pre>
         * The call turns into RTT call mid call.
         * </pre>
         *
         * <code>RTT_MID_CALL_ENABLED = 1384;</code>
         */
        RTT_MID_CALL_ENABLED(1384),
        /**
         * <pre>
         * Mid call RTT request accepted.
         * </pre>
         *
         * <code>RTT_MID_CALL_ACCEPTED = 1385;</code>
         */
        RTT_MID_CALL_ACCEPTED(1385),
        /**
         * <pre>
         * Mid call RTT request rejected.
         * </pre>
         *
         * <code>RTT_MID_CALL_REJECTED = 1386;</code>
         */
        RTT_MID_CALL_REJECTED(1386),
        /**
         * <pre>
         * Send button clicked in RTT call, this includes send button on keyboard.
         * </pre>
         *
         * <code>RTT_SEND_BUTTON_CLICKED = 1387;</code>
         */
        RTT_SEND_BUTTON_CLICKED(1387),
        /**
         * <code>RTT_KEYBOARD_SEND_BUTTON_CLICKED = 1388;</code>
         */
        RTT_KEYBOARD_SEND_BUTTON_CLICKED(1388),
        /**
         * <pre>
         * For background calling
         * </pre>
         *
         * <code>START_CALL_IN_BUBBLE_MODE = 1392;</code>
         */
        START_CALL_IN_BUBBLE_MODE(1392),
        /**
         * <pre>
         * Switch audio route
         * </pre>
         *
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_SPEAKER = 1393;</code>
         */
        IN_CALL_SWITCH_AUDIO_ROUTE_SPEAKER(1393),
        /**
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_WIRED_HEADSET = 1394;</code>
         */
        IN_CALL_SWITCH_AUDIO_ROUTE_WIRED_HEADSET(1394),
        /**
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_EARPIECE = 1395;</code>
         */
        IN_CALL_SWITCH_AUDIO_ROUTE_EARPIECE(1395),
        /**
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_BLUETOOTH = 1396;</code>
         */
        IN_CALL_SWITCH_AUDIO_ROUTE_BLUETOOTH(1396),
        /**
         * <pre>
         * Impressions for PhoneLookup
         * </pre>
         *
         * <code>PEOPLE_API_PHONE_LOOKUP_TIMEOUT = 1397;</code>
         */
        PEOPLE_API_PHONE_LOOKUP_TIMEOUT(1397),
        /**
         * <code>CP2_EXTENDED_DIRECTORY_PHONE_LOOKUP_TIMEOUT = 1398;</code>
         */
        CP2_EXTENDED_DIRECTORY_PHONE_LOOKUP_TIMEOUT(1398),
        /**
         * <pre>
         * Favorite general
         * </pre>
         *
         * <code>FAVORITE_ADD_FAVORITE = 1399;</code>
         */
        FAVORITE_ADD_FAVORITE(1399),
        /**
         * <code>FAVORITE_OPEN_DISAMBIG_DIALOG = 1400;</code>
         */
        FAVORITE_OPEN_DISAMBIG_DIALOG(1400),
        /**
         * <code>FAVORITE_REMOVE_FAVORITE_BY_DRAG_AND_DROP = 1401;</code>
         */
        FAVORITE_REMOVE_FAVORITE_BY_DRAG_AND_DROP(1401),
        /**
         * <code>FAVORITE_MOVE_FAVORITE_BY_DRAG_AND_DROP = 1402;</code>
         */
        FAVORITE_MOVE_FAVORITE_BY_DRAG_AND_DROP(1402),
        /**
         * <pre>
         * Favorite menu
         * </pre>
         *
         * <code>FAVORITE_OPEN_FAVORITE_MENU = 1403;</code>
         */
        FAVORITE_OPEN_FAVORITE_MENU(1403),
        /**
         * <code>FAVORITE_SEND_MESSAGE = 1404;</code>
         */
        FAVORITE_SEND_MESSAGE(1404),
        /**
         * <code>FAVORITE_OPEN_CONTACT_CARD = 1405;</code>
         */
        FAVORITE_OPEN_CONTACT_CARD(1405),
        /**
         * <pre>
         * Include drag and drop
         * </pre>
         *
         * <code>FAVORITE_REMOVE_FAVORITE = 1406;</code>
         */
        FAVORITE_REMOVE_FAVORITE(1406),
        /**
         * <pre>
         * Favorite disambig
         * </pre>
         *
         * <code>FAVORITE_SET_VIDEO_DEFAULT = 1407;</code>
         */
        FAVORITE_SET_VIDEO_DEFAULT(1407),
        /**
         * <code>FAVORITE_SET_VOICE_DEFAULT = 1408;</code>
         */
        FAVORITE_SET_VOICE_DEFAULT(1408),
        ;

        /**
         * <code>UNKNOWN_AOSP_EVENT_TYPE = 1000;</code>
         */
        public static final int UNKNOWN_AOSP_EVENT_TYPE_VALUE = 1000;
        /**
         * <pre>
         * User opened the app
         * </pre>
         *
         * <code>APP_LAUNCHED = 1001;</code>
         */
        public static final int APP_LAUNCHED_VALUE = 1001;
        /**
         * <pre>
         * User pressed the speaker phone button
         * </pre>
         *
         * <code>IN_CALL_SCREEN_TURN_ON_SPEAKERPHONE = 1002;</code>
         */
        public static final int IN_CALL_SCREEN_TURN_ON_SPEAKERPHONE_VALUE = 1002;
        /**
         * <pre>
         * User pressed the speaker phone button again
         * </pre>
         *
         * <code>IN_CALL_SCREEN_TURN_ON_WIRED_OR_EARPIECE = 1003;</code>
         */
        public static final int IN_CALL_SCREEN_TURN_ON_WIRED_OR_EARPIECE_VALUE = 1003;
        /**
         * <pre>
         * Number not identified as spam and the user tapped the block/report spam
         * button in the call log
         * </pre>
         *
         * <code>CALL_LOG_BLOCK_REPORT_SPAM = 1004;</code>
         */
        public static final int CALL_LOG_BLOCK_REPORT_SPAM_VALUE = 1004;
        /**
         * <pre>
         * Number identified as spam and the user tapped on the block number call
         * log item
         * </pre>
         *
         * <code>CALL_LOG_BLOCK_NUMBER = 1005;</code>
         */
        public static final int CALL_LOG_BLOCK_NUMBER_VALUE = 1005;
        /**
         * <pre>
         * User tapped on the unblock number in the call log
         * This does not deal with whether the user reported this spam or not while
         * initially blocking For that refer to
         * REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER. If the user had not reported it as
         * spam they then have the option of directly unblocking the number, a
         * success of which is logged in USER_ACTION_UNBLOCKED_NUMBER
         * </pre>
         *
         * <code>CALL_LOG_UNBLOCK_NUMBER = 1006;</code>
         */
        public static final int CALL_LOG_UNBLOCK_NUMBER_VALUE = 1006;
        /**
         * <pre>
         * Number was identified as spam, and the user tapped that it was not spam
         * </pre>
         *
         * <code>CALL_LOG_REPORT_AS_NOT_SPAM = 1007;</code>
         */
        public static final int CALL_LOG_REPORT_AS_NOT_SPAM_VALUE = 1007;
        /**
         * <pre>
         * Confirmation dialog in which the user confirmed that the number was not
         * spam
         * </pre>
         *
         * <code>DIALOG_ACTION_CONFIRM_NUMBER_NOT_SPAM = 1008;</code>
         */
        public static final int DIALOG_ACTION_CONFIRM_NUMBER_NOT_SPAM_VALUE = 1008;
        /**
         * <pre>
         * User unblocked a number and also acknowledged that the number is not spam
         * This happens when the user had initially blocked a number and also
         * claimed the number was spam and had now proceeded to undo that.
         * </pre>
         *
         * <code>REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER = 1009;</code>
         */
        public static final int REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER_VALUE = 1009;
        /**
         * <pre>
         * A number that was identified as spam and the user proceeded to block it.
         * However this impression was to make sure that while blocking the number
         * the user also acknowledged that they were going to be reporting this as
         * spam. There is no option for the user in this case to not report it as
         * spam and block it only. The only flow is: system identified number as
         * spam -&gt; user wants to block it -&gt; confirmation dialog shows up asking
         * user to acknowledge they want to block and report as spam -&gt; user
         * acknowledges and this is when this impression is sent
         * </pre>
         *
         * <code>DIALOG_ACTION_CONFIRM_NUMBER_SPAM_INDIRECTLY_VIA_BLOCK_NUMBER = 1010;</code>
         */
        public static final int DIALOG_ACTION_CONFIRM_NUMBER_SPAM_INDIRECTLY_VIA_BLOCK_NUMBER_VALUE = 1010;
        /**
         * <pre>
         * User reported the number as spam by tick marking on report spam when
         * blocking the number via call log. This is for case where the user wants
         * to block a number and also report it as spam
         * </pre>
         *
         * <code>REPORT_CALL_AS_SPAM_VIA_CALL_LOG_BLOCK_REPORT_SPAM_SENT_VIA_BLOCK_NUMBER_DIALOG = 1011;</code>
         */
        public static final int REPORT_CALL_AS_SPAM_VIA_CALL_LOG_BLOCK_REPORT_SPAM_SENT_VIA_BLOCK_NUMBER_DIALOG_VALUE = 1011;
        /**
         * <pre>
         * User made it to the last step and actually blocked the number
         * </pre>
         *
         * <code>USER_ACTION_BLOCKED_NUMBER = 1012;</code>
         */
        public static final int USER_ACTION_BLOCKED_NUMBER_VALUE = 1012;
        /**
         * <pre>
         * User made it to the last step but blocking failed because user is
         * secondary or dialer is not default
         * </pre>
         *
         * <code>USER_ACTION_BLOCK_NUMBER_FAILED = 1369;</code>
         */
        public static final int USER_ACTION_BLOCK_NUMBER_FAILED_VALUE = 1369;
        /**
         * <pre>
         * User made it to the last step and actually unblocked the number
         * </pre>
         *
         * <code>USER_ACTION_UNBLOCKED_NUMBER = 1013;</code>
         */
        public static final int USER_ACTION_UNBLOCKED_NUMBER_VALUE = 1013;
        /**
         * <pre>
         * User made it to the last step but unblocking failed because user is
         * secondary or dialer is not default
         * </pre>
         *
         * <code>USER_ACTION_UNBLOCK_NUMBER_FAILED = 1370;</code>
         */
        public static final int USER_ACTION_UNBLOCK_NUMBER_FAILED_VALUE = 1370;
        /**
         * <pre>
         * User blocked a number, does not guarantee if the number was reported as
         * spam or not To compute the number of blocked numbers that were reported
         * as not spam and yet blocked Subtract this value from
         * SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM. It would be
         * interesting to see how this value compares with
         * SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_BLOCK_NUMBER = 1014;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_BLOCK_NUMBER_VALUE = 1014;
        /**
         * <pre>
         * Displays the dialog for first time spam calls with actions "Not spam",
         * "Block", and "Dismiss".
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_SHOW_SPAM_DIALOG = 1015;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_SHOW_SPAM_DIALOG_VALUE = 1015;
        /**
         * <pre>
         * Displays the dialog for the first time unknown calls with actions "Add
         * contact", "Block/report spam", and "Dismiss".
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_SHOW_NON_SPAM_DIALOG = 1016;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_SHOW_NON_SPAM_DIALOG_VALUE = 1016;
        /**
         * <pre>
         * User added the number to contacts from the after call notification
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_ADD_TO_CONTACTS = 1019;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_ADD_TO_CONTACTS_VALUE = 1019;
        /**
         * <pre>
         * User marked the number as spam on the after call notification flow
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM = 1020;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM_VALUE = 1020;
        /**
         * <code>SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_NOT_SPAM_AND_BLOCKED = 1021;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_NOT_SPAM_AND_BLOCKED_VALUE = 1021;
        /**
         * <pre>
         * User reported the number as not spam
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM = 1022;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM_VALUE = 1022;
        /**
         * <pre>
         * User dismissed the spam notification
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_SPAM_DIALOG = 1024;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_SPAM_DIALOG_VALUE = 1024;
        /**
         * <pre>
         * User dismissed the non spam notification
         * </pre>
         *
         * <code>SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_NON_SPAM_DIALOG = 1025;</code>
         */
        public static final int SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_NON_SPAM_DIALOG_VALUE = 1025;
        /**
         * <pre>
         * From the service instead of an activity logs the number of times the
         * number was marked as Spam by the user (e.g from the feedback prompt)
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_SPAM = 1026;</code>
         */
        public static final int SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_SPAM_VALUE = 1026;
        /**
         * <pre>
         * From the service instead of an activity logs the number of times the
         * number was marked as Not Spam by the user (e.g from the feedback prompt)
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_NOT_SPAM = 1027;</code>
         */
        public static final int SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_NOT_SPAM_VALUE = 1027;
        /**
         * <pre>
         * User is in a active call i.e either incoming or outgoing
         * This is mainly so we can assign an impression event to a call event i.e
         * so that we may be able to stitch different types of events if they make
         * sense e.g user pressed a speaker button and we want to associate that to
         * a call event
         * </pre>
         *
         * <code>USER_PARTICIPATED_IN_A_CALL = 1028;</code>
         */
        public static final int USER_PARTICIPATED_IN_A_CALL_VALUE = 1028;
        /**
         * <pre>
         * Incoming call is a spam call
         * </pre>
         *
         * <code>INCOMING_SPAM_CALL = 1029;</code>
         */
        public static final int INCOMING_SPAM_CALL_VALUE = 1029;
        /**
         * <pre>
         * Incoming call is a non spam call
         * </pre>
         *
         * <code>INCOMING_NON_SPAM_CALL = 1030;</code>
         */
        public static final int INCOMING_NON_SPAM_CALL_VALUE = 1030;
        /**
         * <pre>
         * Spam notifications shown despite throttling
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE = 1041;</code>
         */
        public static final int SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE_VALUE = 1041;
        /**
         * <pre>
         * Spam notifications not shown due to throttling
         * </pre>
         *
         * <code>SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE = 1042;</code>
         */
        public static final int SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE_VALUE = 1042;
        /**
         * <pre>
         * Non spam notifications shown despite throttling
         * </pre>
         *
         * <code>NON_SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE = 1043;</code>
         */
        public static final int NON_SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE_VALUE = 1043;
        /**
         * <pre>
         * Non spam notifications not shown due to throttling
         * </pre>
         *
         * <code>NON_SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE = 1044;</code>
         */
        public static final int NON_SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE_VALUE = 1044;
        /**
         * <pre>
         * Voicemail status has updated in the voicemail tab and the change PIN
         * prompt is shown.
         * </pre>
         *
         * <code>VOICEMAIL_ALERT_SET_PIN_SHOWN = 1045;</code>
         */
        public static final int VOICEMAIL_ALERT_SET_PIN_SHOWN_VALUE = 1045;
        /**
         * <pre>
         * User has clicked the change PIN action in the voicemail tab
         * </pre>
         *
         * <code>VOICEMAIL_ALERT_SET_PIN_CLICKED = 1046;</code>
         */
        public static final int VOICEMAIL_ALERT_SET_PIN_CLICKED_VALUE = 1046;
        /**
         * <pre>
         * User was not able to or did not participate in the call e.g missed calls,
         * rejected calls
         * </pre>
         *
         * <code>USER_DID_NOT_PARTICIPATE_IN_CALL = 1047;</code>
         */
        public static final int USER_DID_NOT_PARTICIPATE_IN_CALL_VALUE = 1047;
        /**
         * <pre>
         * User deleted a call log entry
         * </pre>
         *
         * <code>USER_DELETED_CALL_LOG_ITEM = 1048;</code>
         */
        public static final int USER_DELETED_CALL_LOG_ITEM_VALUE = 1048;
        /**
         * <pre>
         * User tapped on "Send a message"
         * </pre>
         *
         * <code>CALL_LOG_SEND_MESSAGE = 1049;</code>
         */
        public static final int CALL_LOG_SEND_MESSAGE_VALUE = 1049;
        /**
         * <pre>
         * User tapped on "Add to contact"
         * </pre>
         *
         * <code>CALL_LOG_ADD_TO_CONTACT = 1050;</code>
         */
        public static final int CALL_LOG_ADD_TO_CONTACT_VALUE = 1050;
        /**
         * <pre>
         * User tapped on "Create new contact"
         * </pre>
         *
         * <code>CALL_LOG_CREATE_NEW_CONTACT = 1051;</code>
         */
        public static final int CALL_LOG_CREATE_NEW_CONTACT_VALUE = 1051;
        /**
         * <pre>
         * User deleted an entry from the voicemail tab
         * </pre>
         *
         * <code>VOICEMAIL_DELETE_ENTRY = 1052;</code>
         */
        public static final int VOICEMAIL_DELETE_ENTRY_VALUE = 1052;
        /**
         * <pre>
         * Voicemail call log entry was expanded. Could be either if the user tapped
         * the voicemail call log entry or pressed the play button when the
         * voicemail call log entry was not expanded
         * </pre>
         *
         * <code>VOICEMAIL_EXPAND_ENTRY = 1053;</code>
         */
        public static final int VOICEMAIL_EXPAND_ENTRY_VALUE = 1053;
        /**
         * <pre>
         * The play button for voicemail call log entry was tapped directly (i.e
         * when the voicemail call log entry was not expanded and the playbutton was
         * tapped)
         * </pre>
         *
         * <code>VOICEMAIL_PLAY_AUDIO_DIRECTLY = 1054;</code>
         */
        public static final int VOICEMAIL_PLAY_AUDIO_DIRECTLY_VALUE = 1054;
        /**
         * <pre>
         * The play button after expanding the voicemail call log entry was tapped
         * </pre>
         *
         * <code>VOICEMAIL_PLAY_AUDIO_AFTER_EXPANDING_ENTRY = 1055;</code>
         */
        public static final int VOICEMAIL_PLAY_AUDIO_AFTER_EXPANDING_ENTRY_VALUE = 1055;
        /**
         * <pre>
         * Incoming call was rejected from the notifications
         * </pre>
         *
         * <code>REJECT_INCOMING_CALL_FROM_NOTIFICATION = 1056;</code>
         */
        public static final int REJECT_INCOMING_CALL_FROM_NOTIFICATION_VALUE = 1056;
        /**
         * <pre>
         * Incoming call was rejected from the answer screen including rejecting via
         * sms and talkback
         * </pre>
         *
         * <code>REJECT_INCOMING_CALL_FROM_ANSWER_SCREEN = 1057;</code>
         */
        public static final int REJECT_INCOMING_CALL_FROM_ANSWER_SCREEN_VALUE = 1057;
        /**
         * <pre>
         * User tapped block and spam buttons in context menu, same as buttons in
         * call log drop down
         * menu (See 1004-1007).
         * </pre>
         *
         * <code>CALL_LOG_CONTEXT_MENU_BLOCK_REPORT_SPAM = 1058;</code>
         */
        public static final int CALL_LOG_CONTEXT_MENU_BLOCK_REPORT_SPAM_VALUE = 1058;
        /**
         * <code>CALL_LOG_CONTEXT_MENU_BLOCK_NUMBER = 1059;</code>
         */
        public static final int CALL_LOG_CONTEXT_MENU_BLOCK_NUMBER_VALUE = 1059;
        /**
         * <code>CALL_LOG_CONTEXT_MENU_UNBLOCK_NUMBER = 1060;</code>
         */
        public static final int CALL_LOG_CONTEXT_MENU_UNBLOCK_NUMBER_VALUE = 1060;
        /**
         * <code>CALL_LOG_CONTEXT_MENU_REPORT_AS_NOT_SPAM = 1061;</code>
         */
        public static final int CALL_LOG_CONTEXT_MENU_REPORT_AS_NOT_SPAM_VALUE = 1061;
        /**
         * <code>NEW_CONTACT_OVERFLOW = 1062;</code>
         */
        public static final int NEW_CONTACT_OVERFLOW_VALUE = 1062;
        /**
         * <code>NEW_CONTACT_FAB = 1063;</code>
         */
        public static final int NEW_CONTACT_FAB_VALUE = 1063;
        /**
         * <pre>
         * The ToS is shown the user
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_SHOWN = 1064;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_SHOWN_VALUE = 1064;
        /**
         * <pre>
         * The user has accepted the ToS
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_ACCEPTED = 1065;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_ACCEPTED_VALUE = 1065;
        /**
         * <pre>
         * The user has went through the decline ToS dialog and VVM is disabled
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_DECLINED = 1066;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_DECLINED_VALUE = 1066;
        /**
         * <pre>
         * The user has clicked the decline ToS button, and a conformation dialog
         * was shown
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_DECLINE_CLICKED = 1067;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_DECLINE_CLICKED_VALUE = 1067;
        /**
         * <pre>
         * The use has clicked the decline ToS button but the PIN has been
         * randomized. A dialog to instruct the user to set the PIN has been shown
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN = 1068;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN_VALUE = 1068;
        /**
         * <pre>
         * The user does not have a permission and are presented with a
         * non-framework UI to request permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_DISPLAYED = 1069;</code>
         */
        public static final int STORAGE_PERMISSION_DISPLAYED_VALUE = 1069;
        /**
         * <code>CAMERA_PERMISSION_DISPLAYED = 1074;</code>
         */
        public static final int CAMERA_PERMISSION_DISPLAYED_VALUE = 1074;
        /**
         * <pre>
         * The user is being shown the Android framework UI to request a permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_REQUESTED = 1070;</code>
         */
        public static final int STORAGE_PERMISSION_REQUESTED_VALUE = 1070;
        /**
         * <code>CAMERA_PERMISSION_REQUESTED = 1075;</code>
         */
        public static final int CAMERA_PERMISSION_REQUESTED_VALUE = 1075;
        /**
         * <pre>
         * The user has permenantly denied a permission, so the user is being
         * sent to dialer settings to grant permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_SETTINGS = 1071;</code>
         */
        public static final int STORAGE_PERMISSION_SETTINGS_VALUE = 1071;
        /**
         * <code>CAMERA_PERMISSION_SETTINGS = 1076;</code>
         */
        public static final int CAMERA_PERMISSION_SETTINGS_VALUE = 1076;
        /**
         * <pre>
         * The user granted a permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_GRANTED = 1072;</code>
         */
        public static final int STORAGE_PERMISSION_GRANTED_VALUE = 1072;
        /**
         * <code>CAMERA_PERMISSION_GRANTED = 1077;</code>
         */
        public static final int CAMERA_PERMISSION_GRANTED_VALUE = 1077;
        /**
         * <pre>
         * The user denied a permission.
         * </pre>
         *
         * <code>STORAGE_PERMISSION_DENIED = 1073;</code>
         */
        public static final int STORAGE_PERMISSION_DENIED_VALUE = 1073;
        /**
         * <code>CAMERA_PERMISSION_DENIED = 1078;</code>
         */
        public static final int CAMERA_PERMISSION_DENIED_VALUE = 1078;
        /**
         * <pre>
         * Voicemail config corruption is detected when in dialtacts activity.
         * </pre>
         *
         * <code>VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_ACTIVITY = 1079;</code>
         */
        public static final int VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_ACTIVITY_VALUE = 1079;
        /**
         * <pre>
         * Voicemail config corruption is detected when a new voicemail notification
         * has arrived.
         * </pre>
         *
         * <code>VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_NOTIFICATION = 1080;</code>
         */
        public static final int VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_NOTIFICATION_VALUE = 1080;
        /**
         * <pre>
         * Android Auto Backup and Restore (Dolly)
         * </pre>
         *
         * <code>BACKUP_ON_BACKUP = 1081 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_BACKUP_VALUE = 1081;
        /**
         * <code>BACKUP_ON_FULL_BACKUP = 1082 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_FULL_BACKUP_VALUE = 1082;
        /**
         * <code>BACKUP_ON_BACKUP_DISABLED = 1083 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_BACKUP_DISABLED_VALUE = 1083;
        /**
         * <code>BACKUP_VOICEMAIL_BACKED_UP = 1084 [deprecated = true];</code>
         */
        public static final int BACKUP_VOICEMAIL_BACKED_UP_VALUE = 1084;
        /**
         * <code>BACKUP_FULL_BACKED_UP = 1085 [deprecated = true];</code>
         */
        public static final int BACKUP_FULL_BACKED_UP_VALUE = 1085;
        /**
         * <code>BACKUP_ON_BACKUP_JSON_EXCEPTION = 1086 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_BACKUP_JSON_EXCEPTION_VALUE = 1086;
        /**
         * <code>BACKUP_ON_QUOTA_EXCEEDED = 1087 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_QUOTA_EXCEEDED_VALUE = 1087;
        /**
         * <code>BACKUP_ON_RESTORE = 1088 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_RESTORE_VALUE = 1088;
        /**
         * <code>BACKUP_RESTORED_FILE = 1089 [deprecated = true];</code>
         */
        public static final int BACKUP_RESTORED_FILE_VALUE = 1089;
        /**
         * <code>BACKUP_RESTORED_VOICEMAIL = 1090 [deprecated = true];</code>
         */
        public static final int BACKUP_RESTORED_VOICEMAIL_VALUE = 1090;
        /**
         * <code>BACKUP_ON_RESTORE_FINISHED = 1091 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_RESTORE_FINISHED_VALUE = 1091;
        /**
         * <code>BACKUP_ON_RESTORE_DISABLED = 1092 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_RESTORE_DISABLED_VALUE = 1092;
        /**
         * <code>BACKUP_ON_RESTORE_JSON_EXCEPTION = 1093 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_RESTORE_JSON_EXCEPTION_VALUE = 1093;
        /**
         * <code>BACKUP_ON_RESTORE_IO_EXCEPTION = 1094 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_RESTORE_IO_EXCEPTION_VALUE = 1094;
        /**
         * <code>BACKUP_MAX_VM_BACKUP_REACHED = 1095 [deprecated = true];</code>
         */
        public static final int BACKUP_MAX_VM_BACKUP_REACHED_VALUE = 1095;
        /**
         * <code>EVENT_ANSWER_HINT_ACTIVATED = 1096;</code>
         */
        public static final int EVENT_ANSWER_HINT_ACTIVATED_VALUE = 1096;
        /**
         * <code>EVENT_ANSWER_HINT_DEACTIVATED = 1097;</code>
         */
        public static final int EVENT_ANSWER_HINT_DEACTIVATED_VALUE = 1097;
        /**
         * <code>VVM_TAB_VIEWED = 1098;</code>
         */
        public static final int VVM_TAB_VIEWED_VALUE = 1098;
        /**
         * <code>VVM_SHARE_VISIBLE = 1099;</code>
         */
        public static final int VVM_SHARE_VISIBLE_VALUE = 1099;
        /**
         * <code>VVM_SHARE_PRESSED = 1100;</code>
         */
        public static final int VVM_SHARE_PRESSED_VALUE = 1100;
        /**
         * <code>OUTGOING_VIDEO_CALL = 1101;</code>
         */
        public static final int OUTGOING_VIDEO_CALL_VALUE = 1101;
        /**
         * <code>INCOMING_VIDEO_CALL = 1102;</code>
         */
        public static final int INCOMING_VIDEO_CALL_VALUE = 1102;
        /**
         * <code>USER_PARTICIPATED_IN_A_VIDEO_CALL = 1103;</code>
         */
        public static final int USER_PARTICIPATED_IN_A_VIDEO_CALL_VALUE = 1103;
        /**
         * <code>BACKUP_ON_RESTORE_VM_DUPLICATE_NOT_RESTORING = 1104 [deprecated = true];</code>
         */
        public static final int BACKUP_ON_RESTORE_VM_DUPLICATE_NOT_RESTORING_VALUE = 1104;
        /**
         * <pre>
         * User tapped the 'Share and call' button to start the call composer
         * </pre>
         *
         * <code>CALL_LOG_SHARE_AND_CALL = 1105;</code>
         */
        public static final int CALL_LOG_SHARE_AND_CALL_VALUE = 1105;
        /**
         * <code>CALL_COMPOSER_ACTIVITY_PLACE_RCS_CALL = 1106;</code>
         */
        public static final int CALL_COMPOSER_ACTIVITY_PLACE_RCS_CALL_VALUE = 1106;
        /**
         * <code>CALL_COMPOSER_ACTIVITY_SEND_AND_CALL_PRESSED_WHEN_SESSION_NOT_READY = 1107;</code>
         */
        public static final int CALL_COMPOSER_ACTIVITY_SEND_AND_CALL_PRESSED_WHEN_SESSION_NOT_READY_VALUE = 1107;
        /**
         * <code>POST_CALL_PROMPT_USER_TO_SEND_MESSAGE_CLICKED = 1108;</code>
         */
        public static final int POST_CALL_PROMPT_USER_TO_SEND_MESSAGE_CLICKED_VALUE = 1108;
        /**
         * <code>POST_CALL_PROMPT_USER_TO_SEND_MESSAGE = 1109;</code>
         */
        public static final int POST_CALL_PROMPT_USER_TO_SEND_MESSAGE_VALUE = 1109;
        /**
         * <code>POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE = 1110;</code>
         */
        public static final int POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE_VALUE = 1110;
        /**
         * <code>POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE_CLICKED = 1111;</code>
         */
        public static final int POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE_CLICKED_VALUE = 1111;
        /**
         * <code>IN_CALL_SCREEN_TURN_ON_MUTE = 1112;</code>
         */
        public static final int IN_CALL_SCREEN_TURN_ON_MUTE_VALUE = 1112;
        /**
         * <code>IN_CALL_SCREEN_TURN_OFF_MUTE = 1113;</code>
         */
        public static final int IN_CALL_SCREEN_TURN_OFF_MUTE_VALUE = 1113;
        /**
         * <code>IN_CALL_SCREEN_SWAP_CAMERA = 1114;</code>
         */
        public static final int IN_CALL_SCREEN_SWAP_CAMERA_VALUE = 1114;
        /**
         * <code>IN_CALL_SCREEN_TURN_ON_VIDEO = 1115;</code>
         */
        public static final int IN_CALL_SCREEN_TURN_ON_VIDEO_VALUE = 1115;
        /**
         * <code>IN_CALL_SCREEN_TURN_OFF_VIDEO = 1116;</code>
         */
        public static final int IN_CALL_SCREEN_TURN_OFF_VIDEO_VALUE = 1116;
        /**
         * <code>VIDEO_CALL_WITH_INCOMING_VOICE_CALL = 1117;</code>
         */
        public static final int VIDEO_CALL_WITH_INCOMING_VOICE_CALL_VALUE = 1117;
        /**
         * <code>VIDEO_CALL_WITH_INCOMING_VIDEO_CALL = 1118;</code>
         */
        public static final int VIDEO_CALL_WITH_INCOMING_VIDEO_CALL_VALUE = 1118;
        /**
         * <code>VOICE_CALL_WITH_INCOMING_VOICE_CALL = 1119;</code>
         */
        public static final int VOICE_CALL_WITH_INCOMING_VOICE_CALL_VALUE = 1119;
        /**
         * <code>VOICE_CALL_WITH_INCOMING_VIDEO_CALL = 1120;</code>
         */
        public static final int VOICE_CALL_WITH_INCOMING_VIDEO_CALL_VALUE = 1120;
        /**
         * <code>CALL_DETAILS_COPY_NUMBER = 1121;</code>
         */
        public static final int CALL_DETAILS_COPY_NUMBER_VALUE = 1121;
        /**
         * <code>CALL_DETAILS_EDIT_BEFORE_CALL = 1122;</code>
         */
        public static final int CALL_DETAILS_EDIT_BEFORE_CALL_VALUE = 1122;
        /**
         * <code>CALL_DETAILS_CALL_BACK = 1123 [deprecated = true];</code>
         */
        public static final int CALL_DETAILS_CALL_BACK_VALUE = 1123;
        /**
         * <code>VVM_USER_DISMISSED_VM_ALMOST_FULL_PROMO = 1124;</code>
         */
        public static final int VVM_USER_DISMISSED_VM_ALMOST_FULL_PROMO_VALUE = 1124;
        /**
         * <code>VVM_USER_DISMISSED_VM_FULL_PROMO = 1125;</code>
         */
        public static final int VVM_USER_DISMISSED_VM_FULL_PROMO_VALUE = 1125;
        /**
         * <code>VVM_USER_ENABLED_ARCHIVE_FROM_VM_ALMOST_FULL_PROMO = 1126;</code>
         */
        public static final int VVM_USER_ENABLED_ARCHIVE_FROM_VM_ALMOST_FULL_PROMO_VALUE = 1126;
        /**
         * <code>VVM_USER_ENABLED_ARCHIVE_FROM_VM_FULL_PROMO = 1127;</code>
         */
        public static final int VVM_USER_ENABLED_ARCHIVE_FROM_VM_FULL_PROMO_VALUE = 1127;
        /**
         * <code>VVM_USER_SHOWN_VM_ALMOST_FULL_PROMO = 1128;</code>
         */
        public static final int VVM_USER_SHOWN_VM_ALMOST_FULL_PROMO_VALUE = 1128;
        /**
         * <code>VVM_USER_SHOWN_VM_FULL_PROMO = 1129;</code>
         */
        public static final int VVM_USER_SHOWN_VM_FULL_PROMO_VALUE = 1129;
        /**
         * <code>VVM_USER_SHOWN_VM_ALMOST_FULL_ERROR_MESSAGE = 1130;</code>
         */
        public static final int VVM_USER_SHOWN_VM_ALMOST_FULL_ERROR_MESSAGE_VALUE = 1130;
        /**
         * <code>VVM_USER_SHOWN_VM_FULL_ERROR_MESSAGE = 1131;</code>
         */
        public static final int VVM_USER_SHOWN_VM_FULL_ERROR_MESSAGE_VALUE = 1131;
        /**
         * <code>VVM_USER_TURNED_ARCHIVE_ON_FROM_SETTINGS = 1132;</code>
         */
        public static final int VVM_USER_TURNED_ARCHIVE_ON_FROM_SETTINGS_VALUE = 1132;
        /**
         * <code>VVM_USER_TURNED_ARCHIVE_OFF_FROM_SETTINGS = 1133;</code>
         */
        public static final int VVM_USER_TURNED_ARCHIVE_OFF_FROM_SETTINGS_VALUE = 1133;
        /**
         * <code>VVM_ARCHIVE_AUTO_DELETED_VM_FROM_SERVER = 1134;</code>
         */
        public static final int VVM_ARCHIVE_AUTO_DELETED_VM_FROM_SERVER_VALUE = 1134;
        /**
         * <code>VVM_ARCHIVE_AUTO_DELETE_TURNED_OFF = 1135;</code>
         */
        public static final int VVM_ARCHIVE_AUTO_DELETE_TURNED_OFF_VALUE = 1135;
        /**
         * <code>VVM_TAB_VISIBLE = 1136;</code>
         */
        public static final int VVM_TAB_VISIBLE_VALUE = 1136;
        /**
         * <code>VVM_UNBUNDLED_EVENT_RECEIVED = 1137;</code>
         */
        public static final int VVM_UNBUNDLED_EVENT_RECEIVED_VALUE = 1137;
        /**
         * <code>VVM_ACTIVATION_STARTED = 1138;</code>
         */
        public static final int VVM_ACTIVATION_STARTED_VALUE = 1138;
        /**
         * <code>VVM_ACTIVATION_COMPLETED = 1139;</code>
         */
        public static final int VVM_ACTIVATION_COMPLETED_VALUE = 1139;
        /**
         * <code>VVM_AUTO_RETRY_ACTIVATION = 1140;</code>
         */
        public static final int VVM_AUTO_RETRY_ACTIVATION_VALUE = 1140;
        /**
         * <code>VVM_PROVISIONING_STARTED = 1141;</code>
         */
        public static final int VVM_PROVISIONING_STARTED_VALUE = 1141;
        /**
         * <code>VVM_PROVISIONING_COMPLETED = 1142;</code>
         */
        public static final int VVM_PROVISIONING_COMPLETED_VALUE = 1142;
        /**
         * <code>VVM_SYNC_STARTED = 1143;</code>
         */
        public static final int VVM_SYNC_STARTED_VALUE = 1143;
        /**
         * <code>VVM_SYNC_COMPLETED = 1144;</code>
         */
        public static final int VVM_SYNC_COMPLETED_VALUE = 1144;
        /**
         * <code>VVM_AUTO_RETRY_SYNC = 1145;</code>
         */
        public static final int VVM_AUTO_RETRY_SYNC_VALUE = 1145;
        /**
         * <code>VVM_USER_RETRY = 1146;</code>
         */
        public static final int VVM_USER_RETRY_VALUE = 1146;
        /**
         * <code>VVM_USER_SYNC = 1147;</code>
         */
        public static final int VVM_USER_SYNC_VALUE = 1147;
        /**
         * <code>VVM_SETTINGS_VIEWED = 1148;</code>
         */
        public static final int VVM_SETTINGS_VIEWED_VALUE = 1148;
        /**
         * <code>VVM_CHANGE_PIN_CLICKED = 1149;</code>
         */
        public static final int VVM_CHANGE_PIN_CLICKED_VALUE = 1149;
        /**
         * <code>VVM_CHANGE_PIN_COMPLETED = 1150;</code>
         */
        public static final int VVM_CHANGE_PIN_COMPLETED_VALUE = 1150;
        /**
         * <code>VVM_CHANGE_RINGTONE_CLICKED = 1151 [deprecated = true];</code>
         */
        public static final int VVM_CHANGE_RINGTONE_CLICKED_VALUE = 1151;
        /**
         * <code>VVM_CHANGE_VIBRATION_CLICKED = 1152;</code>
         */
        public static final int VVM_CHANGE_VIBRATION_CLICKED_VALUE = 1152;
        /**
         * <code>VVM_USER_ENABLED_IN_SETTINGS = 1153;</code>
         */
        public static final int VVM_USER_ENABLED_IN_SETTINGS_VALUE = 1153;
        /**
         * <code>VVM_USER_DISABLED_IN_SETTINGS = 1154;</code>
         */
        public static final int VVM_USER_DISABLED_IN_SETTINGS_VALUE = 1154;
        /**
         * <code>VVM_ADVANCED_SETINGS_CLICKED = 1155;</code>
         */
        public static final int VVM_ADVANCED_SETINGS_CLICKED_VALUE = 1155;
        /**
         * <code>VVM_NOTIFICATION_CLICKED = 1156;</code>
         */
        public static final int VVM_NOTIFICATION_CLICKED_VALUE = 1156;
        /**
         * <code>VVM_NOTIFICATION_CREATED = 1157;</code>
         */
        public static final int VVM_NOTIFICATION_CREATED_VALUE = 1157;
        /**
         * <code>VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION = 1158;</code>
         */
        public static final int VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION_VALUE = 1158;
        /**
         * <code>VVM_TRANSCRIPTION_DOWNLOADED = 1159;</code>
         */
        public static final int VVM_TRANSCRIPTION_DOWNLOADED_VALUE = 1159;
        /**
         * <code>VVM_CHANGE_AIRPLANE_MODE_CLICKED = 1160;</code>
         */
        public static final int VVM_CHANGE_AIRPLANE_MODE_CLICKED_VALUE = 1160;
        /**
         * <code>VVM_CALL_VOICEMAIL_CLICKED = 1161;</code>
         */
        public static final int VVM_CALL_VOICEMAIL_CLICKED_VALUE = 1161;
        /**
         * <code>VVM_QUOTA_CHECK_UNAVAILABLE = 1162;</code>
         */
        public static final int VVM_QUOTA_CHECK_UNAVAILABLE_VALUE = 1162;
        /**
         * <pre>
         * Emergency location impressions
         * </pre>
         *
         * <code>EMERGENCY_NEW_EMERGENCY_CALL = 1163;</code>
         */
        public static final int EMERGENCY_NEW_EMERGENCY_CALL_VALUE = 1163;
        /**
         * <code>EMERGENCY_CALLBACK = 1164;</code>
         */
        public static final int EMERGENCY_CALLBACK_VALUE = 1164;
        /**
         * <code>EMERGENCY_NO_LOCATION_PERMISSION = 1165;</code>
         */
        public static final int EMERGENCY_NO_LOCATION_PERMISSION_VALUE = 1165;
        /**
         * <code>EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION = 1166;</code>
         */
        public static final int EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION_VALUE = 1166;
        /**
         * <code>EMERGENCY_CANT_GET_LOCATION = 1167;</code>
         */
        public static final int EMERGENCY_CANT_GET_LOCATION_VALUE = 1167;
        /**
         * <code>EMERGENCY_STALE_LOCATION = 1168;</code>
         */
        public static final int EMERGENCY_STALE_LOCATION_VALUE = 1168;
        /**
         * <code>EMERGENCY_INACCURATE_LOCATION = 1169;</code>
         */
        public static final int EMERGENCY_INACCURATE_LOCATION_VALUE = 1169;
        /**
         * <code>EMERGENCY_GOT_LOCATION = 1170;</code>
         */
        public static final int EMERGENCY_GOT_LOCATION_VALUE = 1170;
        /**
         * <code>EMERGENCY_GOT_ADDRESS = 1171;</code>
         */
        public static final int EMERGENCY_GOT_ADDRESS_VALUE = 1171;
        /**
         * <code>EMERGENCY_GOT_MAP = 1172;</code>
         */
        public static final int EMERGENCY_GOT_MAP_VALUE = 1172;
        /**
         * <code>EMERGENCY_LAUNCHED_MAP = 1173;</code>
         */
        public static final int EMERGENCY_LAUNCHED_MAP_VALUE = 1173;
        /**
         * <code>VIDEO_CALL_UPGRADE_REQUESTED = 1174;</code>
         */
        public static final int VIDEO_CALL_UPGRADE_REQUESTED_VALUE = 1174;
        /**
         * <code>VIDEO_CALL_REQUEST_ACCEPTED = 1175;</code>
         */
        public static final int VIDEO_CALL_REQUEST_ACCEPTED_VALUE = 1175;
        /**
         * <code>VIDEO_CALL_REQUEST_ACCEPTED_AS_AUDIO = 1176;</code>
         */
        public static final int VIDEO_CALL_REQUEST_ACCEPTED_AS_AUDIO_VALUE = 1176;
        /**
         * <code>VIDEO_CALL_REQUEST_DECLINED = 1177;</code>
         */
        public static final int VIDEO_CALL_REQUEST_DECLINED_VALUE = 1177;
        /**
         * <code>VIDEO_CALL_REQUEST_RECEIVED = 1178;</code>
         */
        public static final int VIDEO_CALL_REQUEST_RECEIVED_VALUE = 1178;
        /**
         * <code>RCS_VIDEO_SHARE_UPGRADE_REQUESTED = 1179;</code>
         */
        public static final int RCS_VIDEO_SHARE_UPGRADE_REQUESTED_VALUE = 1179;
        /**
         * <code>RCS_VIDEO_SHARE_REQUEST_ACCEPTED = 1180;</code>
         */
        public static final int RCS_VIDEO_SHARE_REQUEST_ACCEPTED_VALUE = 1180;
        /**
         * <code>RCS_VIDEO_SHARE_REQUEST_DECLINED = 1181;</code>
         */
        public static final int RCS_VIDEO_SHARE_REQUEST_DECLINED_VALUE = 1181;
        /**
         * <code>RCS_VIDEO_SHARE_REQUEST_RECEIVED = 1182;</code>
         */
        public static final int RCS_VIDEO_SHARE_REQUEST_RECEIVED_VALUE = 1182;
        /**
         * <code>IMS_VIDEO_UPGRADE_REQUESTED = 1183;</code>
         */
        public static final int IMS_VIDEO_UPGRADE_REQUESTED_VALUE = 1183;
        /**
         * <code>IMS_VIDEO_REQUEST_ACCEPTED = 1184;</code>
         */
        public static final int IMS_VIDEO_REQUEST_ACCEPTED_VALUE = 1184;
        /**
         * <code>IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO = 1185;</code>
         */
        public static final int IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO_VALUE = 1185;
        /**
         * <code>IMS_VIDEO_REQUEST_DECLINED = 1186;</code>
         */
        public static final int IMS_VIDEO_REQUEST_DECLINED_VALUE = 1186;
        /**
         * <code>IMS_VIDEO_REQUEST_RECEIVED = 1187;</code>
         */
        public static final int IMS_VIDEO_REQUEST_RECEIVED_VALUE = 1187;
        /**
         * <code>VVM_STATUS_CHECK_READY = 1188;</code>
         */
        public static final int VVM_STATUS_CHECK_READY_VALUE = 1188;
        /**
         * <code>VVM_STATUS_CHECK_REACTIVATION = 1189;</code>
         */
        public static final int VVM_STATUS_CHECK_REACTIVATION_VALUE = 1189;
        /**
         * <code>VVM_ARCHIVE_AUTO_DELETE_FAILED_DUE_TO_FAILED_QUOTA_CHECK = 1190;</code>
         */
        public static final int VVM_ARCHIVE_AUTO_DELETE_FAILED_DUE_TO_FAILED_QUOTA_CHECK_VALUE = 1190;
        /**
         * <pre>
         * User pressed the speaker phone button on the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_TURN_ON_SPEAKERPHONE = 1191;</code>
         */
        public static final int BUBBLE_TURN_ON_SPEAKERPHONE_VALUE = 1191;
        /**
         * <pre>
         * User pressed the speaker phone button again on the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_TURN_ON_WIRED_OR_EARPIECE = 1192;</code>
         */
        public static final int BUBBLE_TURN_ON_WIRED_OR_EARPIECE_VALUE = 1192;
        /**
         * <pre>
         * User muted the call from the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_MUTE_CALL = 1193;</code>
         */
        public static final int BUBBLE_MUTE_CALL_VALUE = 1193;
        /**
         * <pre>
         * User unmuted the call from the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_UNMUTE_CALL = 1194;</code>
         */
        public static final int BUBBLE_UNMUTE_CALL_VALUE = 1194;
        /**
         * <pre>
         * User ended the call from the return-to-call bubble
         * </pre>
         *
         * <code>BUBBLE_END_CALL = 1195;</code>
         */
        public static final int BUBBLE_END_CALL_VALUE = 1195;
        /**
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FROM_SEARCH = 1196;</code>
         */
        public static final int LIGHTBRINGER_VIDEO_REQUESTED_FROM_SEARCH_VALUE = 1196;
        /**
         * <pre>
         * Including call history
         * </pre>
         *
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FROM_CALL_LOG = 1197;</code>
         */
        public static final int LIGHTBRINGER_VIDEO_REQUESTED_FROM_CALL_LOG_VALUE = 1197;
        /**
         * <code>IMS_VIDEO_REQUESTED_FROM_SEARCH = 1198;</code>
         */
        public static final int IMS_VIDEO_REQUESTED_FROM_SEARCH_VALUE = 1198;
        /**
         * <pre>
         * Including call history
         * </pre>
         *
         * <code>IMS_VIDEO_REQUESTED_FROM_CALL_LOG = 1199;</code>
         */
        public static final int IMS_VIDEO_REQUESTED_FROM_CALL_LOG_VALUE = 1199;
        /**
         * <pre>
         * Multi select impressions
         * </pre>
         *
         * <code>MULTISELECT_LONG_PRESS_ENTER_MULTI_SELECT_MODE = 1200;</code>
         */
        public static final int MULTISELECT_LONG_PRESS_ENTER_MULTI_SELECT_MODE_VALUE = 1200;
        /**
         * <code>MULTISELECT_LONG_PRESS_TAP_ENTRY = 1201;</code>
         */
        public static final int MULTISELECT_LONG_PRESS_TAP_ENTRY_VALUE = 1201;
        /**
         * <code>MULTISELECT_SINGLE_PRESS_SELECT_ENTRY = 1202;</code>
         */
        public static final int MULTISELECT_SINGLE_PRESS_SELECT_ENTRY_VALUE = 1202;
        /**
         * <code>MULTISELECT_SINGLE_PRESS_UNSELECT_ENTRY = 1203;</code>
         */
        public static final int MULTISELECT_SINGLE_PRESS_UNSELECT_ENTRY_VALUE = 1203;
        /**
         * <code>MULTISELECT_SINGLE_PRESS_TAP_VIA_CONTACT_BADGE = 1204;</code>
         */
        public static final int MULTISELECT_SINGLE_PRESS_TAP_VIA_CONTACT_BADGE_VALUE = 1204;
        /**
         * <code>MULTISELECT_SELECT_ALL = 1205;</code>
         */
        public static final int MULTISELECT_SELECT_ALL_VALUE = 1205;
        /**
         * <code>MULTISELECT_UNSELECT_ALL = 1206;</code>
         */
        public static final int MULTISELECT_UNSELECT_ALL_VALUE = 1206;
        /**
         * <code>MULTISELECT_TAP_DELETE_ICON = 1207;</code>
         */
        public static final int MULTISELECT_TAP_DELETE_ICON_VALUE = 1207;
        /**
         * <code>MULTISELECT_DISPLAY_DELETE_CONFIRMATION_DIALOG = 1208;</code>
         */
        public static final int MULTISELECT_DISPLAY_DELETE_CONFIRMATION_DIALOG_VALUE = 1208;
        /**
         * <code>MULTISELECT_DELETE_ENTRY_VIA_CONFIRMATION_DIALOG = 1209;</code>
         */
        public static final int MULTISELECT_DELETE_ENTRY_VIA_CONFIRMATION_DIALOG_VALUE = 1209;
        /**
         * <code>MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_BUTTON = 1210;</code>
         */
        public static final int MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_BUTTON_VALUE = 1210;
        /**
         * <code>MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_TOUCH = 1211;</code>
         */
        public static final int MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_TOUCH_VALUE = 1211;
        /**
         * <code>MULTISELECT_ROTATE_AND_SHOW_ACTION_MODE = 1212;</code>
         */
        public static final int MULTISELECT_ROTATE_AND_SHOW_ACTION_MODE_VALUE = 1212;
        /**
         * <pre>
         * Impressions for verizon VVM with backup and transcription ToS
         * </pre>
         *
         * <code>VOICEMAIL_VVM3_TOS_V2_CREATED = 1213;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_V2_CREATED_VALUE = 1213;
        /**
         * <code>VOICEMAIL_VVM3_TOS_V2_ACCEPTED = 1214;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_V2_ACCEPTED_VALUE = 1214;
        /**
         * <code>VOICEMAIL_VVM3_TOS_V2_DECLINE_CLICKED = 1215;</code>
         */
        public static final int VOICEMAIL_VVM3_TOS_V2_DECLINE_CLICKED_VALUE = 1215;
        /**
         * <pre>
         * Impressions for dialer voicemail with backup and transcription ToS
         * </pre>
         *
         * <code>VOICEMAIL_DIALER_TOS_CREATED = 1216;</code>
         */
        public static final int VOICEMAIL_DIALER_TOS_CREATED_VALUE = 1216;
        /**
         * <code>VOICEMAIL_DIALER_TOS_ACCEPTED = 1217;</code>
         */
        public static final int VOICEMAIL_DIALER_TOS_ACCEPTED_VALUE = 1217;
        /**
         * <code>VOICEMAIL_DIALER_TOS_DECLINE_CLICKED = 1218;</code>
         */
        public static final int VOICEMAIL_DIALER_TOS_DECLINE_CLICKED_VALUE = 1218;
        /**
         * <pre>
         * Add or create contact
         * Creating new contact fab was logged as NEW_CONTACT_FAB
         * </pre>
         *
         * <code>CREATE_NEW_CONTACT_FROM_CALL_LOG = 1219;</code>
         */
        public static final int CREATE_NEW_CONTACT_FROM_CALL_LOG_VALUE = 1219;
        /**
         * <code>CREATE_NEW_CONTACT_FROM_DIALPAD = 1220;</code>
         */
        public static final int CREATE_NEW_CONTACT_FROM_DIALPAD_VALUE = 1220;
        /**
         * <code>CREATE_NEW_CONTACT_FROM_VOICEMAIL = 1221;</code>
         */
        public static final int CREATE_NEW_CONTACT_FROM_VOICEMAIL_VALUE = 1221;
        /**
         * <code>CREATE_NEW_CONTACT_FROM_CALL_HISTORY = 1222;</code>
         */
        public static final int CREATE_NEW_CONTACT_FROM_CALL_HISTORY_VALUE = 1222;
        /**
         * <code>ADD_TO_A_CONTACT_FROM_CALL_LOG = 1223;</code>
         */
        public static final int ADD_TO_A_CONTACT_FROM_CALL_LOG_VALUE = 1223;
        /**
         * <code>ADD_TO_A_CONTACT_FROM_DIALPAD = 1224;</code>
         */
        public static final int ADD_TO_A_CONTACT_FROM_DIALPAD_VALUE = 1224;
        /**
         * <code>ADD_TO_A_CONTACT_FROM_VOICEMAIL = 1225;</code>
         */
        public static final int ADD_TO_A_CONTACT_FROM_VOICEMAIL_VALUE = 1225;
        /**
         * <code>ADD_TO_A_CONTACT_FROM_CALL_HISTORY = 1226;</code>
         */
        public static final int ADD_TO_A_CONTACT_FROM_CALL_HISTORY_VALUE = 1226;
        /**
         * <pre>
         * Impressions for dialer reporting caller id as inaccurate
         * </pre>
         *
         * <code>CALLER_ID_REPORTED = 1227;</code>
         */
        public static final int CALLER_ID_REPORTED_VALUE = 1227;
        /**
         * <code>CALLER_ID_REPORT_FAILED = 1228;</code>
         */
        public static final int CALLER_ID_REPORT_FAILED_VALUE = 1228;
        /**
         * <pre>
         * Impressions for interactions with the voicemail transcription server
         * </pre>
         *
         * <code>VVM_TRANSCRIPTION_REQUEST_SENT = 1229;</code>
         */
        public static final int VVM_TRANSCRIPTION_REQUEST_SENT_VALUE = 1229;
        /**
         * <code>VVM_TRANSCRIPTION_REQUEST_RETRY = 1230;</code>
         */
        public static final int VVM_TRANSCRIPTION_REQUEST_RETRY_VALUE = 1230;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_SUCCESS = 1231;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_SUCCESS_VALUE = 1231;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_EMPTY = 1232;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_EMPTY_VALUE = 1232;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_INVALID = 1233;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_INVALID_VALUE = 1233;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_RECOVERABLE_ERROR = 1234;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_RECOVERABLE_ERROR_VALUE = 1234;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_FATAL_ERROR = 1235;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_FATAL_ERROR_VALUE = 1235;
        /**
         * <pre>
         * In in call UI
         * </pre>
         *
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN = 1236;</code>
         */
        public static final int UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_VALUE = 1236;
        /**
         * <pre>
         * Bubble primary button first click to expand bubble (by user)
         * </pre>
         *
         * <code>BUBBLE_PRIMARY_BUTTON_EXPAND = 1237;</code>
         */
        public static final int BUBBLE_PRIMARY_BUTTON_EXPAND_VALUE = 1237;
        /**
         * <pre>
         * Bubble prinary button second click to return to call
         * </pre>
         *
         * <code>BUBBLE_PRIMARY_BUTTON_RETURN_TO_CALL = 1238;</code>
         */
        public static final int BUBBLE_PRIMARY_BUTTON_RETURN_TO_CALL_VALUE = 1238;
        /**
         * <pre>
         * Dialer Key/Value Backup and Restore
         * </pre>
         *
         * <code>BACKUP_KEY_VALUE_ON_BACKUP = 1239;</code>
         */
        public static final int BACKUP_KEY_VALUE_ON_BACKUP_VALUE = 1239;
        /**
         * <code>BACKUP_KEY_VALUE_ON_RESTORE = 1240;</code>
         */
        public static final int BACKUP_KEY_VALUE_ON_RESTORE_VALUE = 1240;
        /**
         * <code>BACKUP_KEY_VALUE_ON_RESTORE_FINISHED = 1241;</code>
         */
        public static final int BACKUP_KEY_VALUE_ON_RESTORE_FINISHED_VALUE = 1241;
        /**
         * <code>BACKUP_KEY_VALUE_GET_BACKUP_SPECIFICATION = 1242;</code>
         */
        public static final int BACKUP_KEY_VALUE_GET_BACKUP_SPECIFICATION_VALUE = 1242;
        /**
         * <code>BACKUP_KEY_VALUE_BACKUP_AGENT_CONSTRUCTOR = 1243;</code>
         */
        public static final int BACKUP_KEY_VALUE_BACKUP_AGENT_CONSTRUCTOR_VALUE = 1243;
        /**
         * <pre>
         * In the in call UI
         * </pre>
         *
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_LIGHTBRINGER = 1244;</code>
         */
        public static final int UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_LIGHTBRINGER_VALUE = 1244;
        /**
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_IMS = 1245;</code>
         */
        public static final int UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_IMS_VALUE = 1245;
        /**
         * <code>UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_RCS = 1246;</code>
         */
        public static final int UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_RCS_VALUE = 1246;
        /**
         * <code>LIGHTBRINGER_UPGRADE_REQUESTED = 1247;</code>
         */
        public static final int LIGHTBRINGER_UPGRADE_REQUESTED_VALUE = 1247;
        /**
         * <pre>
         * Found Lightbringer reachable contact when launching Dialer
         * </pre>
         *
         * <code>HAS_LIGHTBRINGER_REACHABLE_CONTACTS = 1248;</code>
         */
        public static final int HAS_LIGHTBRINGER_REACHABLE_CONTACTS_VALUE = 1248;
        /**
         * <pre>
         * This impression is logged once per process when the number of
         * notifications is very high and the system may suppress future
         * notifications.
         * </pre>
         *
         * <code>HIGH_GLOBAL_NOTIFICATION_COUNT_REACHED = 1249;</code>
         */
        public static final int HIGH_GLOBAL_NOTIFICATION_COUNT_REACHED_VALUE = 1249;
        /**
         * <pre>
         * More impressions for interactions with the voicemail transcription server
         * </pre>
         *
         * <code>VVM_TRANSCRIPTION_REQUEST_SENT_ASYNC = 1250;</code>
         */
        public static final int VVM_TRANSCRIPTION_REQUEST_SENT_ASYNC_VALUE = 1250;
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_RECEIVED = 1251;</code>
         */
        public static final int VVM_TRANSCRIPTION_VOICEMAIL_RECEIVED_VALUE = 1251;
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_FORMAT_NOT_SUPPORTED = 1252;</code>
         */
        public static final int VVM_TRANSCRIPTION_VOICEMAIL_FORMAT_NOT_SUPPORTED_VALUE = 1252;
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_INVALID_DATA = 1253;</code>
         */
        public static final int VVM_TRANSCRIPTION_VOICEMAIL_INVALID_DATA_VALUE = 1253;
        /**
         * <code>VVM_TRANSCRIPTION_VOICEMAIL_UPLOAD_FAILED = 1254;</code>
         */
        public static final int VVM_TRANSCRIPTION_VOICEMAIL_UPLOAD_FAILED_VALUE = 1254;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_LANGUAGE_NOT_SUPPORTED = 1255;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_LANGUAGE_NOT_SUPPORTED_VALUE = 1255;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_NO_SPEECH_DETECTED = 1256;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_NO_SPEECH_DETECTED_VALUE = 1256;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_EXPIRED = 1257;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_EXPIRED_VALUE = 1257;
        /**
         * <code>VVM_TRANSCRIPTION_RESPONSE_TOO_MANY_ERRORS = 1258;</code>
         */
        public static final int VVM_TRANSCRIPTION_RESPONSE_TOO_MANY_ERRORS_VALUE = 1258;
        /**
         * <code>VVM_TRANSCRIPTION_POLLING_TIMEOUT = 1259;</code>
         */
        public static final int VVM_TRANSCRIPTION_POLLING_TIMEOUT_VALUE = 1259;
        /**
         * <pre>
         * Bubble collapse initiated by user, i.e. no hiding after collapse
         * </pre>
         *
         * <code>BUBBLE_COLLAPSE_BY_USER = 1260;</code>
         */
        public static final int BUBBLE_COLLAPSE_BY_USER_VALUE = 1260;
        /**
         * <pre>
         * In in-call UI
         * </pre>
         *
         * <code>IN_CALL_SHOW_DIALPAD_BUTTON_PRESSED = 1261;</code>
         */
        public static final int IN_CALL_SHOW_DIALPAD_BUTTON_PRESSED_VALUE = 1261;
        /**
         * <code>IN_CALL_ADD_CALL_BUTTON_PRESSED = 1262;</code>
         */
        public static final int IN_CALL_ADD_CALL_BUTTON_PRESSED_VALUE = 1262;
        /**
         * <code>IN_CALL_MERGE_BUTTON_PRESSED = 1263;</code>
         */
        public static final int IN_CALL_MERGE_BUTTON_PRESSED_VALUE = 1263;
        /**
         * <code>IN_CALL_SWAP_SECONDARY_BUTTON_PRESSED = 1264;</code>
         */
        public static final int IN_CALL_SWAP_SECONDARY_BUTTON_PRESSED_VALUE = 1264;
        /**
         * <pre>
         * In in-call dialpad
         * </pre>
         *
         * <code>IN_CALL_DIALPAD_NUMBER_BUTTON_PRESSED = 1265;</code>
         */
        public static final int IN_CALL_DIALPAD_NUMBER_BUTTON_PRESSED_VALUE = 1265;
        /**
         * <code>IN_CALL_DIALPAD_HANG_UP_BUTTON_PRESSED = 1266;</code>
         */
        public static final int IN_CALL_DIALPAD_HANG_UP_BUTTON_PRESSED_VALUE = 1266;
        /**
         * <code>IN_CALL_DIALPAD_CLOSE_BUTTON_PRESSED = 1267;</code>
         */
        public static final int IN_CALL_DIALPAD_CLOSE_BUTTON_PRESSED_VALUE = 1267;
        /**
         * <pre>
         * More voicemail transcription impressions
         * </pre>
         *
         * <code>VVM_NOTIFICATION_CREATED_WITH_IN_PROGRESS = 1268;</code>
         */
        public static final int VVM_NOTIFICATION_CREATED_WITH_IN_PROGRESS_VALUE = 1268;
        /**
         * <code>VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION_FAILURE = 1269;</code>
         */
        public static final int VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION_FAILURE_VALUE = 1269;
        /**
         * <code>VVM_NOTIFICATION_CREATED_WITH_NO_TRANSCRIPTION = 1270;</code>
         */
        public static final int VVM_NOTIFICATION_CREATED_WITH_NO_TRANSCRIPTION_VALUE = 1270;
        /**
         * <code>VVM_TRANSCRIPTION_JOB_STOPPED = 1271;</code>
         */
        public static final int VVM_TRANSCRIPTION_JOB_STOPPED_VALUE = 1271;
        /**
         * <code>VVM_TRANSCRIPTION_TASK_CANCELLED = 1272;</code>
         */
        public static final int VVM_TRANSCRIPTION_TASK_CANCELLED_VALUE = 1272;
        /**
         * <pre>
         * Swipe/click to switch tabs
         * </pre>
         *
         * <code>SWITCH_TAB_TO_FAVORITE_BY_SWIPE = 1273;</code>
         */
        public static final int SWITCH_TAB_TO_FAVORITE_BY_SWIPE_VALUE = 1273;
        /**
         * <code>SWITCH_TAB_TO_CALL_LOG_BY_SWIPE = 1274;</code>
         */
        public static final int SWITCH_TAB_TO_CALL_LOG_BY_SWIPE_VALUE = 1274;
        /**
         * <code>SWITCH_TAB_TO_CONTACTS_BY_SWIPE = 1275;</code>
         */
        public static final int SWITCH_TAB_TO_CONTACTS_BY_SWIPE_VALUE = 1275;
        /**
         * <code>SWITCH_TAB_TO_VOICEMAIL_BY_SWIPE = 1276;</code>
         */
        public static final int SWITCH_TAB_TO_VOICEMAIL_BY_SWIPE_VALUE = 1276;
        /**
         * <code>SWITCH_TAB_TO_FAVORITE_BY_CLICK = 1277;</code>
         */
        public static final int SWITCH_TAB_TO_FAVORITE_BY_CLICK_VALUE = 1277;
        /**
         * <code>SWITCH_TAB_TO_CALL_LOG_BY_CLICK = 1278;</code>
         */
        public static final int SWITCH_TAB_TO_CALL_LOG_BY_CLICK_VALUE = 1278;
        /**
         * <code>SWITCH_TAB_TO_CONTACTS_BY_CLICK = 1279;</code>
         */
        public static final int SWITCH_TAB_TO_CONTACTS_BY_CLICK_VALUE = 1279;
        /**
         * <code>SWITCH_TAB_TO_VOICEMAIL_BY_CLICK = 1280;</code>
         */
        public static final int SWITCH_TAB_TO_VOICEMAIL_BY_CLICK_VALUE = 1280;
        /**
         * <code>LIGHTBRINGER_NON_CONTACT_UPGRADE_REQUESTED = 1281;</code>
         */
        public static final int LIGHTBRINGER_NON_CONTACT_UPGRADE_REQUESTED_VALUE = 1281;
        /**
         * <pre>
         * Including call history
         * </pre>
         *
         * <code>LIGHTBRINGER_NON_CONTACT_VIDEO_REQUESTED_FROM_CALL_LOG = 1282;</code>
         */
        public static final int LIGHTBRINGER_NON_CONTACT_VIDEO_REQUESTED_FROM_CALL_LOG_VALUE = 1282;
        /**
         * <pre>
         * More voicemail transcription impressions
         * </pre>
         *
         * <code>VVM_TRANSCRIPTION_POLL_REQUEST = 1283;</code>
         */
        public static final int VVM_TRANSCRIPTION_POLL_REQUEST_VALUE = 1283;
        /**
         * <pre>
         * Callback impressions (with more granularity) from the call details UI
         * </pre>
         *
         * <code>CALL_DETAILS_IMS_VIDEO_CALL_BACK = 1284;</code>
         */
        public static final int CALL_DETAILS_IMS_VIDEO_CALL_BACK_VALUE = 1284;
        /**
         * <code>CALL_DETAILS_LIGHTBRINGER_CALL_BACK = 1285;</code>
         */
        public static final int CALL_DETAILS_LIGHTBRINGER_CALL_BACK_VALUE = 1285;
        /**
         * <code>CALL_DETAILS_VOICE_CALL_BACK = 1286;</code>
         */
        public static final int CALL_DETAILS_VOICE_CALL_BACK_VALUE = 1286;
        /**
         * <pre>
         * Indicates a failure to parse a provided number string in libphonenumber.
         * </pre>
         *
         * <code>ASSISTED_DIALING_CONSTRAINT_PARSING_FAILURE = 1287;</code>
         */
        public static final int ASSISTED_DIALING_CONSTRAINT_PARSING_FAILURE_VALUE = 1287;
        /**
         * <pre>
         * Indicates that the number attempting to be assisted dialed already
         * specified a country code.
         * </pre>
         *
         * <code>ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_COUNTRY_CODE = 1288;</code>
         */
        public static final int ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_COUNTRY_CODE_VALUE = 1288;
        /**
         * <pre>
         * Indicates that the number attempting to be assisted dialed had an
         * extension.
         * </pre>
         *
         * <code>ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_EXTENSION = 1289;</code>
         */
        public static final int ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_EXTENSION_VALUE = 1289;
        /**
         * <pre>
         * Indicates that the user disabled the feature.
         * </pre>
         *
         * <code>ASSISTED_DIALING_FEATURE_DISABLED_BY_USER = 1292;</code>
         */
        public static final int ASSISTED_DIALING_FEATURE_DISABLED_BY_USER_VALUE = 1292;
        /**
         * <pre>
         * User reports a same prefix call as spam from call history
         * </pre>
         *
         * <code>REPORT_SAME_PREFIX_CALL_AS_SPAM_VIA_CALL_HISTORY = 1290;</code>
         */
        public static final int REPORT_SAME_PREFIX_CALL_AS_SPAM_VIA_CALL_HISTORY_VALUE = 1290;
        /**
         * <pre>
         * User reports a same prefix call as not spam from call history
         * </pre>
         *
         * <code>REPORT_SAME_PREFIX_CALL_AS_NOT_SPAM_VIA_CALL_HISTORY = 1291;</code>
         */
        public static final int REPORT_SAME_PREFIX_CALL_AS_NOT_SPAM_VIA_CALL_HISTORY_VALUE = 1291;
        /**
         * <code>PRECALL_INITIATED = 1293;</code>
         */
        public static final int PRECALL_INITIATED_VALUE = 1293;
        /**
         * <code>PRECALL_INITIATED_EXTERNAL = 1294;</code>
         */
        public static final int PRECALL_INITIATED_EXTERNAL_VALUE = 1294;
        /**
         * <code>PRECALL_CANCELED = 1295;</code>
         */
        public static final int PRECALL_CANCELED_VALUE = 1295;
        /**
         * <code>DUAL_SIM_CHANGE_SIM_PRESSED = 1296;</code>
         */
        public static final int DUAL_SIM_CHANGE_SIM_PRESSED_VALUE = 1296;
        /**
         * <code>DUAL_SIM_SELECTION_SHOWN = 1297;</code>
         */
        public static final int DUAL_SIM_SELECTION_SHOWN_VALUE = 1297;
        /**
         * <code>DUAL_SIM_SELECTION_VOICEMAIL = 1298;</code>
         */
        public static final int DUAL_SIM_SELECTION_VOICEMAIL_VALUE = 1298;
        /**
         * <code>DUAL_SIM_SELECTION_IN_CONTACTS = 1299;</code>
         */
        public static final int DUAL_SIM_SELECTION_IN_CONTACTS_VALUE = 1299;
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTION_AVAILABLE = 1300;</code>
         */
        public static final int DUAL_SIM_SELECTION_SUGGESTION_AVAILABLE_VALUE = 1300;
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTED_CARRIER = 1301;</code>
         */
        public static final int DUAL_SIM_SELECTION_SUGGESTED_CARRIER_VALUE = 1301;
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTED_FREQUENCY = 1302;</code>
         */
        public static final int DUAL_SIM_SELECTION_SUGGESTED_FREQUENCY_VALUE = 1302;
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTED_SIM_SELECTED = 1303;</code>
         */
        public static final int DUAL_SIM_SELECTION_SUGGESTED_SIM_SELECTED_VALUE = 1303;
        /**
         * <code>DUAL_SIM_SELECTION_NON_SUGGESTED_SIM_SELECTED = 1304;</code>
         */
        public static final int DUAL_SIM_SELECTION_NON_SUGGESTED_SIM_SELECTED_VALUE = 1304;
        /**
         * <code>DUAL_SIM_SELECTION_PREFERRED_SET = 1305;</code>
         */
        public static final int DUAL_SIM_SELECTION_PREFERRED_SET_VALUE = 1305;
        /**
         * <code>DUAL_SIM_SELECTION_PREFERRED_USED = 1306;</code>
         */
        public static final int DUAL_SIM_SELECTION_PREFERRED_USED_VALUE = 1306;
        /**
         * <code>DUAL_SIM_SELECTION_PREFERRED_NOT_SELECTABLE = 1389;</code>
         */
        public static final int DUAL_SIM_SELECTION_PREFERRED_NOT_SELECTABLE_VALUE = 1389;
        /**
         * <code>DUAL_SIM_SELECTION_GLOBAL_USED = 1307;</code>
         */
        public static final int DUAL_SIM_SELECTION_GLOBAL_USED_VALUE = 1307;
        /**
         * <code>DUAL_SIM_SELECTION_GLOBAL_NOT_SELECTABLE = 1390;</code>
         */
        public static final int DUAL_SIM_SELECTION_GLOBAL_NOT_SELECTABLE_VALUE = 1390;
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTION_AUTO_SELECTED = 1322;</code>
         */
        public static final int DUAL_SIM_SELECTION_SUGGESTION_AUTO_SELECTED_VALUE = 1322;
        /**
         * <code>DUAL_SIM_SELECTION_SUGGESTION_AUTO_NOT_SELECTABLE = 1391;</code>
         */
        public static final int DUAL_SIM_SELECTION_SUGGESTION_AUTO_NOT_SELECTABLE_VALUE = 1391;
        /**
         * <code>DUO_CALL_LOG_SET_UP_INSTALL = 1308;</code>
         */
        public static final int DUO_CALL_LOG_SET_UP_INSTALL_VALUE = 1308;
        /**
         * <code>DUO_CALL_LOG_SET_UP_ACTIVATE = 1309;</code>
         */
        public static final int DUO_CALL_LOG_SET_UP_ACTIVATE_VALUE = 1309;
        /**
         * <code>DUO_CALL_LOG_INVITE = 1310;</code>
         */
        public static final int DUO_CALL_LOG_INVITE_VALUE = 1310;
        /**
         * <pre>
         * Bubble primary button first click to expand bubble
         * </pre>
         *
         * <code>BUBBLE_V2_CLICK_TO_EXPAND = 1311;</code>
         */
        public static final int BUBBLE_V2_CLICK_TO_EXPAND_VALUE = 1311;
        /**
         * <pre>
         * Bubble primary button second click to collapse bubble
         * </pre>
         *
         * <code>BUBBLE_V2_CLICK_TO_COLLAPSE = 1312;</code>
         */
        public static final int BUBBLE_V2_CLICK_TO_COLLAPSE_VALUE = 1312;
        /**
         * <pre>
         * User return to call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_RETURN_TO_CALL = 1313;</code>
         */
        public static final int BUBBLE_V2_RETURN_TO_CALL_VALUE = 1313;
        /**
         * <pre>
         * User muted call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_MUTE_CALL = 1314;</code>
         */
        public static final int BUBBLE_V2_MUTE_CALL_VALUE = 1314;
        /**
         * <pre>
         * User unmuted call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_UNMUTE_CALL = 1315;</code>
         */
        public static final int BUBBLE_V2_UNMUTE_CALL_VALUE = 1315;
        /**
         * <pre>
         * User choose audio route speakerphone from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_SPEAKERPHONE = 1316;</code>
         */
        public static final int BUBBLE_V2_SPEAKERPHONE_VALUE = 1316;
        /**
         * <pre>
         * User choose audio route wired or earpiece from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_WIRED_OR_EARPIECE = 1317;</code>
         */
        public static final int BUBBLE_V2_WIRED_OR_EARPIECE_VALUE = 1317;
        /**
         * <pre>
         * User choose audio route bluetooth from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_BLUETOOTH = 1318;</code>
         */
        public static final int BUBBLE_V2_BLUETOOTH_VALUE = 1318;
        /**
         * <pre>
         * User ended call from bubble call action menu
         * </pre>
         *
         * <code>BUBBLE_V2_END_CALL = 1319;</code>
         */
        public static final int BUBBLE_V2_END_CALL_VALUE = 1319;
        /**
         * <pre>
         * Drag bubble to bottom and dismiss
         * </pre>
         *
         * <code>BUBBLE_V2_BOTTOM_ACTION_DISMISS = 1320;</code>
         */
        public static final int BUBBLE_V2_BOTTOM_ACTION_DISMISS_VALUE = 1320;
        /**
         * <pre>
         * Drag bubble to bottom and end call
         * </pre>
         *
         * <code>BUBBLE_V2_BOTTOM_ACTION_END_CALL = 1321;</code>
         */
        public static final int BUBBLE_V2_BOTTOM_ACTION_END_CALL_VALUE = 1321;
        /**
         * <pre>
         * Bubble appears
         * </pre>
         *
         * <code>BUBBLE_V2_SHOW = 1323;</code>
         */
        public static final int BUBBLE_V2_SHOW_VALUE = 1323;
        /**
         * <code>DUO_CALL_LOG_SET_UP_INSTALL_SHOWN = 1324;</code>
         */
        public static final int DUO_CALL_LOG_SET_UP_INSTALL_SHOWN_VALUE = 1324;
        /**
         * <code>DUO_CALL_LOG_SET_UP_ACTIVATE_SHOWN = 1325;</code>
         */
        public static final int DUO_CALL_LOG_SET_UP_ACTIVATE_SHOWN_VALUE = 1325;
        /**
         * <code>DUO_CALL_LOG_INVITE_SHOWN = 1326;</code>
         */
        public static final int DUO_CALL_LOG_INVITE_SHOWN_VALUE = 1326;
        /**
         * <pre>
         * NUI bottom navigation bar user actions
         * </pre>
         *
         * <code>MAIN_SWITCH_TAB_TO_FAVORITE = 1327;</code>
         */
        public static final int MAIN_SWITCH_TAB_TO_FAVORITE_VALUE = 1327;
        /**
         * <code>MAIN_SWITCH_TAB_TO_CALL_LOG = 1328;</code>
         */
        public static final int MAIN_SWITCH_TAB_TO_CALL_LOG_VALUE = 1328;
        /**
         * <code>MAIN_SWITCH_TAB_TO_CONTACTS = 1329;</code>
         */
        public static final int MAIN_SWITCH_TAB_TO_CONTACTS_VALUE = 1329;
        /**
         * <code>MAIN_SWITCH_TAB_TO_VOICEMAIL = 1330;</code>
         */
        public static final int MAIN_SWITCH_TAB_TO_VOICEMAIL_VALUE = 1330;
        /**
         * <pre>
         * NUI search
         * </pre>
         *
         * <code>MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_CLOSE_SEARCH_AND_DIALPAD = 1331;</code>
         */
        public static final int MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_CLOSE_SEARCH_AND_DIALPAD_VALUE = 1331;
        /**
         * <code>MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_HIDE_DIALPAD = 1332;</code>
         */
        public static final int MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_HIDE_DIALPAD_VALUE = 1332;
        /**
         * <code>MAIN_TOUCH_SEARCH_LIST_TO_CLOSE_SEARCH = 1333;</code>
         */
        public static final int MAIN_TOUCH_SEARCH_LIST_TO_CLOSE_SEARCH_VALUE = 1333;
        /**
         * <code>MAIN_TOUCH_SEARCH_LIST_TO_HIDE_KEYBOARD = 1334;</code>
         */
        public static final int MAIN_TOUCH_SEARCH_LIST_TO_HIDE_KEYBOARD_VALUE = 1334;
        /**
         * <code>MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH = 1335;</code>
         */
        public static final int MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH_VALUE = 1335;
        /**
         * <code>MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH_AND_DIALPAD = 1336;</code>
         */
        public static final int MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH_AND_DIALPAD_VALUE = 1336;
        /**
         * <code>MAIN_PRESS_BACK_BUTTON_TO_HIDE_DIALPAD = 1337;</code>
         */
        public static final int MAIN_PRESS_BACK_BUTTON_TO_HIDE_DIALPAD_VALUE = 1337;
        /**
         * <code>MAIN_CLICK_SEARCH_BAR = 1338;</code>
         */
        public static final int MAIN_CLICK_SEARCH_BAR_VALUE = 1338;
        /**
         * <code>MAIN_CLICK_SEARCH_BAR_VOICE_BUTTON = 1339;</code>
         */
        public static final int MAIN_CLICK_SEARCH_BAR_VOICE_BUTTON_VALUE = 1339;
        /**
         * <pre>
         * NUI FAB
         * </pre>
         *
         * <code>MAIN_CLICK_FAB_TO_OPEN_DIALPAD = 1340;</code>
         */
        public static final int MAIN_CLICK_FAB_TO_OPEN_DIALPAD_VALUE = 1340;
        /**
         * <pre>
         * The call log was not dirty.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_NOT_DIRTY = 1341;</code>
         */
        public static final int ANNOTATED_CALL_LOG_NOT_DIRTY_VALUE = 1341;
        /**
         * <pre>
         * The call log was dirty but no changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_NO_CHANGES_NEEDED = 1342;</code>
         */
        public static final int ANNOTATED_CALL_LOG_NO_CHANGES_NEEDED_VALUE = 1342;
        /**
         * <pre>
         * The call log was force refreshed but no changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_FORCE_REFRESH_NO_CHANGES_NEEDED = 1343;</code>
         */
        public static final int ANNOTATED_CALL_LOG_FORCE_REFRESH_NO_CHANGES_NEEDED_VALUE = 1343;
        /**
         * <pre>
         * The call log was dirty and changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_CHANGES_NEEDED = 1344;</code>
         */
        public static final int ANNOTATED_CALL_LOG_CHANGES_NEEDED_VALUE = 1344;
        /**
         * <pre>
         * The call log was force refreshed and changes were needed.
         * </pre>
         *
         * <code>ANNOTATED_CALL_LOG_FORCE_REFRESH_CHANGES_NEEDED = 1345;</code>
         */
        public static final int ANNOTATED_CALL_LOG_FORCE_REFRESH_CHANGES_NEEDED_VALUE = 1345;
        /**
         * <code>MAIN_VVM_TAB_VISIBLE = 1346;</code>
         */
        public static final int MAIN_VVM_TAB_VISIBLE_VALUE = 1346;
        /**
         * <pre>
         * Main bottom navigation bar non user actions
         * </pre>
         *
         * <code>MAIN_OPEN_WITH_TAB_FAVORITE = 1347;</code>
         */
        public static final int MAIN_OPEN_WITH_TAB_FAVORITE_VALUE = 1347;
        /**
         * <code>MAIN_OPEN_WITH_TAB_CALL_LOG = 1348;</code>
         */
        public static final int MAIN_OPEN_WITH_TAB_CALL_LOG_VALUE = 1348;
        /**
         * <code>MAIN_OPEN_WITH_TAB_CONTACTS = 1349;</code>
         */
        public static final int MAIN_OPEN_WITH_TAB_CONTACTS_VALUE = 1349;
        /**
         * <code>MAIN_OPEN_WITH_TAB_VOICEMAIL = 1350;</code>
         */
        public static final int MAIN_OPEN_WITH_TAB_VOICEMAIL_VALUE = 1350;
        /**
         * <code>MAIN_OPEN_WITH_DIALPAD = 1351;</code>
         */
        public static final int MAIN_OPEN_WITH_DIALPAD_VALUE = 1351;
        /**
         * <pre>
         * Incoming call screened for spam auto blocking
         * </pre>
         *
         * <code>INCOMING_CALL_SCREENED = 1352;</code>
         */
        public static final int INCOMING_CALL_SCREENED_VALUE = 1352;
        /**
         * <pre>
         * Incoming call auto blocked as spam
         * </pre>
         *
         * <code>INCOMING_CALL_AUTO_BLOCKED_AS_SPAM = 1353;</code>
         */
        public static final int INCOMING_CALL_AUTO_BLOCKED_AS_SPAM_VALUE = 1353;
        /**
         * <pre>
         * Incoming voicemail screened for spam auto blocking
         * </pre>
         *
         * <code>INCOMING_VOICEMAIL_SCREENED = 1354;</code>
         */
        public static final int INCOMING_VOICEMAIL_SCREENED_VALUE = 1354;
        /**
         * <pre>
         * Incoming voicemail auto blocked as spam
         * </pre>
         *
         * <code>INCOMING_VOICEMAIL_AUTO_BLOCKED_AS_SPAM = 1355;</code>
         */
        public static final int INCOMING_VOICEMAIL_AUTO_BLOCKED_AS_SPAM_VALUE = 1355;
        /**
         * <pre>
         * User reported auto blocked spam call as spam
         * </pre>
         *
         * <code>AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_SPAM = 1356;</code>
         */
        public static final int AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_SPAM_VALUE = 1356;
        /**
         * <pre>
         * User reported auto blocked spam call as not spam
         * </pre>
         *
         * <code>AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_NOT_SPAM = 1357;</code>
         */
        public static final int AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_NOT_SPAM_VALUE = 1357;
        /**
         * <pre>
         * User enabled spam blocking through setting page.
         * </pre>
         *
         * <code>SPAM_BLOCKING_ENABLED_THROUGH_SETTING = 1358;</code>
         */
        public static final int SPAM_BLOCKING_ENABLED_THROUGH_SETTING_VALUE = 1358;
        /**
         * <pre>
         * User disabled spam blocking through setting page.
         * </pre>
         *
         * <code>SPAM_BLOCKING_DISABLED_THROUGH_SETTING = 1359;</code>
         */
        public static final int SPAM_BLOCKING_DISABLED_THROUGH_SETTING_VALUE = 1359;
        /**
         * <pre>
         * Failure happened while modifying spam blocking setting.
         * </pre>
         *
         * <code>SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_SETTING = 1360;</code>
         */
        public static final int SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_SETTING_VALUE = 1360;
        /**
         * <code>VVM_NOTIFICATIONS_SETTING_CLICKED = 1361;</code>
         */
        public static final int VVM_NOTIFICATIONS_SETTING_CLICKED_VALUE = 1361;
        /**
         * <code>VVM_USER_TURNED_TRANSCRIBE_ON_FROM_SETTINGS = 1362;</code>
         */
        public static final int VVM_USER_TURNED_TRANSCRIBE_ON_FROM_SETTINGS_VALUE = 1362;
        /**
         * <code>VVM_USER_TURNED_TRANSCRIBE_OFF_FROM_SETTINGS = 1363;</code>
         */
        public static final int VVM_USER_TURNED_TRANSCRIBE_OFF_FROM_SETTINGS_VALUE = 1363;
        /**
         * <code>VVM_USER_TURNED_DONATION_ON_FROM_SETTINGS = 1364;</code>
         */
        public static final int VVM_USER_TURNED_DONATION_ON_FROM_SETTINGS_VALUE = 1364;
        /**
         * <code>VVM_USER_TURNED_DONATION_OFF_FROM_SETTINGS = 1365;</code>
         */
        public static final int VVM_USER_TURNED_DONATION_OFF_FROM_SETTINGS_VALUE = 1365;
        /**
         * <pre>
         * Spam blocking call log promo shown for user.
         * </pre>
         *
         * <code>SPAM_BLOCKING_CALL_LOG_PROMO_SHOWN = 1366;</code>
         */
        public static final int SPAM_BLOCKING_CALL_LOG_PROMO_SHOWN_VALUE = 1366;
        /**
         * <pre>
         * User enabled spam blocking through call log promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_ENABLED_THROUGH_CALL_LOG_PROMO = 1367;</code>
         */
        public static final int SPAM_BLOCKING_ENABLED_THROUGH_CALL_LOG_PROMO_VALUE = 1367;
        /**
         * <pre>
         * Failure happened while enabling spam blocking through call log promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_CALL_LOG_PROMO = 1368;</code>
         */
        public static final int SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_CALL_LOG_PROMO_VALUE = 1368;
        /**
         * <code>TOKEN_FETCHER_NEED_USER_APPROVAL = 1371;</code>
         */
        public static final int TOKEN_FETCHER_NEED_USER_APPROVAL_VALUE = 1371;
        /**
         * <code>TOKEN_FETCHER_IO_EXCEPTION = 1372;</code>
         */
        public static final int TOKEN_FETCHER_IO_EXCEPTION_VALUE = 1372;
        /**
         * <code>TOKEN_FETCHER_AUTH_EXCEPTION = 1373;</code>
         */
        public static final int TOKEN_FETCHER_AUTH_EXCEPTION_VALUE = 1373;
        /**
         * <code>TOKEN_FETCHER_CLEAR_EXCEPTION = 1374;</code>
         */
        public static final int TOKEN_FETCHER_CLEAR_EXCEPTION_VALUE = 1374;
        /**
         * <code>PEOPLE_API_LOOKUP_FAILED = 1375;</code>
         */
        public static final int PEOPLE_API_LOOKUP_FAILED_VALUE = 1375;
        /**
         * <pre>
         * New Speed Dial impressions
         * </pre>
         *
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT = 1376;</code>
         */
        public static final int LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT_VALUE = 1376;
        /**
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FOR_SUGGESTED_CONTACT = 1377;</code>
         */
        public static final int LIGHTBRINGER_VIDEO_REQUESTED_FOR_SUGGESTED_CONTACT_VALUE = 1377;
        /**
         * <code>LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT_DISAMBIG = 1378;</code>
         */
        public static final int LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT_DISAMBIG_VALUE = 1378;
        /**
         * <pre>
         * Spam blocking after call notification promo shown for user.
         * </pre>
         *
         * <code>SPAM_BLOCKING_AFTER_CALL_NOTIFICATION_PROMO_SHOWN = 1379;</code>
         */
        public static final int SPAM_BLOCKING_AFTER_CALL_NOTIFICATION_PROMO_SHOWN_VALUE = 1379;
        /**
         * <pre>
         * User enabled spam blocking through after call notification promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_ENABLED_THROUGH_AFTER_CALL_NOTIFICATION_PROMO = 1380;</code>
         */
        public static final int SPAM_BLOCKING_ENABLED_THROUGH_AFTER_CALL_NOTIFICATION_PROMO_VALUE = 1380;
        /**
         * <pre>
         * Failure happened while enabling spam blocking through after call
         * notification promo.
         * </pre>
         *
         * <code>SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_AFTER_CALL_NOTIFICATION_PROMO = 1381;</code>
         */
        public static final int SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_AFTER_CALL_NOTIFICATION_PROMO_VALUE = 1381;
        /**
         * <pre>
         * RTT call impressions
         * </pre>
         *
         * <code>OUTGOING_RTT_CALL = 1382;</code>
         */
        public static final int OUTGOING_RTT_CALL_VALUE = 1382;
        /**
         * <code>INCOMING_RTT_CALL = 1383;</code>
         */
        public static final int INCOMING_RTT_CALL_VALUE = 1383;
        /**
         * <pre>
         * The call turns into RTT call mid call.
         * </pre>
         *
         * <code>RTT_MID_CALL_ENABLED = 1384;</code>
         */
        public static final int RTT_MID_CALL_ENABLED_VALUE = 1384;
        /**
         * <pre>
         * Mid call RTT request accepted.
         * </pre>
         *
         * <code>RTT_MID_CALL_ACCEPTED = 1385;</code>
         */
        public static final int RTT_MID_CALL_ACCEPTED_VALUE = 1385;
        /**
         * <pre>
         * Mid call RTT request rejected.
         * </pre>
         *
         * <code>RTT_MID_CALL_REJECTED = 1386;</code>
         */
        public static final int RTT_MID_CALL_REJECTED_VALUE = 1386;
        /**
         * <pre>
         * Send button clicked in RTT call, this includes send button on keyboard.
         * </pre>
         *
         * <code>RTT_SEND_BUTTON_CLICKED = 1387;</code>
         */
        public static final int RTT_SEND_BUTTON_CLICKED_VALUE = 1387;
        /**
         * <code>RTT_KEYBOARD_SEND_BUTTON_CLICKED = 1388;</code>
         */
        public static final int RTT_KEYBOARD_SEND_BUTTON_CLICKED_VALUE = 1388;
        /**
         * <pre>
         * For background calling
         * </pre>
         *
         * <code>START_CALL_IN_BUBBLE_MODE = 1392;</code>
         */
        public static final int START_CALL_IN_BUBBLE_MODE_VALUE = 1392;
        /**
         * <pre>
         * Switch audio route
         * </pre>
         *
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_SPEAKER = 1393;</code>
         */
        public static final int IN_CALL_SWITCH_AUDIO_ROUTE_SPEAKER_VALUE = 1393;
        /**
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_WIRED_HEADSET = 1394;</code>
         */
        public static final int IN_CALL_SWITCH_AUDIO_ROUTE_WIRED_HEADSET_VALUE = 1394;
        /**
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_EARPIECE = 1395;</code>
         */
        public static final int IN_CALL_SWITCH_AUDIO_ROUTE_EARPIECE_VALUE = 1395;
        /**
         * <code>IN_CALL_SWITCH_AUDIO_ROUTE_BLUETOOTH = 1396;</code>
         */
        public static final int IN_CALL_SWITCH_AUDIO_ROUTE_BLUETOOTH_VALUE = 1396;
        /**
         * <pre>
         * Impressions for PhoneLookup
         * </pre>
         *
         * <code>PEOPLE_API_PHONE_LOOKUP_TIMEOUT = 1397;</code>
         */
        public static final int PEOPLE_API_PHONE_LOOKUP_TIMEOUT_VALUE = 1397;
        /**
         * <code>CP2_EXTENDED_DIRECTORY_PHONE_LOOKUP_TIMEOUT = 1398;</code>
         */
        public static final int CP2_EXTENDED_DIRECTORY_PHONE_LOOKUP_TIMEOUT_VALUE = 1398;
        /**
         * <pre>
         * Favorite general
         * </pre>
         *
         * <code>FAVORITE_ADD_FAVORITE = 1399;</code>
         */
        public static final int FAVORITE_ADD_FAVORITE_VALUE = 1399;
        /**
         * <code>FAVORITE_OPEN_DISAMBIG_DIALOG = 1400;</code>
         */
        public static final int FAVORITE_OPEN_DISAMBIG_DIALOG_VALUE = 1400;
        /**
         * <code>FAVORITE_REMOVE_FAVORITE_BY_DRAG_AND_DROP = 1401;</code>
         */
        public static final int FAVORITE_REMOVE_FAVORITE_BY_DRAG_AND_DROP_VALUE = 1401;
        /**
         * <code>FAVORITE_MOVE_FAVORITE_BY_DRAG_AND_DROP = 1402;</code>
         */
        public static final int FAVORITE_MOVE_FAVORITE_BY_DRAG_AND_DROP_VALUE = 1402;
        /**
         * <pre>
         * Favorite menu
         * </pre>
         *
         * <code>FAVORITE_OPEN_FAVORITE_MENU = 1403;</code>
         */
        public static final int FAVORITE_OPEN_FAVORITE_MENU_VALUE = 1403;
        /**
         * <code>FAVORITE_SEND_MESSAGE = 1404;</code>
         */
        public static final int FAVORITE_SEND_MESSAGE_VALUE = 1404;
        /**
         * <code>FAVORITE_OPEN_CONTACT_CARD = 1405;</code>
         */
        public static final int FAVORITE_OPEN_CONTACT_CARD_VALUE = 1405;
        /**
         * <pre>
         * Include drag and drop
         * </pre>
         *
         * <code>FAVORITE_REMOVE_FAVORITE = 1406;</code>
         */
        public static final int FAVORITE_REMOVE_FAVORITE_VALUE = 1406;
        /**
         * <pre>
         * Favorite disambig
         * </pre>
         *
         * <code>FAVORITE_SET_VIDEO_DEFAULT = 1407;</code>
         */
        public static final int FAVORITE_SET_VIDEO_DEFAULT_VALUE = 1407;
        /**
         * <code>FAVORITE_SET_VOICE_DEFAULT = 1408;</code>
         */
        public static final int FAVORITE_SET_VOICE_DEFAULT_VALUE = 1408;
        private static final com.google.protobuf.Internal.EnumLiteMap<
                Type> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                    public Type findValueByNumber(int number) {
                        return Type.forNumber(number);
                    }
                };
        private final int value;

        Type(int value) {
            this.value = value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Type valueOf(int value) {
            return forNumber(value);
        }

        public static Type forNumber(int value) {
            switch (value) {
                case 1000:
                    return UNKNOWN_AOSP_EVENT_TYPE;
                case 1001:
                    return APP_LAUNCHED;
                case 1002:
                    return IN_CALL_SCREEN_TURN_ON_SPEAKERPHONE;
                case 1003:
                    return IN_CALL_SCREEN_TURN_ON_WIRED_OR_EARPIECE;
                case 1004:
                    return CALL_LOG_BLOCK_REPORT_SPAM;
                case 1005:
                    return CALL_LOG_BLOCK_NUMBER;
                case 1006:
                    return CALL_LOG_UNBLOCK_NUMBER;
                case 1007:
                    return CALL_LOG_REPORT_AS_NOT_SPAM;
                case 1008:
                    return DIALOG_ACTION_CONFIRM_NUMBER_NOT_SPAM;
                case 1009:
                    return REPORT_AS_NOT_SPAM_VIA_UNBLOCK_NUMBER;
                case 1010:
                    return DIALOG_ACTION_CONFIRM_NUMBER_SPAM_INDIRECTLY_VIA_BLOCK_NUMBER;
                case 1011:
                    return REPORT_CALL_AS_SPAM_VIA_CALL_LOG_BLOCK_REPORT_SPAM_SENT_VIA_BLOCK_NUMBER_DIALOG;
                case 1012:
                    return USER_ACTION_BLOCKED_NUMBER;
                case 1369:
                    return USER_ACTION_BLOCK_NUMBER_FAILED;
                case 1013:
                    return USER_ACTION_UNBLOCKED_NUMBER;
                case 1370:
                    return USER_ACTION_UNBLOCK_NUMBER_FAILED;
                case 1014:
                    return SPAM_AFTER_CALL_NOTIFICATION_BLOCK_NUMBER;
                case 1015:
                    return SPAM_AFTER_CALL_NOTIFICATION_SHOW_SPAM_DIALOG;
                case 1016:
                    return SPAM_AFTER_CALL_NOTIFICATION_SHOW_NON_SPAM_DIALOG;
                case 1019:
                    return SPAM_AFTER_CALL_NOTIFICATION_ADD_TO_CONTACTS;
                case 1020:
                    return SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_SPAM;
                case 1021:
                    return SPAM_AFTER_CALL_NOTIFICATION_MARKED_NUMBER_AS_NOT_SPAM_AND_BLOCKED;
                case 1022:
                    return SPAM_AFTER_CALL_NOTIFICATION_REPORT_NUMBER_AS_NOT_SPAM;
                case 1024:
                    return SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_SPAM_DIALOG;
                case 1025:
                    return SPAM_AFTER_CALL_NOTIFICATION_ON_DISMISS_NON_SPAM_DIALOG;
                case 1026:
                    return SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_SPAM;
                case 1027:
                    return SPAM_NOTIFICATION_SERVICE_ACTION_MARK_NUMBER_AS_NOT_SPAM;
                case 1028:
                    return USER_PARTICIPATED_IN_A_CALL;
                case 1029:
                    return INCOMING_SPAM_CALL;
                case 1030:
                    return INCOMING_NON_SPAM_CALL;
                case 1041:
                    return SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE;
                case 1042:
                    return SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE;
                case 1043:
                    return NON_SPAM_NOTIFICATION_SHOWN_AFTER_THROTTLE;
                case 1044:
                    return NON_SPAM_NOTIFICATION_NOT_SHOWN_AFTER_THROTTLE;
                case 1045:
                    return VOICEMAIL_ALERT_SET_PIN_SHOWN;
                case 1046:
                    return VOICEMAIL_ALERT_SET_PIN_CLICKED;
                case 1047:
                    return USER_DID_NOT_PARTICIPATE_IN_CALL;
                case 1048:
                    return USER_DELETED_CALL_LOG_ITEM;
                case 1049:
                    return CALL_LOG_SEND_MESSAGE;
                case 1050:
                    return CALL_LOG_ADD_TO_CONTACT;
                case 1051:
                    return CALL_LOG_CREATE_NEW_CONTACT;
                case 1052:
                    return VOICEMAIL_DELETE_ENTRY;
                case 1053:
                    return VOICEMAIL_EXPAND_ENTRY;
                case 1054:
                    return VOICEMAIL_PLAY_AUDIO_DIRECTLY;
                case 1055:
                    return VOICEMAIL_PLAY_AUDIO_AFTER_EXPANDING_ENTRY;
                case 1056:
                    return REJECT_INCOMING_CALL_FROM_NOTIFICATION;
                case 1057:
                    return REJECT_INCOMING_CALL_FROM_ANSWER_SCREEN;
                case 1058:
                    return CALL_LOG_CONTEXT_MENU_BLOCK_REPORT_SPAM;
                case 1059:
                    return CALL_LOG_CONTEXT_MENU_BLOCK_NUMBER;
                case 1060:
                    return CALL_LOG_CONTEXT_MENU_UNBLOCK_NUMBER;
                case 1061:
                    return CALL_LOG_CONTEXT_MENU_REPORT_AS_NOT_SPAM;
                case 1062:
                    return NEW_CONTACT_OVERFLOW;
                case 1063:
                    return NEW_CONTACT_FAB;
                case 1064:
                    return VOICEMAIL_VVM3_TOS_SHOWN;
                case 1065:
                    return VOICEMAIL_VVM3_TOS_ACCEPTED;
                case 1066:
                    return VOICEMAIL_VVM3_TOS_DECLINED;
                case 1067:
                    return VOICEMAIL_VVM3_TOS_DECLINE_CLICKED;
                case 1068:
                    return VOICEMAIL_VVM3_TOS_DECLINE_CHANGE_PIN_SHOWN;
                case 1069:
                    return STORAGE_PERMISSION_DISPLAYED;
                case 1074:
                    return CAMERA_PERMISSION_DISPLAYED;
                case 1070:
                    return STORAGE_PERMISSION_REQUESTED;
                case 1075:
                    return CAMERA_PERMISSION_REQUESTED;
                case 1071:
                    return STORAGE_PERMISSION_SETTINGS;
                case 1076:
                    return CAMERA_PERMISSION_SETTINGS;
                case 1072:
                    return STORAGE_PERMISSION_GRANTED;
                case 1077:
                    return CAMERA_PERMISSION_GRANTED;
                case 1073:
                    return STORAGE_PERMISSION_DENIED;
                case 1078:
                    return CAMERA_PERMISSION_DENIED;
                case 1079:
                    return VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_ACTIVITY;
                case 1080:
                    return VOICEMAIL_CONFIGURATION_STATE_CORRUPTION_DETECTED_FROM_NOTIFICATION;
                case 1081:
                    return BACKUP_ON_BACKUP;
                case 1082:
                    return BACKUP_ON_FULL_BACKUP;
                case 1083:
                    return BACKUP_ON_BACKUP_DISABLED;
                case 1084:
                    return BACKUP_VOICEMAIL_BACKED_UP;
                case 1085:
                    return BACKUP_FULL_BACKED_UP;
                case 1086:
                    return BACKUP_ON_BACKUP_JSON_EXCEPTION;
                case 1087:
                    return BACKUP_ON_QUOTA_EXCEEDED;
                case 1088:
                    return BACKUP_ON_RESTORE;
                case 1089:
                    return BACKUP_RESTORED_FILE;
                case 1090:
                    return BACKUP_RESTORED_VOICEMAIL;
                case 1091:
                    return BACKUP_ON_RESTORE_FINISHED;
                case 1092:
                    return BACKUP_ON_RESTORE_DISABLED;
                case 1093:
                    return BACKUP_ON_RESTORE_JSON_EXCEPTION;
                case 1094:
                    return BACKUP_ON_RESTORE_IO_EXCEPTION;
                case 1095:
                    return BACKUP_MAX_VM_BACKUP_REACHED;
                case 1096:
                    return EVENT_ANSWER_HINT_ACTIVATED;
                case 1097:
                    return EVENT_ANSWER_HINT_DEACTIVATED;
                case 1098:
                    return VVM_TAB_VIEWED;
                case 1099:
                    return VVM_SHARE_VISIBLE;
                case 1100:
                    return VVM_SHARE_PRESSED;
                case 1101:
                    return OUTGOING_VIDEO_CALL;
                case 1102:
                    return INCOMING_VIDEO_CALL;
                case 1103:
                    return USER_PARTICIPATED_IN_A_VIDEO_CALL;
                case 1104:
                    return BACKUP_ON_RESTORE_VM_DUPLICATE_NOT_RESTORING;
                case 1105:
                    return CALL_LOG_SHARE_AND_CALL;
                case 1106:
                    return CALL_COMPOSER_ACTIVITY_PLACE_RCS_CALL;
                case 1107:
                    return CALL_COMPOSER_ACTIVITY_SEND_AND_CALL_PRESSED_WHEN_SESSION_NOT_READY;
                case 1108:
                    return POST_CALL_PROMPT_USER_TO_SEND_MESSAGE_CLICKED;
                case 1109:
                    return POST_CALL_PROMPT_USER_TO_SEND_MESSAGE;
                case 1110:
                    return POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE;
                case 1111:
                    return POST_CALL_PROMPT_USER_TO_VIEW_SENT_MESSAGE_CLICKED;
                case 1112:
                    return IN_CALL_SCREEN_TURN_ON_MUTE;
                case 1113:
                    return IN_CALL_SCREEN_TURN_OFF_MUTE;
                case 1114:
                    return IN_CALL_SCREEN_SWAP_CAMERA;
                case 1115:
                    return IN_CALL_SCREEN_TURN_ON_VIDEO;
                case 1116:
                    return IN_CALL_SCREEN_TURN_OFF_VIDEO;
                case 1117:
                    return VIDEO_CALL_WITH_INCOMING_VOICE_CALL;
                case 1118:
                    return VIDEO_CALL_WITH_INCOMING_VIDEO_CALL;
                case 1119:
                    return VOICE_CALL_WITH_INCOMING_VOICE_CALL;
                case 1120:
                    return VOICE_CALL_WITH_INCOMING_VIDEO_CALL;
                case 1121:
                    return CALL_DETAILS_COPY_NUMBER;
                case 1122:
                    return CALL_DETAILS_EDIT_BEFORE_CALL;
                case 1123:
                    return CALL_DETAILS_CALL_BACK;
                case 1124:
                    return VVM_USER_DISMISSED_VM_ALMOST_FULL_PROMO;
                case 1125:
                    return VVM_USER_DISMISSED_VM_FULL_PROMO;
                case 1126:
                    return VVM_USER_ENABLED_ARCHIVE_FROM_VM_ALMOST_FULL_PROMO;
                case 1127:
                    return VVM_USER_ENABLED_ARCHIVE_FROM_VM_FULL_PROMO;
                case 1128:
                    return VVM_USER_SHOWN_VM_ALMOST_FULL_PROMO;
                case 1129:
                    return VVM_USER_SHOWN_VM_FULL_PROMO;
                case 1130:
                    return VVM_USER_SHOWN_VM_ALMOST_FULL_ERROR_MESSAGE;
                case 1131:
                    return VVM_USER_SHOWN_VM_FULL_ERROR_MESSAGE;
                case 1132:
                    return VVM_USER_TURNED_ARCHIVE_ON_FROM_SETTINGS;
                case 1133:
                    return VVM_USER_TURNED_ARCHIVE_OFF_FROM_SETTINGS;
                case 1134:
                    return VVM_ARCHIVE_AUTO_DELETED_VM_FROM_SERVER;
                case 1135:
                    return VVM_ARCHIVE_AUTO_DELETE_TURNED_OFF;
                case 1136:
                    return VVM_TAB_VISIBLE;
                case 1137:
                    return VVM_UNBUNDLED_EVENT_RECEIVED;
                case 1138:
                    return VVM_ACTIVATION_STARTED;
                case 1139:
                    return VVM_ACTIVATION_COMPLETED;
                case 1140:
                    return VVM_AUTO_RETRY_ACTIVATION;
                case 1141:
                    return VVM_PROVISIONING_STARTED;
                case 1142:
                    return VVM_PROVISIONING_COMPLETED;
                case 1143:
                    return VVM_SYNC_STARTED;
                case 1144:
                    return VVM_SYNC_COMPLETED;
                case 1145:
                    return VVM_AUTO_RETRY_SYNC;
                case 1146:
                    return VVM_USER_RETRY;
                case 1147:
                    return VVM_USER_SYNC;
                case 1148:
                    return VVM_SETTINGS_VIEWED;
                case 1149:
                    return VVM_CHANGE_PIN_CLICKED;
                case 1150:
                    return VVM_CHANGE_PIN_COMPLETED;
                case 1151:
                    return VVM_CHANGE_RINGTONE_CLICKED;
                case 1152:
                    return VVM_CHANGE_VIBRATION_CLICKED;
                case 1153:
                    return VVM_USER_ENABLED_IN_SETTINGS;
                case 1154:
                    return VVM_USER_DISABLED_IN_SETTINGS;
                case 1155:
                    return VVM_ADVANCED_SETINGS_CLICKED;
                case 1156:
                    return VVM_NOTIFICATION_CLICKED;
                case 1157:
                    return VVM_NOTIFICATION_CREATED;
                case 1158:
                    return VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION;
                case 1159:
                    return VVM_TRANSCRIPTION_DOWNLOADED;
                case 1160:
                    return VVM_CHANGE_AIRPLANE_MODE_CLICKED;
                case 1161:
                    return VVM_CALL_VOICEMAIL_CLICKED;
                case 1162:
                    return VVM_QUOTA_CHECK_UNAVAILABLE;
                case 1163:
                    return EMERGENCY_NEW_EMERGENCY_CALL;
                case 1164:
                    return EMERGENCY_CALLBACK;
                case 1165:
                    return EMERGENCY_NO_LOCATION_PERMISSION;
                case 1166:
                    return EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION;
                case 1167:
                    return EMERGENCY_CANT_GET_LOCATION;
                case 1168:
                    return EMERGENCY_STALE_LOCATION;
                case 1169:
                    return EMERGENCY_INACCURATE_LOCATION;
                case 1170:
                    return EMERGENCY_GOT_LOCATION;
                case 1171:
                    return EMERGENCY_GOT_ADDRESS;
                case 1172:
                    return EMERGENCY_GOT_MAP;
                case 1173:
                    return EMERGENCY_LAUNCHED_MAP;
                case 1174:
                    return VIDEO_CALL_UPGRADE_REQUESTED;
                case 1175:
                    return VIDEO_CALL_REQUEST_ACCEPTED;
                case 1176:
                    return VIDEO_CALL_REQUEST_ACCEPTED_AS_AUDIO;
                case 1177:
                    return VIDEO_CALL_REQUEST_DECLINED;
                case 1178:
                    return VIDEO_CALL_REQUEST_RECEIVED;
                case 1179:
                    return RCS_VIDEO_SHARE_UPGRADE_REQUESTED;
                case 1180:
                    return RCS_VIDEO_SHARE_REQUEST_ACCEPTED;
                case 1181:
                    return RCS_VIDEO_SHARE_REQUEST_DECLINED;
                case 1182:
                    return RCS_VIDEO_SHARE_REQUEST_RECEIVED;
                case 1183:
                    return IMS_VIDEO_UPGRADE_REQUESTED;
                case 1184:
                    return IMS_VIDEO_REQUEST_ACCEPTED;
                case 1185:
                    return IMS_VIDEO_REQUEST_ACCEPTED_AS_AUDIO;
                case 1186:
                    return IMS_VIDEO_REQUEST_DECLINED;
                case 1187:
                    return IMS_VIDEO_REQUEST_RECEIVED;
                case 1188:
                    return VVM_STATUS_CHECK_READY;
                case 1189:
                    return VVM_STATUS_CHECK_REACTIVATION;
                case 1190:
                    return VVM_ARCHIVE_AUTO_DELETE_FAILED_DUE_TO_FAILED_QUOTA_CHECK;
                case 1191:
                    return BUBBLE_TURN_ON_SPEAKERPHONE;
                case 1192:
                    return BUBBLE_TURN_ON_WIRED_OR_EARPIECE;
                case 1193:
                    return BUBBLE_MUTE_CALL;
                case 1194:
                    return BUBBLE_UNMUTE_CALL;
                case 1195:
                    return BUBBLE_END_CALL;
                case 1196:
                    return LIGHTBRINGER_VIDEO_REQUESTED_FROM_SEARCH;
                case 1197:
                    return LIGHTBRINGER_VIDEO_REQUESTED_FROM_CALL_LOG;
                case 1198:
                    return IMS_VIDEO_REQUESTED_FROM_SEARCH;
                case 1199:
                    return IMS_VIDEO_REQUESTED_FROM_CALL_LOG;
                case 1200:
                    return MULTISELECT_LONG_PRESS_ENTER_MULTI_SELECT_MODE;
                case 1201:
                    return MULTISELECT_LONG_PRESS_TAP_ENTRY;
                case 1202:
                    return MULTISELECT_SINGLE_PRESS_SELECT_ENTRY;
                case 1203:
                    return MULTISELECT_SINGLE_PRESS_UNSELECT_ENTRY;
                case 1204:
                    return MULTISELECT_SINGLE_PRESS_TAP_VIA_CONTACT_BADGE;
                case 1205:
                    return MULTISELECT_SELECT_ALL;
                case 1206:
                    return MULTISELECT_UNSELECT_ALL;
                case 1207:
                    return MULTISELECT_TAP_DELETE_ICON;
                case 1208:
                    return MULTISELECT_DISPLAY_DELETE_CONFIRMATION_DIALOG;
                case 1209:
                    return MULTISELECT_DELETE_ENTRY_VIA_CONFIRMATION_DIALOG;
                case 1210:
                    return MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_BUTTON;
                case 1211:
                    return MULTISELECT_CANCEL_CONFIRMATION_DIALOG_VIA_CANCEL_TOUCH;
                case 1212:
                    return MULTISELECT_ROTATE_AND_SHOW_ACTION_MODE;
                case 1213:
                    return VOICEMAIL_VVM3_TOS_V2_CREATED;
                case 1214:
                    return VOICEMAIL_VVM3_TOS_V2_ACCEPTED;
                case 1215:
                    return VOICEMAIL_VVM3_TOS_V2_DECLINE_CLICKED;
                case 1216:
                    return VOICEMAIL_DIALER_TOS_CREATED;
                case 1217:
                    return VOICEMAIL_DIALER_TOS_ACCEPTED;
                case 1218:
                    return VOICEMAIL_DIALER_TOS_DECLINE_CLICKED;
                case 1219:
                    return CREATE_NEW_CONTACT_FROM_CALL_LOG;
                case 1220:
                    return CREATE_NEW_CONTACT_FROM_DIALPAD;
                case 1221:
                    return CREATE_NEW_CONTACT_FROM_VOICEMAIL;
                case 1222:
                    return CREATE_NEW_CONTACT_FROM_CALL_HISTORY;
                case 1223:
                    return ADD_TO_A_CONTACT_FROM_CALL_LOG;
                case 1224:
                    return ADD_TO_A_CONTACT_FROM_DIALPAD;
                case 1225:
                    return ADD_TO_A_CONTACT_FROM_VOICEMAIL;
                case 1226:
                    return ADD_TO_A_CONTACT_FROM_CALL_HISTORY;
                case 1227:
                    return CALLER_ID_REPORTED;
                case 1228:
                    return CALLER_ID_REPORT_FAILED;
                case 1229:
                    return VVM_TRANSCRIPTION_REQUEST_SENT;
                case 1230:
                    return VVM_TRANSCRIPTION_REQUEST_RETRY;
                case 1231:
                    return VVM_TRANSCRIPTION_RESPONSE_SUCCESS;
                case 1232:
                    return VVM_TRANSCRIPTION_RESPONSE_EMPTY;
                case 1233:
                    return VVM_TRANSCRIPTION_RESPONSE_INVALID;
                case 1234:
                    return VVM_TRANSCRIPTION_RESPONSE_RECOVERABLE_ERROR;
                case 1235:
                    return VVM_TRANSCRIPTION_RESPONSE_FATAL_ERROR;
                case 1236:
                    return UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN;
                case 1237:
                    return BUBBLE_PRIMARY_BUTTON_EXPAND;
                case 1238:
                    return BUBBLE_PRIMARY_BUTTON_RETURN_TO_CALL;
                case 1239:
                    return BACKUP_KEY_VALUE_ON_BACKUP;
                case 1240:
                    return BACKUP_KEY_VALUE_ON_RESTORE;
                case 1241:
                    return BACKUP_KEY_VALUE_ON_RESTORE_FINISHED;
                case 1242:
                    return BACKUP_KEY_VALUE_GET_BACKUP_SPECIFICATION;
                case 1243:
                    return BACKUP_KEY_VALUE_BACKUP_AGENT_CONSTRUCTOR;
                case 1244:
                    return UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_LIGHTBRINGER;
                case 1245:
                    return UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_IMS;
                case 1246:
                    return UPGRADE_TO_VIDEO_CALL_BUTTON_SHOWN_FOR_RCS;
                case 1247:
                    return LIGHTBRINGER_UPGRADE_REQUESTED;
                case 1248:
                    return HAS_LIGHTBRINGER_REACHABLE_CONTACTS;
                case 1249:
                    return HIGH_GLOBAL_NOTIFICATION_COUNT_REACHED;
                case 1250:
                    return VVM_TRANSCRIPTION_REQUEST_SENT_ASYNC;
                case 1251:
                    return VVM_TRANSCRIPTION_VOICEMAIL_RECEIVED;
                case 1252:
                    return VVM_TRANSCRIPTION_VOICEMAIL_FORMAT_NOT_SUPPORTED;
                case 1253:
                    return VVM_TRANSCRIPTION_VOICEMAIL_INVALID_DATA;
                case 1254:
                    return VVM_TRANSCRIPTION_VOICEMAIL_UPLOAD_FAILED;
                case 1255:
                    return VVM_TRANSCRIPTION_RESPONSE_LANGUAGE_NOT_SUPPORTED;
                case 1256:
                    return VVM_TRANSCRIPTION_RESPONSE_NO_SPEECH_DETECTED;
                case 1257:
                    return VVM_TRANSCRIPTION_RESPONSE_EXPIRED;
                case 1258:
                    return VVM_TRANSCRIPTION_RESPONSE_TOO_MANY_ERRORS;
                case 1259:
                    return VVM_TRANSCRIPTION_POLLING_TIMEOUT;
                case 1260:
                    return BUBBLE_COLLAPSE_BY_USER;
                case 1261:
                    return IN_CALL_SHOW_DIALPAD_BUTTON_PRESSED;
                case 1262:
                    return IN_CALL_ADD_CALL_BUTTON_PRESSED;
                case 1263:
                    return IN_CALL_MERGE_BUTTON_PRESSED;
                case 1264:
                    return IN_CALL_SWAP_SECONDARY_BUTTON_PRESSED;
                case 1265:
                    return IN_CALL_DIALPAD_NUMBER_BUTTON_PRESSED;
                case 1266:
                    return IN_CALL_DIALPAD_HANG_UP_BUTTON_PRESSED;
                case 1267:
                    return IN_CALL_DIALPAD_CLOSE_BUTTON_PRESSED;
                case 1268:
                    return VVM_NOTIFICATION_CREATED_WITH_IN_PROGRESS;
                case 1269:
                    return VVM_NOTIFICATION_CREATED_WITH_TRANSCRIPTION_FAILURE;
                case 1270:
                    return VVM_NOTIFICATION_CREATED_WITH_NO_TRANSCRIPTION;
                case 1271:
                    return VVM_TRANSCRIPTION_JOB_STOPPED;
                case 1272:
                    return VVM_TRANSCRIPTION_TASK_CANCELLED;
                case 1273:
                    return SWITCH_TAB_TO_FAVORITE_BY_SWIPE;
                case 1274:
                    return SWITCH_TAB_TO_CALL_LOG_BY_SWIPE;
                case 1275:
                    return SWITCH_TAB_TO_CONTACTS_BY_SWIPE;
                case 1276:
                    return SWITCH_TAB_TO_VOICEMAIL_BY_SWIPE;
                case 1277:
                    return SWITCH_TAB_TO_FAVORITE_BY_CLICK;
                case 1278:
                    return SWITCH_TAB_TO_CALL_LOG_BY_CLICK;
                case 1279:
                    return SWITCH_TAB_TO_CONTACTS_BY_CLICK;
                case 1280:
                    return SWITCH_TAB_TO_VOICEMAIL_BY_CLICK;
                case 1281:
                    return LIGHTBRINGER_NON_CONTACT_UPGRADE_REQUESTED;
                case 1282:
                    return LIGHTBRINGER_NON_CONTACT_VIDEO_REQUESTED_FROM_CALL_LOG;
                case 1283:
                    return VVM_TRANSCRIPTION_POLL_REQUEST;
                case 1284:
                    return CALL_DETAILS_IMS_VIDEO_CALL_BACK;
                case 1285:
                    return CALL_DETAILS_LIGHTBRINGER_CALL_BACK;
                case 1286:
                    return CALL_DETAILS_VOICE_CALL_BACK;
                case 1287:
                    return ASSISTED_DIALING_CONSTRAINT_PARSING_FAILURE;
                case 1288:
                    return ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_COUNTRY_CODE;
                case 1289:
                    return ASSISTED_DIALING_CONSTRAINT_NUMBER_HAS_EXTENSION;
                case 1292:
                    return ASSISTED_DIALING_FEATURE_DISABLED_BY_USER;
                case 1290:
                    return REPORT_SAME_PREFIX_CALL_AS_SPAM_VIA_CALL_HISTORY;
                case 1291:
                    return REPORT_SAME_PREFIX_CALL_AS_NOT_SPAM_VIA_CALL_HISTORY;
                case 1293:
                    return PRECALL_INITIATED;
                case 1294:
                    return PRECALL_INITIATED_EXTERNAL;
                case 1295:
                    return PRECALL_CANCELED;
                case 1296:
                    return DUAL_SIM_CHANGE_SIM_PRESSED;
                case 1297:
                    return DUAL_SIM_SELECTION_SHOWN;
                case 1298:
                    return DUAL_SIM_SELECTION_VOICEMAIL;
                case 1299:
                    return DUAL_SIM_SELECTION_IN_CONTACTS;
                case 1300:
                    return DUAL_SIM_SELECTION_SUGGESTION_AVAILABLE;
                case 1301:
                    return DUAL_SIM_SELECTION_SUGGESTED_CARRIER;
                case 1302:
                    return DUAL_SIM_SELECTION_SUGGESTED_FREQUENCY;
                case 1303:
                    return DUAL_SIM_SELECTION_SUGGESTED_SIM_SELECTED;
                case 1304:
                    return DUAL_SIM_SELECTION_NON_SUGGESTED_SIM_SELECTED;
                case 1305:
                    return DUAL_SIM_SELECTION_PREFERRED_SET;
                case 1306:
                    return DUAL_SIM_SELECTION_PREFERRED_USED;
                case 1389:
                    return DUAL_SIM_SELECTION_PREFERRED_NOT_SELECTABLE;
                case 1307:
                    return DUAL_SIM_SELECTION_GLOBAL_USED;
                case 1390:
                    return DUAL_SIM_SELECTION_GLOBAL_NOT_SELECTABLE;
                case 1322:
                    return DUAL_SIM_SELECTION_SUGGESTION_AUTO_SELECTED;
                case 1391:
                    return DUAL_SIM_SELECTION_SUGGESTION_AUTO_NOT_SELECTABLE;
                case 1308:
                    return DUO_CALL_LOG_SET_UP_INSTALL;
                case 1309:
                    return DUO_CALL_LOG_SET_UP_ACTIVATE;
                case 1310:
                    return DUO_CALL_LOG_INVITE;
                case 1311:
                    return BUBBLE_V2_CLICK_TO_EXPAND;
                case 1312:
                    return BUBBLE_V2_CLICK_TO_COLLAPSE;
                case 1313:
                    return BUBBLE_V2_RETURN_TO_CALL;
                case 1314:
                    return BUBBLE_V2_MUTE_CALL;
                case 1315:
                    return BUBBLE_V2_UNMUTE_CALL;
                case 1316:
                    return BUBBLE_V2_SPEAKERPHONE;
                case 1317:
                    return BUBBLE_V2_WIRED_OR_EARPIECE;
                case 1318:
                    return BUBBLE_V2_BLUETOOTH;
                case 1319:
                    return BUBBLE_V2_END_CALL;
                case 1320:
                    return BUBBLE_V2_BOTTOM_ACTION_DISMISS;
                case 1321:
                    return BUBBLE_V2_BOTTOM_ACTION_END_CALL;
                case 1323:
                    return BUBBLE_V2_SHOW;
                case 1324:
                    return DUO_CALL_LOG_SET_UP_INSTALL_SHOWN;
                case 1325:
                    return DUO_CALL_LOG_SET_UP_ACTIVATE_SHOWN;
                case 1326:
                    return DUO_CALL_LOG_INVITE_SHOWN;
                case 1327:
                    return MAIN_SWITCH_TAB_TO_FAVORITE;
                case 1328:
                    return MAIN_SWITCH_TAB_TO_CALL_LOG;
                case 1329:
                    return MAIN_SWITCH_TAB_TO_CONTACTS;
                case 1330:
                    return MAIN_SWITCH_TAB_TO_VOICEMAIL;
                case 1331:
                    return MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_CLOSE_SEARCH_AND_DIALPAD;
                case 1332:
                    return MAIN_TOUCH_DIALPAD_SEARCH_LIST_TO_HIDE_DIALPAD;
                case 1333:
                    return MAIN_TOUCH_SEARCH_LIST_TO_CLOSE_SEARCH;
                case 1334:
                    return MAIN_TOUCH_SEARCH_LIST_TO_HIDE_KEYBOARD;
                case 1335:
                    return MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH;
                case 1336:
                    return MAIN_PRESS_BACK_BUTTON_TO_CLOSE_SEARCH_AND_DIALPAD;
                case 1337:
                    return MAIN_PRESS_BACK_BUTTON_TO_HIDE_DIALPAD;
                case 1338:
                    return MAIN_CLICK_SEARCH_BAR;
                case 1339:
                    return MAIN_CLICK_SEARCH_BAR_VOICE_BUTTON;
                case 1340:
                    return MAIN_CLICK_FAB_TO_OPEN_DIALPAD;
                case 1341:
                    return ANNOTATED_CALL_LOG_NOT_DIRTY;
                case 1342:
                    return ANNOTATED_CALL_LOG_NO_CHANGES_NEEDED;
                case 1343:
                    return ANNOTATED_CALL_LOG_FORCE_REFRESH_NO_CHANGES_NEEDED;
                case 1344:
                    return ANNOTATED_CALL_LOG_CHANGES_NEEDED;
                case 1345:
                    return ANNOTATED_CALL_LOG_FORCE_REFRESH_CHANGES_NEEDED;
                case 1346:
                    return MAIN_VVM_TAB_VISIBLE;
                case 1347:
                    return MAIN_OPEN_WITH_TAB_FAVORITE;
                case 1348:
                    return MAIN_OPEN_WITH_TAB_CALL_LOG;
                case 1349:
                    return MAIN_OPEN_WITH_TAB_CONTACTS;
                case 1350:
                    return MAIN_OPEN_WITH_TAB_VOICEMAIL;
                case 1351:
                    return MAIN_OPEN_WITH_DIALPAD;
                case 1352:
                    return INCOMING_CALL_SCREENED;
                case 1353:
                    return INCOMING_CALL_AUTO_BLOCKED_AS_SPAM;
                case 1354:
                    return INCOMING_VOICEMAIL_SCREENED;
                case 1355:
                    return INCOMING_VOICEMAIL_AUTO_BLOCKED_AS_SPAM;
                case 1356:
                    return AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_SPAM;
                case 1357:
                    return AUTO_BLOCKED_SPAM_CALL_REPORTED_AS_NOT_SPAM;
                case 1358:
                    return SPAM_BLOCKING_ENABLED_THROUGH_SETTING;
                case 1359:
                    return SPAM_BLOCKING_DISABLED_THROUGH_SETTING;
                case 1360:
                    return SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_SETTING;
                case 1361:
                    return VVM_NOTIFICATIONS_SETTING_CLICKED;
                case 1362:
                    return VVM_USER_TURNED_TRANSCRIBE_ON_FROM_SETTINGS;
                case 1363:
                    return VVM_USER_TURNED_TRANSCRIBE_OFF_FROM_SETTINGS;
                case 1364:
                    return VVM_USER_TURNED_DONATION_ON_FROM_SETTINGS;
                case 1365:
                    return VVM_USER_TURNED_DONATION_OFF_FROM_SETTINGS;
                case 1366:
                    return SPAM_BLOCKING_CALL_LOG_PROMO_SHOWN;
                case 1367:
                    return SPAM_BLOCKING_ENABLED_THROUGH_CALL_LOG_PROMO;
                case 1368:
                    return SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_CALL_LOG_PROMO;
                case 1371:
                    return TOKEN_FETCHER_NEED_USER_APPROVAL;
                case 1372:
                    return TOKEN_FETCHER_IO_EXCEPTION;
                case 1373:
                    return TOKEN_FETCHER_AUTH_EXCEPTION;
                case 1374:
                    return TOKEN_FETCHER_CLEAR_EXCEPTION;
                case 1375:
                    return PEOPLE_API_LOOKUP_FAILED;
                case 1376:
                    return LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT;
                case 1377:
                    return LIGHTBRINGER_VIDEO_REQUESTED_FOR_SUGGESTED_CONTACT;
                case 1378:
                    return LIGHTBRINGER_VIDEO_REQUESTED_FOR_FAVORITE_CONTACT_DISAMBIG;
                case 1379:
                    return SPAM_BLOCKING_AFTER_CALL_NOTIFICATION_PROMO_SHOWN;
                case 1380:
                    return SPAM_BLOCKING_ENABLED_THROUGH_AFTER_CALL_NOTIFICATION_PROMO;
                case 1381:
                    return SPAM_BLOCKING_MODIFY_FAILURE_THROUGH_AFTER_CALL_NOTIFICATION_PROMO;
                case 1382:
                    return OUTGOING_RTT_CALL;
                case 1383:
                    return INCOMING_RTT_CALL;
                case 1384:
                    return RTT_MID_CALL_ENABLED;
                case 1385:
                    return RTT_MID_CALL_ACCEPTED;
                case 1386:
                    return RTT_MID_CALL_REJECTED;
                case 1387:
                    return RTT_SEND_BUTTON_CLICKED;
                case 1388:
                    return RTT_KEYBOARD_SEND_BUTTON_CLICKED;
                case 1392:
                    return START_CALL_IN_BUBBLE_MODE;
                case 1393:
                    return IN_CALL_SWITCH_AUDIO_ROUTE_SPEAKER;
                case 1394:
                    return IN_CALL_SWITCH_AUDIO_ROUTE_WIRED_HEADSET;
                case 1395:
                    return IN_CALL_SWITCH_AUDIO_ROUTE_EARPIECE;
                case 1396:
                    return IN_CALL_SWITCH_AUDIO_ROUTE_BLUETOOTH;
                case 1397:
                    return PEOPLE_API_PHONE_LOOKUP_TIMEOUT;
                case 1398:
                    return CP2_EXTENDED_DIRECTORY_PHONE_LOOKUP_TIMEOUT;
                case 1399:
                    return FAVORITE_ADD_FAVORITE;
                case 1400:
                    return FAVORITE_OPEN_DISAMBIG_DIALOG;
                case 1401:
                    return FAVORITE_REMOVE_FAVORITE_BY_DRAG_AND_DROP;
                case 1402:
                    return FAVORITE_MOVE_FAVORITE_BY_DRAG_AND_DROP;
                case 1403:
                    return FAVORITE_OPEN_FAVORITE_MENU;
                case 1404:
                    return FAVORITE_SEND_MESSAGE;
                case 1405:
                    return FAVORITE_OPEN_CONTACT_CARD;
                case 1406:
                    return FAVORITE_REMOVE_FAVORITE;
                case 1407:
                    return FAVORITE_SET_VIDEO_DEFAULT;
                case 1408:
                    return FAVORITE_SET_VOICE_DEFAULT;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
            return internalValueMap;
        }

        public final int getNumber() {
            return value;
        }

        // @@protoc_insertion_point(enum_scope:com.fissy.dialer.logging.DialerImpression.Type)
    }

    /**
     * Protobuf type {@code com.fissy.dialer.logging.DialerImpression}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageLite.Builder<
                    com.fissy.dialer.logging.DialerImpression, Builder> implements
            // @@protoc_insertion_point(builder_implements:com.fissy.dialer.logging.DialerImpression)
            com.fissy.dialer.logging.DialerImpressionOrBuilder {
        // Construct using com.fissy.dialer.logging.DialerImpression.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        // @@protoc_insertion_point(builder_scope:com.fissy.dialer.logging.DialerImpression)
    }
}

