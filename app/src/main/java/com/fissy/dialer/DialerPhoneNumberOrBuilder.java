// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/phonenumberproto/dialer_phone_number.proto

package com.fissy.dialer;

public interface DialerPhoneNumberOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.fissy.dialer.DialerPhoneNumber)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  boolean hasNormalizedNumber();
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  java.lang.String getNormalizedNumber();
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  com.google.protobuf.ByteString
      getNormalizedNumberBytes();

  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  boolean hasCountryIso();
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  java.lang.String getCountryIso();
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  com.google.protobuf.ByteString
      getCountryIsoBytes();

  /**
   * <pre>
   * True if the number is valid according to libphonenumber.
   * </pre>
   *
   * <code>optional bool is_valid = 3;</code>
   */
  boolean hasIsValid();
  /**
   * <pre>
   * True if the number is valid according to libphonenumber.
   * </pre>
   *
   * <code>optional bool is_valid = 3;</code>
   */
  boolean getIsValid();

  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  boolean hasPostDialPortion();
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  java.lang.String getPostDialPortion();
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  com.google.protobuf.ByteString
      getPostDialPortionBytes();
}
