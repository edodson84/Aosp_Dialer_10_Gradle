// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/fissy/dialer/phonenumberproto/dialer_phone_number.proto

package com.fissy.dialer;

/**
 * <pre>
 * A phone number for use in the dialer application in the context of a call. It
 * consists of a normalized number string and a two-letter country code.
 * The country is retrieved from CallLog.Calls#COUNTRY: "The ISO 3166-1 two
 * letters country code of the country where the user received or made the
 * call."
 * </pre>
 * <p>
 * Protobuf type {@code com.fissy.dialer.DialerPhoneNumber}
 */
public final class DialerPhoneNumber extends
        com.google.protobuf.GeneratedMessageLite<
                DialerPhoneNumber, DialerPhoneNumber.Builder> implements
        // @@protoc_insertion_point(message_implements:com.fissy.dialer.DialerPhoneNumber)
        DialerPhoneNumberOrBuilder {
    public static final int NORMALIZED_NUMBER_FIELD_NUMBER = 1;
    public static final int COUNTRY_ISO_FIELD_NUMBER = 2;
    public static final int IS_VALID_FIELD_NUMBER = 3;
    public static final int POST_DIAL_PORTION_FIELD_NUMBER = 4;
    // @@protoc_insertion_point(class_scope:com.fissy.dialer.DialerPhoneNumber)
    private static final com.fissy.dialer.DialerPhoneNumber DEFAULT_INSTANCE;
    private static volatile com.google.protobuf.Parser<DialerPhoneNumber> PARSER;

    static {
        DEFAULT_INSTANCE = new DialerPhoneNumber();
        DEFAULT_INSTANCE.makeImmutable();
    }

    private int bitField0_;
    private java.lang.String normalizedNumber_;
    private java.lang.String countryIso_;
    private boolean isValid_;
    private java.lang.String postDialPortion_;

    private DialerPhoneNumber() {
        normalizedNumber_ = "";
        countryIso_ = "";
        isValid_ = false;
        postDialPortion_ = "";
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, data, extensionRegistry);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input);
    }

    public static com.fissy.dialer.DialerPhoneNumber parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
                DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.fissy.dialer.DialerPhoneNumber prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static com.fissy.dialer.DialerPhoneNumber getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<DialerPhoneNumber> parser() {
        return DEFAULT_INSTANCE.getParserForType();
    }

    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public boolean hasNormalizedNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public java.lang.String getNormalizedNumber() {
        return normalizedNumber_;
    }

    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    private void setNormalizedNumber(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        normalizedNumber_ = value;
    }

    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public com.google.protobuf.ByteString
    getNormalizedNumberBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(normalizedNumber_);
    }

    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    private void setNormalizedNumberBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        normalizedNumber_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    private void clearNormalizedNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        normalizedNumber_ = getDefaultInstance().getNormalizedNumber();
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public boolean hasCountryIso() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public java.lang.String getCountryIso() {
        return countryIso_;
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    private void setCountryIso(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        countryIso_ = value;
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public com.google.protobuf.ByteString
    getCountryIsoBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(countryIso_);
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    private void setCountryIsoBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        countryIso_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    private void clearCountryIso() {
        bitField0_ = (bitField0_ & ~0x00000002);
        countryIso_ = getDefaultInstance().getCountryIso();
    }

    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    public boolean hasIsValid() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    public boolean getIsValid() {
        return isValid_;
    }

    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    private void setIsValid(boolean value) {
        bitField0_ |= 0x00000004;
        isValid_ = value;
    }

    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    private void clearIsValid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isValid_ = false;
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    public boolean hasPostDialPortion() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    public java.lang.String getPostDialPortion() {
        return postDialPortion_;
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    private void setPostDialPortion(
            java.lang.String value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        postDialPortion_ = value;
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    public com.google.protobuf.ByteString
    getPostDialPortionBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(postDialPortion_);
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    private void setPostDialPortionBytes(
            com.google.protobuf.ByteString value) {
        if (value == null) {
            throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        postDialPortion_ = value.toStringUtf8();
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    private void clearPostDialPortion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        postDialPortion_ = getDefaultInstance().getPostDialPortion();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeString(1, getNormalizedNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeString(2, getCountryIso());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeBool(3, isValid_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeString(4, getPostDialPortion());
        }
        unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(1, getNormalizedNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(2, getCountryIso());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(3, isValid_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.CodedOutputStream
                    .computeStringSize(4, getPostDialPortion());
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
    }

    protected final Object dynamicMethod(
            com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
            Object arg0, Object arg1) {
        switch (method) {
            case NEW_MUTABLE_INSTANCE: {
                return new com.fissy.dialer.DialerPhoneNumber();
            }
            case IS_INITIALIZED: {
                return DEFAULT_INSTANCE;
            }
            case MAKE_IMMUTABLE: {
                return null;
            }
            case NEW_BUILDER: {
                return new Builder();
            }
            case VISIT: {
                Visitor visitor = (Visitor) arg0;
                com.fissy.dialer.DialerPhoneNumber other = (com.fissy.dialer.DialerPhoneNumber) arg1;
                normalizedNumber_ = visitor.visitString(
                        hasNormalizedNumber(), normalizedNumber_,
                        other.hasNormalizedNumber(), other.normalizedNumber_);
                countryIso_ = visitor.visitString(
                        hasCountryIso(), countryIso_,
                        other.hasCountryIso(), other.countryIso_);
                isValid_ = visitor.visitBoolean(
                        hasIsValid(), isValid_,
                        other.hasIsValid(), other.isValid_);
                postDialPortion_ = visitor.visitString(
                        hasPostDialPortion(), postDialPortion_,
                        other.hasPostDialPortion(), other.postDialPortion_);
                if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                        .INSTANCE) {
                    bitField0_ |= other.bitField0_;
                }
                return this;
            }
            case MERGE_FROM_STREAM: {
                com.google.protobuf.CodedInputStream input =
                        (com.google.protobuf.CodedInputStream) arg0;
                com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                        (com.google.protobuf.ExtensionRegistryLite) arg1;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!parseUnknownField(tag, input)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                String s = input.readString();
                                bitField0_ |= 0x00000001;
                                normalizedNumber_ = s;
                                break;
                            }
                            case 18: {
                                String s = input.readString();
                                bitField0_ |= 0x00000002;
                                countryIso_ = s;
                                break;
                            }
                            case 24: {
                                bitField0_ |= 0x00000004;
                                isValid_ = input.readBool();
                                break;
                            }
                            case 34: {
                                String s = input.readString();
                                bitField0_ |= 0x00000008;
                                postDialPortion_ = s;
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw new RuntimeException(e.setUnfinishedMessage(this));
                } catch (java.io.IOException e) {
                    throw new RuntimeException(
                            new com.google.protobuf.InvalidProtocolBufferException(
                                    e.getMessage()).setUnfinishedMessage(this));
                } finally {
                }
            }
            case GET_DEFAULT_INSTANCE: {
                return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
                if (PARSER == null) {
                    synchronized (com.fissy.dialer.DialerPhoneNumber.class) {
                        if (PARSER == null) {
                            PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                        }
                    }
                }
                return PARSER;
            }
        }
        throw new UnsupportedOperationException();
    }

    /**
     * <pre>
     * A phone number for use in the dialer application in the context of a call. It
     * consists of a normalized number string and a two-letter country code.
     * The country is retrieved from CallLog.Calls#COUNTRY: "The ISO 3166-1 two
     * letters country code of the country where the user received or made the
     * call."
     * </pre>
     * <p>
     * Protobuf type {@code com.fissy.dialer.DialerPhoneNumber}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageLite.Builder<
                    com.fissy.dialer.DialerPhoneNumber, Builder> implements
            // @@protoc_insertion_point(builder_implements:com.fissy.dialer.DialerPhoneNumber)
            com.fissy.dialer.DialerPhoneNumberOrBuilder {
        // Construct using com.fissy.dialer.DialerPhoneNumber.newBuilder()
        private Builder() {
            super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * A dialer-normalized version of the number. Here are some general rules:
         * -Numbers containing "#" or starting with "*" are considered service numbers
         * and are stored exactly as the user dialed them.
         * -If a number is valid according to libphonenumber and can be parsed, this
         *  is the E164 version of it, with post dial digits appended.
         * -Otherwise, it is the network portion of the number as dialed with
         *  non-digits removed, with post dial digits appended. An example invalid
         *  number is a 7-digit US number (missing an area code) like "456-7890" which
         *  would be stored as "4567890".
         *  Note: Using this field without country_iso effectively loses country info
         *  when the number is not valid and no country prefix was prepended. This may
         *  cause numbers like {"456-7890", "US"} to be treated equivalently to
         *  {"456-7890", "DE"}, when they are not in fact equivalent.
         *  See DialerPhoneNumberUtil#parse.
         * </pre>
         *
         * <code>optional string normalized_number = 1;</code>
         */
        public boolean hasNormalizedNumber() {
            return instance.hasNormalizedNumber();
        }

        /**
         * <pre>
         * A dialer-normalized version of the number. Here are some general rules:
         * -Numbers containing "#" or starting with "*" are considered service numbers
         * and are stored exactly as the user dialed them.
         * -If a number is valid according to libphonenumber and can be parsed, this
         *  is the E164 version of it, with post dial digits appended.
         * -Otherwise, it is the network portion of the number as dialed with
         *  non-digits removed, with post dial digits appended. An example invalid
         *  number is a 7-digit US number (missing an area code) like "456-7890" which
         *  would be stored as "4567890".
         *  Note: Using this field without country_iso effectively loses country info
         *  when the number is not valid and no country prefix was prepended. This may
         *  cause numbers like {"456-7890", "US"} to be treated equivalently to
         *  {"456-7890", "DE"}, when they are not in fact equivalent.
         *  See DialerPhoneNumberUtil#parse.
         * </pre>
         *
         * <code>optional string normalized_number = 1;</code>
         */
        public java.lang.String getNormalizedNumber() {
            return instance.getNormalizedNumber();
        }

        /**
         * <pre>
         * A dialer-normalized version of the number. Here are some general rules:
         * -Numbers containing "#" or starting with "*" are considered service numbers
         * and are stored exactly as the user dialed them.
         * -If a number is valid according to libphonenumber and can be parsed, this
         *  is the E164 version of it, with post dial digits appended.
         * -Otherwise, it is the network portion of the number as dialed with
         *  non-digits removed, with post dial digits appended. An example invalid
         *  number is a 7-digit US number (missing an area code) like "456-7890" which
         *  would be stored as "4567890".
         *  Note: Using this field without country_iso effectively loses country info
         *  when the number is not valid and no country prefix was prepended. This may
         *  cause numbers like {"456-7890", "US"} to be treated equivalently to
         *  {"456-7890", "DE"}, when they are not in fact equivalent.
         *  See DialerPhoneNumberUtil#parse.
         * </pre>
         *
         * <code>optional string normalized_number = 1;</code>
         */
        public Builder setNormalizedNumber(
                java.lang.String value) {
            copyOnWrite();
            instance.setNormalizedNumber(value);
            return this;
        }

        /**
         * <pre>
         * A dialer-normalized version of the number. Here are some general rules:
         * -Numbers containing "#" or starting with "*" are considered service numbers
         * and are stored exactly as the user dialed them.
         * -If a number is valid according to libphonenumber and can be parsed, this
         *  is the E164 version of it, with post dial digits appended.
         * -Otherwise, it is the network portion of the number as dialed with
         *  non-digits removed, with post dial digits appended. An example invalid
         *  number is a 7-digit US number (missing an area code) like "456-7890" which
         *  would be stored as "4567890".
         *  Note: Using this field without country_iso effectively loses country info
         *  when the number is not valid and no country prefix was prepended. This may
         *  cause numbers like {"456-7890", "US"} to be treated equivalently to
         *  {"456-7890", "DE"}, when they are not in fact equivalent.
         *  See DialerPhoneNumberUtil#parse.
         * </pre>
         *
         * <code>optional string normalized_number = 1;</code>
         */
        public com.google.protobuf.ByteString
        getNormalizedNumberBytes() {
            return instance.getNormalizedNumberBytes();
        }

        /**
         * <pre>
         * A dialer-normalized version of the number. Here are some general rules:
         * -Numbers containing "#" or starting with "*" are considered service numbers
         * and are stored exactly as the user dialed them.
         * -If a number is valid according to libphonenumber and can be parsed, this
         *  is the E164 version of it, with post dial digits appended.
         * -Otherwise, it is the network portion of the number as dialed with
         *  non-digits removed, with post dial digits appended. An example invalid
         *  number is a 7-digit US number (missing an area code) like "456-7890" which
         *  would be stored as "4567890".
         *  Note: Using this field without country_iso effectively loses country info
         *  when the number is not valid and no country prefix was prepended. This may
         *  cause numbers like {"456-7890", "US"} to be treated equivalently to
         *  {"456-7890", "DE"}, when they are not in fact equivalent.
         *  See DialerPhoneNumberUtil#parse.
         * </pre>
         *
         * <code>optional string normalized_number = 1;</code>
         */
        public Builder setNormalizedNumberBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setNormalizedNumberBytes(value);
            return this;
        }

        /**
         * <pre>
         * A dialer-normalized version of the number. Here are some general rules:
         * -Numbers containing "#" or starting with "*" are considered service numbers
         * and are stored exactly as the user dialed them.
         * -If a number is valid according to libphonenumber and can be parsed, this
         *  is the E164 version of it, with post dial digits appended.
         * -Otherwise, it is the network portion of the number as dialed with
         *  non-digits removed, with post dial digits appended. An example invalid
         *  number is a 7-digit US number (missing an area code) like "456-7890" which
         *  would be stored as "4567890".
         *  Note: Using this field without country_iso effectively loses country info
         *  when the number is not valid and no country prefix was prepended. This may
         *  cause numbers like {"456-7890", "US"} to be treated equivalently to
         *  {"456-7890", "DE"}, when they are not in fact equivalent.
         *  See DialerPhoneNumberUtil#parse.
         * </pre>
         *
         * <code>optional string normalized_number = 1;</code>
         */
        public Builder clearNormalizedNumber() {
            copyOnWrite();
            instance.clearNormalizedNumber();
            return this;
        }

        /**
         * <pre>
         * The country in which the call to the number occurred, retrieved from
         * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
         * country where the user received or made the call."
         * </pre>
         *
         * <code>optional string country_iso = 2;</code>
         */
        public boolean hasCountryIso() {
            return instance.hasCountryIso();
        }

        /**
         * <pre>
         * The country in which the call to the number occurred, retrieved from
         * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
         * country where the user received or made the call."
         * </pre>
         *
         * <code>optional string country_iso = 2;</code>
         */
        public java.lang.String getCountryIso() {
            return instance.getCountryIso();
        }

        /**
         * <pre>
         * The country in which the call to the number occurred, retrieved from
         * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
         * country where the user received or made the call."
         * </pre>
         *
         * <code>optional string country_iso = 2;</code>
         */
        public Builder setCountryIso(
                java.lang.String value) {
            copyOnWrite();
            instance.setCountryIso(value);
            return this;
        }

        /**
         * <pre>
         * The country in which the call to the number occurred, retrieved from
         * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
         * country where the user received or made the call."
         * </pre>
         *
         * <code>optional string country_iso = 2;</code>
         */
        public com.google.protobuf.ByteString
        getCountryIsoBytes() {
            return instance.getCountryIsoBytes();
        }

        /**
         * <pre>
         * The country in which the call to the number occurred, retrieved from
         * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
         * country where the user received or made the call."
         * </pre>
         *
         * <code>optional string country_iso = 2;</code>
         */
        public Builder setCountryIsoBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setCountryIsoBytes(value);
            return this;
        }

        /**
         * <pre>
         * The country in which the call to the number occurred, retrieved from
         * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
         * country where the user received or made the call."
         * </pre>
         *
         * <code>optional string country_iso = 2;</code>
         */
        public Builder clearCountryIso() {
            copyOnWrite();
            instance.clearCountryIso();
            return this;
        }

        /**
         * <pre>
         * True if the number is valid according to libphonenumber.
         * </pre>
         *
         * <code>optional bool is_valid = 3;</code>
         */
        public boolean hasIsValid() {
            return instance.hasIsValid();
        }

        /**
         * <pre>
         * True if the number is valid according to libphonenumber.
         * </pre>
         *
         * <code>optional bool is_valid = 3;</code>
         */
        public boolean getIsValid() {
            return instance.getIsValid();
        }

        /**
         * <pre>
         * True if the number is valid according to libphonenumber.
         * </pre>
         *
         * <code>optional bool is_valid = 3;</code>
         */
        public Builder setIsValid(boolean value) {
            copyOnWrite();
            instance.setIsValid(value);
            return this;
        }

        /**
         * <pre>
         * True if the number is valid according to libphonenumber.
         * </pre>
         *
         * <code>optional bool is_valid = 3;</code>
         */
        public Builder clearIsValid() {
            copyOnWrite();
            instance.clearIsValid();
            return this;
        }

        /**
         * <pre>
         * The post dial portion of the number as described by
         * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
         * normalized_number, but this information is duplicated here for convenience.
         * This includes pause and wait characters, but strips other characters, so
         * for example would be ",123;456" given the raw input of "456-7890,123; 456".
         * </pre>
         *
         * <code>optional string post_dial_portion = 4;</code>
         */
        public boolean hasPostDialPortion() {
            return instance.hasPostDialPortion();
        }

        /**
         * <pre>
         * The post dial portion of the number as described by
         * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
         * normalized_number, but this information is duplicated here for convenience.
         * This includes pause and wait characters, but strips other characters, so
         * for example would be ",123;456" given the raw input of "456-7890,123; 456".
         * </pre>
         *
         * <code>optional string post_dial_portion = 4;</code>
         */
        public java.lang.String getPostDialPortion() {
            return instance.getPostDialPortion();
        }

        /**
         * <pre>
         * The post dial portion of the number as described by
         * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
         * normalized_number, but this information is duplicated here for convenience.
         * This includes pause and wait characters, but strips other characters, so
         * for example would be ",123;456" given the raw input of "456-7890,123; 456".
         * </pre>
         *
         * <code>optional string post_dial_portion = 4;</code>
         */
        public Builder setPostDialPortion(
                java.lang.String value) {
            copyOnWrite();
            instance.setPostDialPortion(value);
            return this;
        }

        /**
         * <pre>
         * The post dial portion of the number as described by
         * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
         * normalized_number, but this information is duplicated here for convenience.
         * This includes pause and wait characters, but strips other characters, so
         * for example would be ",123;456" given the raw input of "456-7890,123; 456".
         * </pre>
         *
         * <code>optional string post_dial_portion = 4;</code>
         */
        public com.google.protobuf.ByteString
        getPostDialPortionBytes() {
            return instance.getPostDialPortionBytes();
        }

        /**
         * <pre>
         * The post dial portion of the number as described by
         * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
         * normalized_number, but this information is duplicated here for convenience.
         * This includes pause and wait characters, but strips other characters, so
         * for example would be ",123;456" given the raw input of "456-7890,123; 456".
         * </pre>
         *
         * <code>optional string post_dial_portion = 4;</code>
         */
        public Builder setPostDialPortionBytes(
                com.google.protobuf.ByteString value) {
            copyOnWrite();
            instance.setPostDialPortionBytes(value);
            return this;
        }

        /**
         * <pre>
         * The post dial portion of the number as described by
         * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
         * normalized_number, but this information is duplicated here for convenience.
         * This includes pause and wait characters, but strips other characters, so
         * for example would be ",123;456" given the raw input of "456-7890,123; 456".
         * </pre>
         *
         * <code>optional string post_dial_portion = 4;</code>
         */
        public Builder clearPostDialPortion() {
            copyOnWrite();
            instance.clearPostDialPortion();
            return this;
        }

        // @@protoc_insertion_point(builder_scope:com.fissy.dialer.DialerPhoneNumber)
    }
}

